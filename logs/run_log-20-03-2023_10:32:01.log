
*****INICIO LOAD DATA******

*****INICIO PRINT INFOS******
Número total de linhas do DataFrame: 3153593
Número de colunas: 112
Informações do DataFrame:
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 3153593 entries, 0 to 3153592
Data columns (total 112 columns):
 #    Column                            Dtype         
---   ------                            -----         
 0    ID_ANIMAL                         uint32        
 1    EstabelecimentoMunicipio          category      
 2    DataAbate                         datetime64[ns]
 3    Frigorifico_ID                    uint8         
 4    Frigorifico_CNPJ                  uint64        
 5    Frigorifico_RazaoSocial           category      
 6    Municipio_Frigorifico             category      
 7    Tipificacao                       category      
 8    Maturidade                        category      
 9    Acabamento                        category      
 10   Peso                              float32       
 11   EstabelecimentoIdentificador      uint16        
 12   Data_homol                        datetime64[ns]
 13   Questionario_ID                   uint16        
 14   QuestionarioClassificacaoEstabel  uint8         
 15   FERTIIRRIGACAO                    uint8         
 16   ILP                               uint8         
 17   IFP                               uint8         
 18   ILPF                              uint8         
 19   CONCEN_VOLUM                      UInt8         
 20   CREEPFEEDING                      UInt8         
 21   FORN_ESTRAT_SILAGEM               UInt8         
 22   PROTEICO                          UInt8         
 23   PROTEICO_ENERGETICO               UInt8         
 24   RACAO_BAL_CONS_INFERIOR           UInt8         
 25   SAL_MINERAL                       UInt8         
 26   SALMINERAL_UREIA                  UInt8         
 27   RACAOO_BAL_CONSUMO_IG             UInt8         
 28   GRAO_INTEIRO                      UInt8         
 29   ALTO_CONCENTR_VOLUM               UInt8         
 30   ALTO_CONCENTRADO                  UInt8         
 31   QuestionarioPossuiOutrosIncentiv  uint8         
 32   QuestionarioFabricaRacao          uint8         
 33   area so confinamento              UInt8         
 34   regua de manejo                   UInt8         
 35   boa cobertura vegetal, com baixa  UInt8         
 36   erosaoo laminar ou em sulco igua  UInt8         
 37   identificacao individual          UInt8         
 38   rastreamento SISBOV               UInt8         
 39   Lista Trace                       UInt8         
 40   BPA                               UInt8         
 41   participa de aliancas mercadolog  UInt8         
 42   QuestionarioPraticaRecuperacaoPa  uint8         
 43   Confinamento                      UInt8         
 44   Suplementacao_a_campo             UInt8         
 45   SemiConfinamento                  UInt8         
 46   dif_datas                         uint16        
 47   DataAbate_6m_ANT                  datetime64[ns]
 48   data_homol_select                 datetime64[ns]
 49   data12m                           datetime64[ns]
 50   data6m                            datetime64[ns]
 51   data3m                            datetime64[ns]
 52   data1m                            datetime64[ns]
 53   data7d                            datetime64[ns]
 54   tot7d_Chuva                       float32       
 55   med7d_TempInst                    float32       
 56   med7d_TempMin                     float32       
 57   med7d_UmidInst                    float32       
 58   med7d_formITUinst                 float32       
 59   med7d_formITUmax                  float32       
 60   med7d_NDVI                        float32       
 61   med7d_EVI                         float32       
 62   med7d_preR_soja                   float32       
 63   med7d_preR_milho                  float32       
 64   med7d_preR_boi                    float32       
 65   tot1m_Chuva                       float32       
 66   med1m_TempInst                    float32       
 67   med1m_UmidInst                    float32       
 68   med1m_formITUinst                 float32       
 69   med1m_NDVI                        float32       
 70   med1m_EVI                         float32       
 71   med1m_preR_soja                   float32       
 72   med1m_preR_milho                  float32       
 73   med1m_preR_boi                    float32       
 74   tot3m_Chuva                       float32       
 75   med3m_TempInst                    float32       
 76   med3m_UmidInst                    float32       
 77   med3m_formITUinst                 float32       
 78   med3m_formITUmax                  float32       
 79   med3m_NDVI                        float32       
 80   med3m_EVI                         float32       
 81   med3m_preR_soja                   float32       
 82   med3m_preR_milho                  float32       
 83   med3m_preR_boi                    float32       
 84   tot6m_Chuva                       float32       
 85   med6m_TempInst                    float32       
 86   med6m_UmidInst                    float32       
 87   med6m_formITUinst                 float32       
 88   med6m_NDVI                        float32       
 89   med6m_EVI                         float32       
 90   med6m_preR_soja                   float32       
 91   med6m_preR_milho                  float32       
 92   med6m_preR_boi                    float32       
 93   tot12m_Chuva                      float32       
 94   med12m_TempInst                   float32       
 95   med12m_TempMin                    float32       
 96   med12m_UmidInst                   float32       
 97   med12m_formITUinst                float32       
 98   med12m_NDVI                       float32       
 99   med12m_EVI                        float32       
 100  med12m_preR_soja                  float32       
 101  med12m_preR_milho                 float32       
 102  med12m_preR_boi                   float32       
 103  cnt7d_CL_ITUinst                  float32       
 104  cnt1m_CL_ITUinst                  float32       
 105  cnt3m_CL_ITUinst                  float32       
 106  cnt6m_CL_ITUinst                  float32       
 107  cnt12m_CL_ITUinst                 float32       
 108  ANO                               uint16        
 109  CATEGORIA                         category      
 110  classificacao                     category      
 111  Motivo                            category      
dtypes: UInt8(24), category(9), datetime64[ns](9), float32(55), uint16(4), uint32(1), uint64(1), uint8(9)
memory usage: 1.1 GB
*****FIM PRINT INFOS*********
Function informations Took 0:00:00.015965

*****INICIO DELETE COLUNAS******
Coluna EstabelecimentoMunicipio excluída.
Coluna Maturidade excluída.
Coluna Acabamento excluída.
Coluna Peso excluída.
Coluna DataAbate excluída.
Coluna ANO excluída.
Coluna Frigorifico_ID excluída.
Coluna Frigorifico_CNPJ excluída.
Coluna Frigorifico_RazaoSocial excluída.
Coluna Municipio_Frigorifico excluída.
Coluna EstabelecimentoIdentificador excluída.
Coluna Data_homol excluída.
Coluna Questionario_ID excluída.
Coluna FERTIIRRIGACAO excluída.
Coluna CONCEN_VOLUM excluída.
Coluna CREEPFEEDING excluída.
Coluna FORN_ESTRAT_SILAGEM excluída.
Coluna PROTEICO excluída.
Coluna PROTEICO_ENERGETICO excluída.
Coluna RACAO_BAL_CONS_INFERIOR excluída.
Coluna SAL_MINERAL excluída.
Coluna SALMINERAL_UREIA excluída.
Coluna RACAOO_BAL_CONSUMO_IG excluída.
Coluna GRAO_INTEIRO excluída.
Coluna ALTO_CONCENTR_VOLUM excluída.
Coluna ALTO_CONCENTRADO excluída.
Coluna BPA excluída.
Coluna area so confinamento excluída.
Coluna Lista Trace excluída.
Coluna Motivo excluída.
Coluna data_homol_select excluída.
Coluna dif_datas excluída.
Coluna DataAbate_6m_ANT excluída.
Coluna data12m excluída.
Coluna data6m excluída.
Coluna data3m excluída.
Coluna data1m excluída.
Coluna data7d excluída.
Coluna med7d_formITUinst excluída.
Coluna med7d_preR_soja excluída.
Coluna med7d_preR_milho excluída.
Coluna med7d_preR_boi excluída.
Coluna med1m_formITUinst excluída.
Coluna med1m_preR_soja excluída.
Coluna med1m_preR_milho excluída.
Coluna med1m_preR_boi excluída.
Coluna med3m_preR_soja excluída.
Coluna med6m_preR_soja excluída.
Coluna med12m_preR_soja excluída.
Coluna cnt7d_CL_ITUinst excluída.
Coluna cnt1m_CL_ITUinst excluída.
Coluna cnt3m_CL_ITUinst excluída.
Coluna cnt6m_CL_ITUinst excluída.
Coluna cnt12m_CL_ITUinst excluída.
Coluna tot7d_Chuva excluída.
Coluna med7d_TempInst excluída.
Coluna med7d_TempMin excluída.
Coluna med7d_UmidInst excluída.
Coluna med7d_formITUmax excluída.
Coluna med7d_NDVI excluída.
Coluna med7d_EVI excluída.
Coluna tot1m_Chuva excluída.
Coluna med1m_TempInst excluída.
Coluna med1m_UmidInst excluída.
Coluna med1m_NDVI excluída.
Coluna med1m_EVI excluída.
Coluna med3m_TempInst excluída.
Coluna med3m_UmidInst excluída.
Coluna med3m_formITUmax excluída.
Coluna med3m_EVI excluída.
Coluna med6m_TempInst excluída.
Coluna med6m_UmidInst excluída.
Coluna med6m_EVI excluída.
Coluna med12m_TempInst excluída.
Coluna med12m_TempMin excluída.
Coluna med12m_UmidInst excluída.
Coluna med12m_EVI excluída.
Coluna boa cobertura vegetal, com baixa excluída.
Coluna erosaoo laminar ou em sulco igua excluída.
Coluna classificacao excluída.
*****FIM DELETE COLUNAS*********

*****INICIO PRINT INFOS******
Número total de linhas do DataFrame: 3153593
Número de colunas: 32
Informações do DataFrame:
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 3153593 entries, 0 to 3153592
Data columns (total 32 columns):
 #   Column                            Dtype   
---  ------                            -----   
 0   ID_ANIMAL                         uint32  
 1   Tipificacao                       category
 2   QuestionarioClassificacaoEstabel  uint8   
 3   ILP                               uint8   
 4   IFP                               uint8   
 5   ILPF                              uint8   
 6   QuestionarioPossuiOutrosIncentiv  uint8   
 7   QuestionarioFabricaRacao          uint8   
 8   regua de manejo                   UInt8   
 9   identificacao individual          UInt8   
 10  rastreamento SISBOV               UInt8   
 11  participa de aliancas mercadolog  UInt8   
 12  QuestionarioPraticaRecuperacaoPa  uint8   
 13  Confinamento                      UInt8   
 14  Suplementacao_a_campo             UInt8   
 15  SemiConfinamento                  UInt8   
 16  tot3m_Chuva                       float32 
 17  med3m_formITUinst                 float32 
 18  med3m_NDVI                        float32 
 19  med3m_preR_milho                  float32 
 20  med3m_preR_boi                    float32 
 21  tot6m_Chuva                       float32 
 22  med6m_formITUinst                 float32 
 23  med6m_NDVI                        float32 
 24  med6m_preR_milho                  float32 
 25  med6m_preR_boi                    float32 
 26  tot12m_Chuva                      float32 
 27  med12m_formITUinst                float32 
 28  med12m_NDVI                       float32 
 29  med12m_preR_milho                 float32 
 30  med12m_preR_boi                   float32 
 31  CATEGORIA                         category
dtypes: UInt8(7), category(2), float32(15), uint32(1), uint8(7)
memory usage: 261.7 MB
*****FIM PRINT INFOS*********
Function informations Took 0:00:00.007864

*****FIM LOAD DATA******
Function load_data Took 0:03:02.274822

*****INICIO SHOW SETTINGS******
os = <module 'os' from '/usr/local/lib/python3.8/os.py'>
pd = <module 'pandas' from '/home/externo/rafaelrm/algoritmos/run_pipeline_target_categoria_26012023/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/pandas/__init__.py'>
torch = <module 'torch' from '/home/externo/rafaelrm/algoritmos/run_pipeline_target_categoria_26012023/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/torch/__init__.py'>
PANDAS_MAX_ROWS = 5000
random_seed = 42
n_jobs = 1
dataset_folder_path = /home/externo/rafaelrm/base_dados/
csv_path = /home/externo/rafaelrm/base_dados/TAB_MODELAGEM_RAFAEL_2020_1.csv
number_csv_lines = None
dtype_dict = {'ID_ANIMAL': 'uint32', 'EstabelecimentoMunicipio': 'category', 'Frigorifico_ID': 'uint8', 'Frigorifico_CNPJ': 'uint64', 'Frigorifico_RazaoSocial': 'category', 'Municipio_Frigorifico': 'category', 'Tipificacao': 'category', 'Maturidade': 'category', 'Acabamento': 'category', 'Peso': 'float32', 'EstabelecimentoIdentificador': 'uint16', 'Questionario_ID': 'uint16', 'QuestionarioClassificacaoEstabel': 'uint8', 'FERTIIRRIGACAO': 'uint8', 'ILP': 'uint8', 'IFP': 'uint8', 'ILPF': 'uint8', 'CONCEN_VOLUM': 'UInt8', 'CREEPFEEDING': 'UInt8', 'FORN_ESTRAT_SILAGEM': 'UInt8', 'PROTEICO': 'UInt8', 'PROTEICO_ENERGETICO': 'UInt8', 'RACAO_BAL_CONS_INFERIOR': 'UInt8', 'SAL_MINERAL': 'UInt8', 'SALMINERAL_UREIA': 'UInt8', 'RACAOO_BAL_CONSUMO_IG': 'UInt8', 'GRAO_INTEIRO': 'UInt8', 'ALTO_CONCENTR_VOLUM': 'UInt8', 'ALTO_CONCENTRADO': 'UInt8', 'QuestionarioPossuiOutrosIncentiv': 'uint8', 'QuestionarioFabricaRacao': 'uint8', 'area so confinamento': 'UInt8', 'regua de manejo': 'UInt8', 'boa cobertura vegetal, com baixa': 'UInt8', 'erosaoo laminar ou em sulco igua': 'UInt8', 'identificacao individual': 'UInt8', 'rastreamento SISBOV': 'UInt8', 'Lista Trace': 'UInt8', 'BPA': 'UInt8', 'participa de aliancas mercadolog': 'UInt8', 'QuestionarioPraticaRecuperacaoPa': 'uint8', 'Confinamento': 'UInt8', 'Suplementacao_a_campo': 'UInt8', 'SemiConfinamento': 'UInt8', 'dif_datas': 'uint16', 'tot7d_Chuva': 'float32', 'med7d_TempInst': 'float32', 'med7d_TempMin': 'float32', 'med7d_UmidInst': 'float32', 'med7d_formITUinst': 'float32', 'med7d_formITUmax': 'float32', 'med7d_NDVI': 'float32', 'med7d_EVI': 'float32', 'med7d_preR_soja': 'float32', 'med7d_preR_milho': 'float32', 'med7d_preR_boi': 'float32', 'tot1m_Chuva': 'float32', 'med1m_TempInst': 'float32', 'med1m_UmidInst': 'float32', 'med1m_formITUinst': 'float32', 'med1m_NDVI': 'float32', 'med1m_EVI': 'float32', 'med1m_preR_soja': 'float32', 'med1m_preR_milho': 'float32', 'med1m_preR_boi': 'float32', 'tot3m_Chuva': 'float32', 'med3m_TempInst': 'float32', 'med3m_UmidInst': 'float32', 'med3m_formITUinst': 'float32', 'med3m_formITUmax': 'float32', 'med3m_NDVI': 'float32', 'med3m_EVI': 'float32', 'med3m_preR_soja': 'float32', 'med3m_preR_milho': 'float32', 'med3m_preR_boi': 'float32', 'tot6m_Chuva': 'float32', 'med6m_TempInst': 'float32', 'med6m_UmidInst': 'float32', 'med6m_formITUinst': 'float32', 'med6m_NDVI': 'float32', 'med6m_EVI': 'float32', 'med6m_preR_soja': 'float32', 'med6m_preR_milho': 'float32', 'med6m_preR_boi': 'float32', 'tot12m_Chuva': 'float32', 'med12m_TempInst': 'float32', 'med12m_TempMin': 'float32', 'med12m_UmidInst': 'float32', 'med12m_formITUinst': 'float32', 'med12m_NDVI': 'float32', 'med12m_EVI': 'float32', 'med12m_preR_soja': 'float32', 'med12m_preR_milho': 'float32', 'med12m_preR_boi': 'float32', 'cnt7d_CL_ITUinst': 'float32', 'cnt1m_CL_ITUinst': 'float32', 'cnt3m_CL_ITUinst': 'float32', 'cnt6m_CL_ITUinst': 'float32', 'cnt12m_CL_ITUinst': 'float32', 'ANO': 'uint16', 'CATEGORIA': 'category', 'classificacao': 'category', 'Motivo': 'category', 'QTD_ANIMAIS_LOTE': 'uint16', 'CATEGORIA_BINARIA': 'category'}
parse_dates = ['DataAbate', 'Data_homol', 'DataAbate_6m_ANT', 'data_homol_select', 'data12m', 'data6m', 'data3m', 'data1m', 'data7d']
delete_columns_names_on_load_data = ['EstabelecimentoMunicipio', 'Maturidade', 'Acabamento', 'Peso', 'DataAbate', 'ANO', 'Frigorifico_ID', 'Frigorifico_CNPJ', 'Frigorifico_RazaoSocial', 'Municipio_Frigorifico', 'EstabelecimentoIdentificador', 'Data_homol', 'Questionario_ID', 'FERTIIRRIGACAO', 'CONCEN_VOLUM', 'CREEPFEEDING', 'FORN_ESTRAT_SILAGEM', 'PROTEICO', 'PROTEICO_ENERGETICO', 'RACAO_BAL_CONS_INFERIOR', 'SAL_MINERAL', 'SALMINERAL_UREIA', 'RACAOO_BAL_CONSUMO_IG', 'GRAO_INTEIRO', 'ALTO_CONCENTR_VOLUM', 'ALTO_CONCENTRADO', 'BPA', 'area so confinamento', 'Lista Trace', 'Motivo', 'data_homol_select', 'dif_datas', 'DataAbate_6m_ANT', 'data12m', 'data6m', 'data3m', 'data1m', 'data7d', 'med7d_formITUinst', 'med7d_preR_soja', 'med7d_preR_milho', 'med7d_preR_boi', 'med1m_formITUinst', 'med1m_preR_soja', 'med1m_preR_milho', 'med1m_preR_boi', 'med3m_preR_soja', 'med6m_preR_soja', 'med12m_preR_soja', 'cnt7d_CL_ITUinst', 'cnt1m_CL_ITUinst', 'cnt3m_CL_ITUinst', 'cnt6m_CL_ITUinst', 'cnt12m_CL_ITUinst', 'tot7d_Chuva', 'med7d_TempInst', 'med7d_TempMin', 'med7d_UmidInst', 'med7d_formITUmax', 'med7d_NDVI', 'med7d_EVI', 'tot1m_Chuva', 'med1m_TempInst', 'med1m_UmidInst', 'med1m_NDVI', 'med1m_EVI', 'med3m_TempInst', 'med3m_UmidInst', 'med3m_formITUmax', 'med3m_EVI', 'med6m_TempInst', 'med6m_UmidInst', 'med6m_EVI', 'med12m_TempInst', 'med12m_TempMin', 'med12m_UmidInst', 'med12m_EVI', 'boa cobertura vegetal, com baixa', 'erosaoo laminar ou em sulco igua', 'classificacao']
PATH_SAVE_PLOTS = ./plots
PATH_SAVE_ESTIMATORS_REPR = ./runs/estimators_repr
PATH_SAVE_BEST_ESTIMATORS = ./runs/best_estimators
PATH_SAVE_RESULTS = ./runs/results
PATH_SAVE_LOGS = ./logs
PATH_SAVE_ENCODERS_SCALERS = ./runs/encoders_scalers
ordinal_encoder_columns_names = {'QuestionarioClassificacaoEstabel': ['0', '21', '26', '30']}
columns_ordinal_encoded = {}
label_encoder_columns_names = ['CATEGORIA']
columns_label_encoded = {}
one_hot_encoder_columns_names = ['Tipificacao']
columns_one_hot_encoded = {}
min_max_scaler_columns_names = ['tot3m_Chuva', 'med3m_formITUinst', 'med3m_NDVI', 'med3m_preR_milho', 'med3m_preR_boi', 'tot6m_Chuva', 'med6m_formITUinst', 'med6m_NDVI', 'med6m_preR_milho', 'med6m_preR_boi', 'tot12m_Chuva', 'med12m_formITUinst', 'med12m_NDVI', 'med12m_preR_milho', 'med12m_preR_boi']
columns_min_max_scaled = {}
columns_label_binarized = {}
simple_imputer_columns_names = []
columns_names_drop_feature_by_correlation = ['med3m_formITUinst', 'med3m_preR_boi', 'med6m_preR_boi', 'CATEGORIA']
class_column = CATEGORIA
classifiers = {}
models_results = {}
device_name = auto
use_embeddings = True
use_cat_emb_dim = True
threshold_categorical_features = 150
num_workers = 0
eval_metric = ['balanced_accuracy', 'accuracy', 'logloss', <class 'pytorch_tabnet_tuner.tab_model_tuner.F1ScoreMacro'>]
augmentations = None
weights = 0
batch_size = 16384
virtual_batch_size = 2048
run_grid_search_cv_tuner = True
save_results_during_run = True
new_run = False
PATH_OBJECTS_PERSISTED_RESULTS_RUNS = ./runs/objects_persisted_results_runs
PARAMETERS_PERSIST_FILENAME = ./runs/objects_persisted_results_runs/parameters_persist
RESULTS_PERSIST_FILENAME = ./runs/objects_persisted_results_runs/results_persist
SPLIT_PERSIST_FILENAME = ./runs/objects_persisted_results_runs/split_persist
tree_method = hist
objective = multi:softmax
*****FIM SHOW SETTINGS******


*****INICIO DELETE DUPLICATE ROWS BY ATTRIBUTE******
Linhas duplicadas encontradas para o atributo ID_ANIMAL.
Linhas duplicadas deletadas.
*****FIM DELETE DUPLICATE ROWS BY ATTRIBUTE*********
Function delete_duplicate_rows_by_attribute Took 0:00:02.449310

*****INICIO DELETE COLUNAS******
Coluna ID_ANIMAL excluída.
*****FIM DELETE COLUNAS*********

*****INICIO DELETE NAN ROWS******
Linhas com valores NaN encontradas.
*****FIM DELETE NAN ROWS*********
Function delete_nan_rows Took 0:00:01.084679


*****INICIO DELETE COLUMNS WITH SINGLE VALUE******
>>> Nenhuma coluna com valor único encontrada.
*****FIM DELETE COLUMNS WITH SINGLE VALUE*********
Function delete_columns_with_single_value Took 0:00:00.943376


*****INICIO LABEL ENCODER******
*****FIM LABEL ENCODER*********
Function label_encoder_columns Took 0:00:01.042522

Object saved in file: ./runs/encoders_scalers/target_encoded-20-03-2023_10:35:09.joblib

*****INICIO RELATÓRIO DISTRIBUIÇÃO DE CLASSES******
Distribuição da classe 0: 35%
Distribuição da classe 1: 21%
Distribuição da classe 2: 16%
Distribuição da classe 3: 8%
Distribuição da classe 4: 4%
Distribuição da classe 5: 17%
*****FIM RELATÓRIO DISTRIBUIÇÃO DE CLASSES******
Function class_distribution Took 0:00:00.083798

/home/externo/rafaelrm/algoritmos/run_pipeline_target_categoria_26012023/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/pytorch_tabnet/abstract_model.py:75: UserWarning: Device used : cpu
  warnings.warn(f"Device used : {self.device}")
Number of folds for cross validation: 10
Scoring strategy for grid search: f1_macro
Test Size: 0.2

x_train shape: (2378460, 30)
y_train shape: (2378460,)
x_test shape: (594616, 30)
y_test shape: (594616,)
Checking already executed parameters...
classifier__estimator GaussianNB() == classifier__estimator GaussianNB()
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth 1 == classifier__estimator__max_depth 1
classifier__estimator__min_samples_leaf 1 == classifier__estimator__min_samples_leaf 1
classifier__estimator__min_samples_split 1 == classifier__estimator__min_samples_split 1
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth 1 == classifier__estimator__max_depth 1
classifier__estimator__min_samples_leaf 1 == classifier__estimator__min_samples_leaf 1
classifier__estimator__min_samples_split 2 == classifier__estimator__min_samples_split 2
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth 1 == classifier__estimator__max_depth 1
classifier__estimator__min_samples_leaf 1 == classifier__estimator__min_samples_leaf 1
classifier__estimator__min_samples_split 50 == classifier__estimator__min_samples_split 50
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth 1 == classifier__estimator__max_depth 1
classifier__estimator__min_samples_leaf 1 == classifier__estimator__min_samples_leaf 1
classifier__estimator__min_samples_split 100 == classifier__estimator__min_samples_split 100
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth 1 == classifier__estimator__max_depth 1
classifier__estimator__min_samples_leaf 5 == classifier__estimator__min_samples_leaf 5
classifier__estimator__min_samples_split 1 == classifier__estimator__min_samples_split 1
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth 1 == classifier__estimator__max_depth 1
classifier__estimator__min_samples_leaf 5 == classifier__estimator__min_samples_leaf 5
classifier__estimator__min_samples_split 2 == classifier__estimator__min_samples_split 2
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth 1 == classifier__estimator__max_depth 1
classifier__estimator__min_samples_leaf 5 == classifier__estimator__min_samples_leaf 5
classifier__estimator__min_samples_split 50 == classifier__estimator__min_samples_split 50
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth 1 == classifier__estimator__max_depth 1
classifier__estimator__min_samples_leaf 5 == classifier__estimator__min_samples_leaf 5
classifier__estimator__min_samples_split 100 == classifier__estimator__min_samples_split 100
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth 1 == classifier__estimator__max_depth 1
classifier__estimator__min_samples_leaf 10 == classifier__estimator__min_samples_leaf 10
classifier__estimator__min_samples_split 1 == classifier__estimator__min_samples_split 1
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth 1 == classifier__estimator__max_depth 1
classifier__estimator__min_samples_leaf 10 == classifier__estimator__min_samples_leaf 10
classifier__estimator__min_samples_split 2 == classifier__estimator__min_samples_split 2
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth 1 == classifier__estimator__max_depth 1
classifier__estimator__min_samples_leaf 10 == classifier__estimator__min_samples_leaf 10
classifier__estimator__min_samples_split 50 == classifier__estimator__min_samples_split 50
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth 1 == classifier__estimator__max_depth 1
classifier__estimator__min_samples_leaf 10 == classifier__estimator__min_samples_leaf 10
classifier__estimator__min_samples_split 100 == classifier__estimator__min_samples_split 100
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth 4 == classifier__estimator__max_depth 4
classifier__estimator__min_samples_leaf 1 == classifier__estimator__min_samples_leaf 1
classifier__estimator__min_samples_split 1 == classifier__estimator__min_samples_split 1
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth 4 == classifier__estimator__max_depth 4
classifier__estimator__min_samples_leaf 1 == classifier__estimator__min_samples_leaf 1
classifier__estimator__min_samples_split 2 == classifier__estimator__min_samples_split 2
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth 4 == classifier__estimator__max_depth 4
classifier__estimator__min_samples_leaf 1 == classifier__estimator__min_samples_leaf 1
classifier__estimator__min_samples_split 50 == classifier__estimator__min_samples_split 50
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth 4 == classifier__estimator__max_depth 4
classifier__estimator__min_samples_leaf 1 == classifier__estimator__min_samples_leaf 1
classifier__estimator__min_samples_split 100 == classifier__estimator__min_samples_split 100
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth 4 == classifier__estimator__max_depth 4
classifier__estimator__min_samples_leaf 5 == classifier__estimator__min_samples_leaf 5
classifier__estimator__min_samples_split 1 == classifier__estimator__min_samples_split 1
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth 4 == classifier__estimator__max_depth 4
classifier__estimator__min_samples_leaf 5 == classifier__estimator__min_samples_leaf 5
classifier__estimator__min_samples_split 2 == classifier__estimator__min_samples_split 2
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth 4 == classifier__estimator__max_depth 4
classifier__estimator__min_samples_leaf 5 == classifier__estimator__min_samples_leaf 5
classifier__estimator__min_samples_split 50 == classifier__estimator__min_samples_split 50
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth 4 == classifier__estimator__max_depth 4
classifier__estimator__min_samples_leaf 5 == classifier__estimator__min_samples_leaf 5
classifier__estimator__min_samples_split 100 == classifier__estimator__min_samples_split 100
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth 4 == classifier__estimator__max_depth 4
classifier__estimator__min_samples_leaf 10 == classifier__estimator__min_samples_leaf 10
classifier__estimator__min_samples_split 1 == classifier__estimator__min_samples_split 1
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth 4 == classifier__estimator__max_depth 4
classifier__estimator__min_samples_leaf 10 == classifier__estimator__min_samples_leaf 10
classifier__estimator__min_samples_split 2 == classifier__estimator__min_samples_split 2
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth 4 == classifier__estimator__max_depth 4
classifier__estimator__min_samples_leaf 10 == classifier__estimator__min_samples_leaf 10
classifier__estimator__min_samples_split 50 == classifier__estimator__min_samples_split 50
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth 4 == classifier__estimator__max_depth 4
classifier__estimator__min_samples_leaf 10 == classifier__estimator__min_samples_leaf 10
classifier__estimator__min_samples_split 100 == classifier__estimator__min_samples_split 100
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth 7 == classifier__estimator__max_depth 7
classifier__estimator__min_samples_leaf 1 == classifier__estimator__min_samples_leaf 1
classifier__estimator__min_samples_split 1 == classifier__estimator__min_samples_split 1
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth 7 == classifier__estimator__max_depth 7
classifier__estimator__min_samples_leaf 1 == classifier__estimator__min_samples_leaf 1
classifier__estimator__min_samples_split 2 == classifier__estimator__min_samples_split 2
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth 7 == classifier__estimator__max_depth 7
classifier__estimator__min_samples_leaf 1 == classifier__estimator__min_samples_leaf 1
classifier__estimator__min_samples_split 50 == classifier__estimator__min_samples_split 50
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth 7 == classifier__estimator__max_depth 7
classifier__estimator__min_samples_leaf 1 == classifier__estimator__min_samples_leaf 1
classifier__estimator__min_samples_split 100 == classifier__estimator__min_samples_split 100
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth 7 == classifier__estimator__max_depth 7
classifier__estimator__min_samples_leaf 5 == classifier__estimator__min_samples_leaf 5
classifier__estimator__min_samples_split 1 == classifier__estimator__min_samples_split 1
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth 7 == classifier__estimator__max_depth 7
classifier__estimator__min_samples_leaf 5 == classifier__estimator__min_samples_leaf 5
classifier__estimator__min_samples_split 2 == classifier__estimator__min_samples_split 2
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth 7 == classifier__estimator__max_depth 7
classifier__estimator__min_samples_leaf 5 == classifier__estimator__min_samples_leaf 5
classifier__estimator__min_samples_split 50 == classifier__estimator__min_samples_split 50
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth 7 == classifier__estimator__max_depth 7
classifier__estimator__min_samples_leaf 5 == classifier__estimator__min_samples_leaf 5
classifier__estimator__min_samples_split 100 == classifier__estimator__min_samples_split 100
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth 7 == classifier__estimator__max_depth 7
classifier__estimator__min_samples_leaf 10 == classifier__estimator__min_samples_leaf 10
classifier__estimator__min_samples_split 1 == classifier__estimator__min_samples_split 1
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth 7 == classifier__estimator__max_depth 7
classifier__estimator__min_samples_leaf 10 == classifier__estimator__min_samples_leaf 10
classifier__estimator__min_samples_split 2 == classifier__estimator__min_samples_split 2
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth 7 == classifier__estimator__max_depth 7
classifier__estimator__min_samples_leaf 10 == classifier__estimator__min_samples_leaf 10
classifier__estimator__min_samples_split 50 == classifier__estimator__min_samples_split 50
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth 7 == classifier__estimator__max_depth 7
classifier__estimator__min_samples_leaf 10 == classifier__estimator__min_samples_leaf 10
classifier__estimator__min_samples_split 100 == classifier__estimator__min_samples_split 100
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth 10 == classifier__estimator__max_depth 10
classifier__estimator__min_samples_leaf 1 == classifier__estimator__min_samples_leaf 1
classifier__estimator__min_samples_split 1 == classifier__estimator__min_samples_split 1
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth 10 == classifier__estimator__max_depth 10
classifier__estimator__min_samples_leaf 1 == classifier__estimator__min_samples_leaf 1
classifier__estimator__min_samples_split 2 == classifier__estimator__min_samples_split 2
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth 10 == classifier__estimator__max_depth 10
classifier__estimator__min_samples_leaf 1 == classifier__estimator__min_samples_leaf 1
classifier__estimator__min_samples_split 50 == classifier__estimator__min_samples_split 50
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth 10 == classifier__estimator__max_depth 10
classifier__estimator__min_samples_leaf 1 == classifier__estimator__min_samples_leaf 1
classifier__estimator__min_samples_split 100 == classifier__estimator__min_samples_split 100
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth 10 == classifier__estimator__max_depth 10
classifier__estimator__min_samples_leaf 5 == classifier__estimator__min_samples_leaf 5
classifier__estimator__min_samples_split 1 == classifier__estimator__min_samples_split 1
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth 10 == classifier__estimator__max_depth 10
classifier__estimator__min_samples_leaf 5 == classifier__estimator__min_samples_leaf 5
classifier__estimator__min_samples_split 2 == classifier__estimator__min_samples_split 2
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth 10 == classifier__estimator__max_depth 10
classifier__estimator__min_samples_leaf 5 == classifier__estimator__min_samples_leaf 5
classifier__estimator__min_samples_split 50 == classifier__estimator__min_samples_split 50
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth 10 == classifier__estimator__max_depth 10
classifier__estimator__min_samples_leaf 5 == classifier__estimator__min_samples_leaf 5
classifier__estimator__min_samples_split 100 == classifier__estimator__min_samples_split 100
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth 10 == classifier__estimator__max_depth 10
classifier__estimator__min_samples_leaf 10 == classifier__estimator__min_samples_leaf 10
classifier__estimator__min_samples_split 1 == classifier__estimator__min_samples_split 1
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth 10 == classifier__estimator__max_depth 10
classifier__estimator__min_samples_leaf 10 == classifier__estimator__min_samples_leaf 10
classifier__estimator__min_samples_split 2 == classifier__estimator__min_samples_split 2
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth 10 == classifier__estimator__max_depth 10
classifier__estimator__min_samples_leaf 10 == classifier__estimator__min_samples_leaf 10
classifier__estimator__min_samples_split 50 == classifier__estimator__min_samples_split 50
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth 10 == classifier__estimator__max_depth 10
classifier__estimator__min_samples_leaf 10 == classifier__estimator__min_samples_leaf 10
classifier__estimator__min_samples_split 100 == classifier__estimator__min_samples_split 100
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth None == classifier__estimator__max_depth None
classifier__estimator__min_samples_leaf 1 == classifier__estimator__min_samples_leaf 1
classifier__estimator__min_samples_split 1 == classifier__estimator__min_samples_split 1
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth None == classifier__estimator__max_depth None
classifier__estimator__min_samples_leaf 1 == classifier__estimator__min_samples_leaf 1
classifier__estimator__min_samples_split 2 == classifier__estimator__min_samples_split 2
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth None == classifier__estimator__max_depth None
classifier__estimator__min_samples_leaf 1 == classifier__estimator__min_samples_leaf 1
classifier__estimator__min_samples_split 50 == classifier__estimator__min_samples_split 50
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth None == classifier__estimator__max_depth None
classifier__estimator__min_samples_leaf 1 == classifier__estimator__min_samples_leaf 1
classifier__estimator__min_samples_split 100 == classifier__estimator__min_samples_split 100
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth None == classifier__estimator__max_depth None
classifier__estimator__min_samples_leaf 5 == classifier__estimator__min_samples_leaf 5
classifier__estimator__min_samples_split 1 == classifier__estimator__min_samples_split 1
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth None == classifier__estimator__max_depth None
classifier__estimator__min_samples_leaf 5 == classifier__estimator__min_samples_leaf 5
classifier__estimator__min_samples_split 2 == classifier__estimator__min_samples_split 2
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth None == classifier__estimator__max_depth None
classifier__estimator__min_samples_leaf 5 == classifier__estimator__min_samples_leaf 5
classifier__estimator__min_samples_split 50 == classifier__estimator__min_samples_split 50
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth None == classifier__estimator__max_depth None
classifier__estimator__min_samples_leaf 5 == classifier__estimator__min_samples_leaf 5
classifier__estimator__min_samples_split 100 == classifier__estimator__min_samples_split 100
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth None == classifier__estimator__max_depth None
classifier__estimator__min_samples_leaf 10 == classifier__estimator__min_samples_leaf 10
classifier__estimator__min_samples_split 1 == classifier__estimator__min_samples_split 1
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth None == classifier__estimator__max_depth None
classifier__estimator__min_samples_leaf 10 == classifier__estimator__min_samples_leaf 10
classifier__estimator__min_samples_split 2 == classifier__estimator__min_samples_split 2
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth None == classifier__estimator__max_depth None
classifier__estimator__min_samples_leaf 10 == classifier__estimator__min_samples_leaf 10
classifier__estimator__min_samples_split 50 == classifier__estimator__min_samples_split 50
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth None == classifier__estimator__max_depth None
classifier__estimator__min_samples_leaf 10 == classifier__estimator__min_samples_leaf 10
classifier__estimator__min_samples_split 100 == classifier__estimator__min_samples_split 100
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth 1 == classifier__estimator__max_depth 1
classifier__estimator__min_samples_leaf 1 == classifier__estimator__min_samples_leaf 1
classifier__estimator__min_samples_split 1 == classifier__estimator__min_samples_split 1
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth 1 == classifier__estimator__max_depth 1
classifier__estimator__min_samples_leaf 1 == classifier__estimator__min_samples_leaf 1
classifier__estimator__min_samples_split 2 == classifier__estimator__min_samples_split 2
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth 1 == classifier__estimator__max_depth 1
classifier__estimator__min_samples_leaf 1 == classifier__estimator__min_samples_leaf 1
classifier__estimator__min_samples_split 50 == classifier__estimator__min_samples_split 50
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth 1 == classifier__estimator__max_depth 1
classifier__estimator__min_samples_leaf 1 == classifier__estimator__min_samples_leaf 1
classifier__estimator__min_samples_split 100 == classifier__estimator__min_samples_split 100
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth 1 == classifier__estimator__max_depth 1
classifier__estimator__min_samples_leaf 5 == classifier__estimator__min_samples_leaf 5
classifier__estimator__min_samples_split 1 == classifier__estimator__min_samples_split 1
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth 1 == classifier__estimator__max_depth 1
classifier__estimator__min_samples_leaf 5 == classifier__estimator__min_samples_leaf 5
classifier__estimator__min_samples_split 2 == classifier__estimator__min_samples_split 2
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth 1 == classifier__estimator__max_depth 1
classifier__estimator__min_samples_leaf 5 == classifier__estimator__min_samples_leaf 5
classifier__estimator__min_samples_split 50 == classifier__estimator__min_samples_split 50
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth 1 == classifier__estimator__max_depth 1
classifier__estimator__min_samples_leaf 5 == classifier__estimator__min_samples_leaf 5
classifier__estimator__min_samples_split 100 == classifier__estimator__min_samples_split 100
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth 1 == classifier__estimator__max_depth 1
classifier__estimator__min_samples_leaf 10 == classifier__estimator__min_samples_leaf 10
classifier__estimator__min_samples_split 1 == classifier__estimator__min_samples_split 1
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth 1 == classifier__estimator__max_depth 1
classifier__estimator__min_samples_leaf 10 == classifier__estimator__min_samples_leaf 10
classifier__estimator__min_samples_split 2 == classifier__estimator__min_samples_split 2
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth 1 == classifier__estimator__max_depth 1
classifier__estimator__min_samples_leaf 10 == classifier__estimator__min_samples_leaf 10
classifier__estimator__min_samples_split 50 == classifier__estimator__min_samples_split 50
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth 1 == classifier__estimator__max_depth 1
classifier__estimator__min_samples_leaf 10 == classifier__estimator__min_samples_leaf 10
classifier__estimator__min_samples_split 100 == classifier__estimator__min_samples_split 100
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth 4 == classifier__estimator__max_depth 4
classifier__estimator__min_samples_leaf 1 == classifier__estimator__min_samples_leaf 1
classifier__estimator__min_samples_split 1 == classifier__estimator__min_samples_split 1
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth 4 == classifier__estimator__max_depth 4
classifier__estimator__min_samples_leaf 1 == classifier__estimator__min_samples_leaf 1
classifier__estimator__min_samples_split 2 == classifier__estimator__min_samples_split 2
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth 4 == classifier__estimator__max_depth 4
classifier__estimator__min_samples_leaf 1 == classifier__estimator__min_samples_leaf 1
classifier__estimator__min_samples_split 50 == classifier__estimator__min_samples_split 50
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth 4 == classifier__estimator__max_depth 4
classifier__estimator__min_samples_leaf 1 == classifier__estimator__min_samples_leaf 1
classifier__estimator__min_samples_split 100 == classifier__estimator__min_samples_split 100
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth 4 == classifier__estimator__max_depth 4
classifier__estimator__min_samples_leaf 5 == classifier__estimator__min_samples_leaf 5
classifier__estimator__min_samples_split 1 == classifier__estimator__min_samples_split 1
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth 4 == classifier__estimator__max_depth 4
classifier__estimator__min_samples_leaf 5 == classifier__estimator__min_samples_leaf 5
classifier__estimator__min_samples_split 2 == classifier__estimator__min_samples_split 2
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth 4 == classifier__estimator__max_depth 4
classifier__estimator__min_samples_leaf 5 == classifier__estimator__min_samples_leaf 5
classifier__estimator__min_samples_split 50 == classifier__estimator__min_samples_split 50
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth 4 == classifier__estimator__max_depth 4
classifier__estimator__min_samples_leaf 5 == classifier__estimator__min_samples_leaf 5
classifier__estimator__min_samples_split 100 == classifier__estimator__min_samples_split 100
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth 4 == classifier__estimator__max_depth 4
classifier__estimator__min_samples_leaf 10 == classifier__estimator__min_samples_leaf 10
classifier__estimator__min_samples_split 1 == classifier__estimator__min_samples_split 1
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth 4 == classifier__estimator__max_depth 4
classifier__estimator__min_samples_leaf 10 == classifier__estimator__min_samples_leaf 10
classifier__estimator__min_samples_split 2 == classifier__estimator__min_samples_split 2
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth 4 == classifier__estimator__max_depth 4
classifier__estimator__min_samples_leaf 10 == classifier__estimator__min_samples_leaf 10
classifier__estimator__min_samples_split 50 == classifier__estimator__min_samples_split 50
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth 4 == classifier__estimator__max_depth 4
classifier__estimator__min_samples_leaf 10 == classifier__estimator__min_samples_leaf 10
classifier__estimator__min_samples_split 100 == classifier__estimator__min_samples_split 100
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth 7 == classifier__estimator__max_depth 7
classifier__estimator__min_samples_leaf 1 == classifier__estimator__min_samples_leaf 1
classifier__estimator__min_samples_split 1 == classifier__estimator__min_samples_split 1
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth 7 == classifier__estimator__max_depth 7
classifier__estimator__min_samples_leaf 1 == classifier__estimator__min_samples_leaf 1
classifier__estimator__min_samples_split 2 == classifier__estimator__min_samples_split 2
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth 7 == classifier__estimator__max_depth 7
classifier__estimator__min_samples_leaf 1 == classifier__estimator__min_samples_leaf 1
classifier__estimator__min_samples_split 50 == classifier__estimator__min_samples_split 50
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth 7 == classifier__estimator__max_depth 7
classifier__estimator__min_samples_leaf 1 == classifier__estimator__min_samples_leaf 1
classifier__estimator__min_samples_split 100 == classifier__estimator__min_samples_split 100
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth 7 == classifier__estimator__max_depth 7
classifier__estimator__min_samples_leaf 5 == classifier__estimator__min_samples_leaf 5
classifier__estimator__min_samples_split 1 == classifier__estimator__min_samples_split 1
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth 7 == classifier__estimator__max_depth 7
classifier__estimator__min_samples_leaf 5 == classifier__estimator__min_samples_leaf 5
classifier__estimator__min_samples_split 2 == classifier__estimator__min_samples_split 2
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth 7 == classifier__estimator__max_depth 7
classifier__estimator__min_samples_leaf 5 == classifier__estimator__min_samples_leaf 5
classifier__estimator__min_samples_split 50 == classifier__estimator__min_samples_split 50
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth 7 == classifier__estimator__max_depth 7
classifier__estimator__min_samples_leaf 5 == classifier__estimator__min_samples_leaf 5
classifier__estimator__min_samples_split 100 == classifier__estimator__min_samples_split 100
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth 7 == classifier__estimator__max_depth 7
classifier__estimator__min_samples_leaf 10 == classifier__estimator__min_samples_leaf 10
classifier__estimator__min_samples_split 1 == classifier__estimator__min_samples_split 1
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth 7 == classifier__estimator__max_depth 7
classifier__estimator__min_samples_leaf 10 == classifier__estimator__min_samples_leaf 10
classifier__estimator__min_samples_split 2 == classifier__estimator__min_samples_split 2
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth 7 == classifier__estimator__max_depth 7
classifier__estimator__min_samples_leaf 10 == classifier__estimator__min_samples_leaf 10
classifier__estimator__min_samples_split 50 == classifier__estimator__min_samples_split 50
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth 7 == classifier__estimator__max_depth 7
classifier__estimator__min_samples_leaf 10 == classifier__estimator__min_samples_leaf 10
classifier__estimator__min_samples_split 100 == classifier__estimator__min_samples_split 100
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth 10 == classifier__estimator__max_depth 10
classifier__estimator__min_samples_leaf 1 == classifier__estimator__min_samples_leaf 1
classifier__estimator__min_samples_split 1 == classifier__estimator__min_samples_split 1
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth 10 == classifier__estimator__max_depth 10
classifier__estimator__min_samples_leaf 1 == classifier__estimator__min_samples_leaf 1
classifier__estimator__min_samples_split 2 == classifier__estimator__min_samples_split 2
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth 10 == classifier__estimator__max_depth 10
classifier__estimator__min_samples_leaf 1 == classifier__estimator__min_samples_leaf 1
classifier__estimator__min_samples_split 50 == classifier__estimator__min_samples_split 50
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth 10 == classifier__estimator__max_depth 10
classifier__estimator__min_samples_leaf 1 == classifier__estimator__min_samples_leaf 1
classifier__estimator__min_samples_split 100 == classifier__estimator__min_samples_split 100
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth 10 == classifier__estimator__max_depth 10
classifier__estimator__min_samples_leaf 5 == classifier__estimator__min_samples_leaf 5
classifier__estimator__min_samples_split 1 == classifier__estimator__min_samples_split 1
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth 10 == classifier__estimator__max_depth 10
classifier__estimator__min_samples_leaf 5 == classifier__estimator__min_samples_leaf 5
classifier__estimator__min_samples_split 2 == classifier__estimator__min_samples_split 2
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth 10 == classifier__estimator__max_depth 10
classifier__estimator__min_samples_leaf 5 == classifier__estimator__min_samples_leaf 5
classifier__estimator__min_samples_split 50 == classifier__estimator__min_samples_split 50
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth 10 == classifier__estimator__max_depth 10
classifier__estimator__min_samples_leaf 5 == classifier__estimator__min_samples_leaf 5
classifier__estimator__min_samples_split 100 == classifier__estimator__min_samples_split 100
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth 10 == classifier__estimator__max_depth 10
classifier__estimator__min_samples_leaf 10 == classifier__estimator__min_samples_leaf 10
classifier__estimator__min_samples_split 1 == classifier__estimator__min_samples_split 1
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth 10 == classifier__estimator__max_depth 10
classifier__estimator__min_samples_leaf 10 == classifier__estimator__min_samples_leaf 10
classifier__estimator__min_samples_split 2 == classifier__estimator__min_samples_split 2
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth 10 == classifier__estimator__max_depth 10
classifier__estimator__min_samples_leaf 10 == classifier__estimator__min_samples_leaf 10
classifier__estimator__min_samples_split 50 == classifier__estimator__min_samples_split 50
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth 10 == classifier__estimator__max_depth 10
classifier__estimator__min_samples_leaf 10 == classifier__estimator__min_samples_leaf 10
classifier__estimator__min_samples_split 100 == classifier__estimator__min_samples_split 100
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth None == classifier__estimator__max_depth None
classifier__estimator__min_samples_leaf 1 == classifier__estimator__min_samples_leaf 1
classifier__estimator__min_samples_split 1 == classifier__estimator__min_samples_split 1
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth None == classifier__estimator__max_depth None
classifier__estimator__min_samples_leaf 1 == classifier__estimator__min_samples_leaf 1
classifier__estimator__min_samples_split 2 == classifier__estimator__min_samples_split 2
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth None == classifier__estimator__max_depth None
classifier__estimator__min_samples_leaf 1 == classifier__estimator__min_samples_leaf 1
classifier__estimator__min_samples_split 50 == classifier__estimator__min_samples_split 50
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth None == classifier__estimator__max_depth None
classifier__estimator__min_samples_leaf 1 == classifier__estimator__min_samples_leaf 1
classifier__estimator__min_samples_split 100 == classifier__estimator__min_samples_split 100
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth None == classifier__estimator__max_depth None
classifier__estimator__min_samples_leaf 5 == classifier__estimator__min_samples_leaf 5
classifier__estimator__min_samples_split 1 == classifier__estimator__min_samples_split 1
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth None == classifier__estimator__max_depth None
classifier__estimator__min_samples_leaf 5 == classifier__estimator__min_samples_leaf 5
classifier__estimator__min_samples_split 2 == classifier__estimator__min_samples_split 2
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth None == classifier__estimator__max_depth None
classifier__estimator__min_samples_leaf 5 == classifier__estimator__min_samples_leaf 5
classifier__estimator__min_samples_split 50 == classifier__estimator__min_samples_split 50
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth None == classifier__estimator__max_depth None
classifier__estimator__min_samples_leaf 5 == classifier__estimator__min_samples_leaf 5
classifier__estimator__min_samples_split 100 == classifier__estimator__min_samples_split 100
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth None == classifier__estimator__max_depth None
classifier__estimator__min_samples_leaf 10 == classifier__estimator__min_samples_leaf 10
classifier__estimator__min_samples_split 1 == classifier__estimator__min_samples_split 1
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth None == classifier__estimator__max_depth None
classifier__estimator__min_samples_leaf 10 == classifier__estimator__min_samples_leaf 10
classifier__estimator__min_samples_split 2 == classifier__estimator__min_samples_split 2
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth None == classifier__estimator__max_depth None
classifier__estimator__min_samples_leaf 10 == classifier__estimator__min_samples_leaf 10
classifier__estimator__min_samples_split 50 == classifier__estimator__min_samples_split 50
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth None == classifier__estimator__max_depth None
classifier__estimator__min_samples_leaf 10 == classifier__estimator__min_samples_leaf 10
classifier__estimator__min_samples_split 100 == classifier__estimator__min_samples_split 100
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth 1 == classifier__estimator__max_depth 1
classifier__estimator__min_samples_leaf 1 == classifier__estimator__min_samples_leaf 1
classifier__estimator__min_samples_split 1 == classifier__estimator__min_samples_split 1
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth 1 == classifier__estimator__max_depth 1
classifier__estimator__min_samples_leaf 1 == classifier__estimator__min_samples_leaf 1
classifier__estimator__min_samples_split 2 == classifier__estimator__min_samples_split 2
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth 1 == classifier__estimator__max_depth 1
classifier__estimator__min_samples_leaf 1 == classifier__estimator__min_samples_leaf 1
classifier__estimator__min_samples_split 50 == classifier__estimator__min_samples_split 50
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth 1 == classifier__estimator__max_depth 1
classifier__estimator__min_samples_leaf 1 == classifier__estimator__min_samples_leaf 1
classifier__estimator__min_samples_split 100 == classifier__estimator__min_samples_split 100
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth 1 == classifier__estimator__max_depth 1
classifier__estimator__min_samples_leaf 5 == classifier__estimator__min_samples_leaf 5
classifier__estimator__min_samples_split 1 == classifier__estimator__min_samples_split 1
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth 1 == classifier__estimator__max_depth 1
classifier__estimator__min_samples_leaf 5 == classifier__estimator__min_samples_leaf 5
classifier__estimator__min_samples_split 2 == classifier__estimator__min_samples_split 2
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth 1 == classifier__estimator__max_depth 1
classifier__estimator__min_samples_leaf 5 == classifier__estimator__min_samples_leaf 5
classifier__estimator__min_samples_split 50 == classifier__estimator__min_samples_split 50
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth 1 == classifier__estimator__max_depth 1
classifier__estimator__min_samples_leaf 5 == classifier__estimator__min_samples_leaf 5
classifier__estimator__min_samples_split 100 == classifier__estimator__min_samples_split 100
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth 1 == classifier__estimator__max_depth 1
classifier__estimator__min_samples_leaf 10 == classifier__estimator__min_samples_leaf 10
classifier__estimator__min_samples_split 1 == classifier__estimator__min_samples_split 1
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth 1 == classifier__estimator__max_depth 1
classifier__estimator__min_samples_leaf 10 == classifier__estimator__min_samples_leaf 10
classifier__estimator__min_samples_split 2 == classifier__estimator__min_samples_split 2
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth 1 == classifier__estimator__max_depth 1
classifier__estimator__min_samples_leaf 10 == classifier__estimator__min_samples_leaf 10
classifier__estimator__min_samples_split 50 == classifier__estimator__min_samples_split 50
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth 1 == classifier__estimator__max_depth 1
classifier__estimator__min_samples_leaf 10 == classifier__estimator__min_samples_leaf 10
classifier__estimator__min_samples_split 100 == classifier__estimator__min_samples_split 100
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth 4 == classifier__estimator__max_depth 4
classifier__estimator__min_samples_leaf 1 == classifier__estimator__min_samples_leaf 1
classifier__estimator__min_samples_split 1 == classifier__estimator__min_samples_split 1
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth 4 == classifier__estimator__max_depth 4
classifier__estimator__min_samples_leaf 1 == classifier__estimator__min_samples_leaf 1
classifier__estimator__min_samples_split 2 == classifier__estimator__min_samples_split 2
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth 4 == classifier__estimator__max_depth 4
classifier__estimator__min_samples_leaf 1 == classifier__estimator__min_samples_leaf 1
classifier__estimator__min_samples_split 50 == classifier__estimator__min_samples_split 50
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth 4 == classifier__estimator__max_depth 4
classifier__estimator__min_samples_leaf 1 == classifier__estimator__min_samples_leaf 1
classifier__estimator__min_samples_split 100 == classifier__estimator__min_samples_split 100
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth 4 == classifier__estimator__max_depth 4
classifier__estimator__min_samples_leaf 5 == classifier__estimator__min_samples_leaf 5
classifier__estimator__min_samples_split 1 == classifier__estimator__min_samples_split 1
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth 4 == classifier__estimator__max_depth 4
classifier__estimator__min_samples_leaf 5 == classifier__estimator__min_samples_leaf 5
classifier__estimator__min_samples_split 2 == classifier__estimator__min_samples_split 2
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth 4 == classifier__estimator__max_depth 4
classifier__estimator__min_samples_leaf 5 == classifier__estimator__min_samples_leaf 5
classifier__estimator__min_samples_split 50 == classifier__estimator__min_samples_split 50
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth 4 == classifier__estimator__max_depth 4
classifier__estimator__min_samples_leaf 5 == classifier__estimator__min_samples_leaf 5
classifier__estimator__min_samples_split 100 == classifier__estimator__min_samples_split 100
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth 4 == classifier__estimator__max_depth 4
classifier__estimator__min_samples_leaf 10 == classifier__estimator__min_samples_leaf 10
classifier__estimator__min_samples_split 1 == classifier__estimator__min_samples_split 1
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth 4 == classifier__estimator__max_depth 4
classifier__estimator__min_samples_leaf 10 == classifier__estimator__min_samples_leaf 10
classifier__estimator__min_samples_split 2 == classifier__estimator__min_samples_split 2
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth 4 == classifier__estimator__max_depth 4
classifier__estimator__min_samples_leaf 10 == classifier__estimator__min_samples_leaf 10
classifier__estimator__min_samples_split 50 == classifier__estimator__min_samples_split 50
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth 4 == classifier__estimator__max_depth 4
classifier__estimator__min_samples_leaf 10 == classifier__estimator__min_samples_leaf 10
classifier__estimator__min_samples_split 100 == classifier__estimator__min_samples_split 100
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth 7 == classifier__estimator__max_depth 7
classifier__estimator__min_samples_leaf 1 == classifier__estimator__min_samples_leaf 1
classifier__estimator__min_samples_split 1 == classifier__estimator__min_samples_split 1
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth 7 == classifier__estimator__max_depth 7
classifier__estimator__min_samples_leaf 1 == classifier__estimator__min_samples_leaf 1
classifier__estimator__min_samples_split 2 == classifier__estimator__min_samples_split 2
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth 7 == classifier__estimator__max_depth 7
classifier__estimator__min_samples_leaf 1 == classifier__estimator__min_samples_leaf 1
classifier__estimator__min_samples_split 50 == classifier__estimator__min_samples_split 50
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth 7 == classifier__estimator__max_depth 7
classifier__estimator__min_samples_leaf 1 == classifier__estimator__min_samples_leaf 1
classifier__estimator__min_samples_split 100 == classifier__estimator__min_samples_split 100
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth 7 == classifier__estimator__max_depth 7
classifier__estimator__min_samples_leaf 5 == classifier__estimator__min_samples_leaf 5
classifier__estimator__min_samples_split 1 == classifier__estimator__min_samples_split 1
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth 7 == classifier__estimator__max_depth 7
classifier__estimator__min_samples_leaf 5 == classifier__estimator__min_samples_leaf 5
classifier__estimator__min_samples_split 2 == classifier__estimator__min_samples_split 2
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth 7 == classifier__estimator__max_depth 7
classifier__estimator__min_samples_leaf 5 == classifier__estimator__min_samples_leaf 5
classifier__estimator__min_samples_split 50 == classifier__estimator__min_samples_split 50
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth 7 == classifier__estimator__max_depth 7
classifier__estimator__min_samples_leaf 5 == classifier__estimator__min_samples_leaf 5
classifier__estimator__min_samples_split 100 == classifier__estimator__min_samples_split 100
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth 7 == classifier__estimator__max_depth 7
classifier__estimator__min_samples_leaf 10 == classifier__estimator__min_samples_leaf 10
classifier__estimator__min_samples_split 1 == classifier__estimator__min_samples_split 1
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth 7 == classifier__estimator__max_depth 7
classifier__estimator__min_samples_leaf 10 == classifier__estimator__min_samples_leaf 10
classifier__estimator__min_samples_split 2 == classifier__estimator__min_samples_split 2
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth 7 == classifier__estimator__max_depth 7
classifier__estimator__min_samples_leaf 10 == classifier__estimator__min_samples_leaf 10
classifier__estimator__min_samples_split 50 == classifier__estimator__min_samples_split 50
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth 7 == classifier__estimator__max_depth 7
classifier__estimator__min_samples_leaf 10 == classifier__estimator__min_samples_leaf 10
classifier__estimator__min_samples_split 100 == classifier__estimator__min_samples_split 100
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth 10 == classifier__estimator__max_depth 10
classifier__estimator__min_samples_leaf 1 == classifier__estimator__min_samples_leaf 1
classifier__estimator__min_samples_split 1 == classifier__estimator__min_samples_split 1
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth 10 == classifier__estimator__max_depth 10
classifier__estimator__min_samples_leaf 1 == classifier__estimator__min_samples_leaf 1
classifier__estimator__min_samples_split 2 == classifier__estimator__min_samples_split 2
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth 10 == classifier__estimator__max_depth 10
classifier__estimator__min_samples_leaf 1 == classifier__estimator__min_samples_leaf 1
classifier__estimator__min_samples_split 50 == classifier__estimator__min_samples_split 50
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth 10 == classifier__estimator__max_depth 10
classifier__estimator__min_samples_leaf 1 == classifier__estimator__min_samples_leaf 1
classifier__estimator__min_samples_split 100 == classifier__estimator__min_samples_split 100
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth 10 == classifier__estimator__max_depth 10
classifier__estimator__min_samples_leaf 5 == classifier__estimator__min_samples_leaf 5
classifier__estimator__min_samples_split 1 == classifier__estimator__min_samples_split 1
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth 10 == classifier__estimator__max_depth 10
classifier__estimator__min_samples_leaf 5 == classifier__estimator__min_samples_leaf 5
classifier__estimator__min_samples_split 2 == classifier__estimator__min_samples_split 2
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth 10 == classifier__estimator__max_depth 10
classifier__estimator__min_samples_leaf 5 == classifier__estimator__min_samples_leaf 5
classifier__estimator__min_samples_split 50 == classifier__estimator__min_samples_split 50
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth 10 == classifier__estimator__max_depth 10
classifier__estimator__min_samples_leaf 5 == classifier__estimator__min_samples_leaf 5
classifier__estimator__min_samples_split 100 == classifier__estimator__min_samples_split 100
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth 10 == classifier__estimator__max_depth 10
classifier__estimator__min_samples_leaf 10 == classifier__estimator__min_samples_leaf 10
classifier__estimator__min_samples_split 1 == classifier__estimator__min_samples_split 1
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth 10 == classifier__estimator__max_depth 10
classifier__estimator__min_samples_leaf 10 == classifier__estimator__min_samples_leaf 10
classifier__estimator__min_samples_split 2 == classifier__estimator__min_samples_split 2
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth 10 == classifier__estimator__max_depth 10
classifier__estimator__min_samples_leaf 10 == classifier__estimator__min_samples_leaf 10
classifier__estimator__min_samples_split 50 == classifier__estimator__min_samples_split 50
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth 10 == classifier__estimator__max_depth 10
classifier__estimator__min_samples_leaf 10 == classifier__estimator__min_samples_leaf 10
classifier__estimator__min_samples_split 100 == classifier__estimator__min_samples_split 100
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth None == classifier__estimator__max_depth None
classifier__estimator__min_samples_leaf 1 == classifier__estimator__min_samples_leaf 1
classifier__estimator__min_samples_split 1 == classifier__estimator__min_samples_split 1
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth None == classifier__estimator__max_depth None
classifier__estimator__min_samples_leaf 1 == classifier__estimator__min_samples_leaf 1
classifier__estimator__min_samples_split 2 == classifier__estimator__min_samples_split 2
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth None == classifier__estimator__max_depth None
classifier__estimator__min_samples_leaf 1 == classifier__estimator__min_samples_leaf 1
classifier__estimator__min_samples_split 50 == classifier__estimator__min_samples_split 50
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth None == classifier__estimator__max_depth None
classifier__estimator__min_samples_leaf 1 == classifier__estimator__min_samples_leaf 1
classifier__estimator__min_samples_split 100 == classifier__estimator__min_samples_split 100
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth None == classifier__estimator__max_depth None
classifier__estimator__min_samples_leaf 5 == classifier__estimator__min_samples_leaf 5
classifier__estimator__min_samples_split 1 == classifier__estimator__min_samples_split 1
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth None == classifier__estimator__max_depth None
classifier__estimator__min_samples_leaf 5 == classifier__estimator__min_samples_leaf 5
classifier__estimator__min_samples_split 2 == classifier__estimator__min_samples_split 2
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth None == classifier__estimator__max_depth None
classifier__estimator__min_samples_leaf 5 == classifier__estimator__min_samples_leaf 5
classifier__estimator__min_samples_split 50 == classifier__estimator__min_samples_split 50
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth None == classifier__estimator__max_depth None
classifier__estimator__min_samples_leaf 5 == classifier__estimator__min_samples_leaf 5
classifier__estimator__min_samples_split 100 == classifier__estimator__min_samples_split 100
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth None == classifier__estimator__max_depth None
classifier__estimator__min_samples_leaf 10 == classifier__estimator__min_samples_leaf 10
classifier__estimator__min_samples_split 1 == classifier__estimator__min_samples_split 1
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth None == classifier__estimator__max_depth None
classifier__estimator__min_samples_leaf 10 == classifier__estimator__min_samples_leaf 10
classifier__estimator__min_samples_split 2 == classifier__estimator__min_samples_split 2
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth None == classifier__estimator__max_depth None
classifier__estimator__min_samples_leaf 10 == classifier__estimator__min_samples_leaf 10
classifier__estimator__min_samples_split 50 == classifier__estimator__min_samples_split 50
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion gini == classifier__estimator__criterion gini
classifier__estimator__max_depth None == classifier__estimator__max_depth None
classifier__estimator__min_samples_leaf 10 == classifier__estimator__min_samples_leaf 10
classifier__estimator__min_samples_split 100 == classifier__estimator__min_samples_split 100
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth 1 == classifier__estimator__max_depth 1
classifier__estimator__min_samples_leaf 1 == classifier__estimator__min_samples_leaf 1
classifier__estimator__min_samples_split 1 == classifier__estimator__min_samples_split 1
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth 1 == classifier__estimator__max_depth 1
classifier__estimator__min_samples_leaf 1 == classifier__estimator__min_samples_leaf 1
classifier__estimator__min_samples_split 2 == classifier__estimator__min_samples_split 2
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth 1 == classifier__estimator__max_depth 1
classifier__estimator__min_samples_leaf 1 == classifier__estimator__min_samples_leaf 1
classifier__estimator__min_samples_split 50 == classifier__estimator__min_samples_split 50
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth 1 == classifier__estimator__max_depth 1
classifier__estimator__min_samples_leaf 1 == classifier__estimator__min_samples_leaf 1
classifier__estimator__min_samples_split 100 == classifier__estimator__min_samples_split 100
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth 1 == classifier__estimator__max_depth 1
classifier__estimator__min_samples_leaf 5 == classifier__estimator__min_samples_leaf 5
classifier__estimator__min_samples_split 1 == classifier__estimator__min_samples_split 1
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth 1 == classifier__estimator__max_depth 1
classifier__estimator__min_samples_leaf 5 == classifier__estimator__min_samples_leaf 5
classifier__estimator__min_samples_split 2 == classifier__estimator__min_samples_split 2
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth 1 == classifier__estimator__max_depth 1
classifier__estimator__min_samples_leaf 5 == classifier__estimator__min_samples_leaf 5
classifier__estimator__min_samples_split 50 == classifier__estimator__min_samples_split 50
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth 1 == classifier__estimator__max_depth 1
classifier__estimator__min_samples_leaf 5 == classifier__estimator__min_samples_leaf 5
classifier__estimator__min_samples_split 100 == classifier__estimator__min_samples_split 100
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth 1 == classifier__estimator__max_depth 1
classifier__estimator__min_samples_leaf 10 == classifier__estimator__min_samples_leaf 10
classifier__estimator__min_samples_split 1 == classifier__estimator__min_samples_split 1
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth 1 == classifier__estimator__max_depth 1
classifier__estimator__min_samples_leaf 10 == classifier__estimator__min_samples_leaf 10
classifier__estimator__min_samples_split 2 == classifier__estimator__min_samples_split 2
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth 1 == classifier__estimator__max_depth 1
classifier__estimator__min_samples_leaf 10 == classifier__estimator__min_samples_leaf 10
classifier__estimator__min_samples_split 50 == classifier__estimator__min_samples_split 50
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth 1 == classifier__estimator__max_depth 1
classifier__estimator__min_samples_leaf 10 == classifier__estimator__min_samples_leaf 10
classifier__estimator__min_samples_split 100 == classifier__estimator__min_samples_split 100
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth 4 == classifier__estimator__max_depth 4
classifier__estimator__min_samples_leaf 1 == classifier__estimator__min_samples_leaf 1
classifier__estimator__min_samples_split 1 == classifier__estimator__min_samples_split 1
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth 4 == classifier__estimator__max_depth 4
classifier__estimator__min_samples_leaf 1 == classifier__estimator__min_samples_leaf 1
classifier__estimator__min_samples_split 2 == classifier__estimator__min_samples_split 2
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth 4 == classifier__estimator__max_depth 4
classifier__estimator__min_samples_leaf 1 == classifier__estimator__min_samples_leaf 1
classifier__estimator__min_samples_split 50 == classifier__estimator__min_samples_split 50
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth 4 == classifier__estimator__max_depth 4
classifier__estimator__min_samples_leaf 1 == classifier__estimator__min_samples_leaf 1
classifier__estimator__min_samples_split 100 == classifier__estimator__min_samples_split 100
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth 4 == classifier__estimator__max_depth 4
classifier__estimator__min_samples_leaf 5 == classifier__estimator__min_samples_leaf 5
classifier__estimator__min_samples_split 1 == classifier__estimator__min_samples_split 1
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth 4 == classifier__estimator__max_depth 4
classifier__estimator__min_samples_leaf 5 == classifier__estimator__min_samples_leaf 5
classifier__estimator__min_samples_split 2 == classifier__estimator__min_samples_split 2
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth 4 == classifier__estimator__max_depth 4
classifier__estimator__min_samples_leaf 5 == classifier__estimator__min_samples_leaf 5
classifier__estimator__min_samples_split 50 == classifier__estimator__min_samples_split 50
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth 4 == classifier__estimator__max_depth 4
classifier__estimator__min_samples_leaf 5 == classifier__estimator__min_samples_leaf 5
classifier__estimator__min_samples_split 100 == classifier__estimator__min_samples_split 100
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth 4 == classifier__estimator__max_depth 4
classifier__estimator__min_samples_leaf 10 == classifier__estimator__min_samples_leaf 10
classifier__estimator__min_samples_split 1 == classifier__estimator__min_samples_split 1
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth 4 == classifier__estimator__max_depth 4
classifier__estimator__min_samples_leaf 10 == classifier__estimator__min_samples_leaf 10
classifier__estimator__min_samples_split 2 == classifier__estimator__min_samples_split 2
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth 4 == classifier__estimator__max_depth 4
classifier__estimator__min_samples_leaf 10 == classifier__estimator__min_samples_leaf 10
classifier__estimator__min_samples_split 50 == classifier__estimator__min_samples_split 50
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth 4 == classifier__estimator__max_depth 4
classifier__estimator__min_samples_leaf 10 == classifier__estimator__min_samples_leaf 10
classifier__estimator__min_samples_split 100 == classifier__estimator__min_samples_split 100
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth 7 == classifier__estimator__max_depth 7
classifier__estimator__min_samples_leaf 1 == classifier__estimator__min_samples_leaf 1
classifier__estimator__min_samples_split 1 == classifier__estimator__min_samples_split 1
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth 7 == classifier__estimator__max_depth 7
classifier__estimator__min_samples_leaf 1 == classifier__estimator__min_samples_leaf 1
classifier__estimator__min_samples_split 2 == classifier__estimator__min_samples_split 2
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth 7 == classifier__estimator__max_depth 7
classifier__estimator__min_samples_leaf 1 == classifier__estimator__min_samples_leaf 1
classifier__estimator__min_samples_split 50 == classifier__estimator__min_samples_split 50
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth 7 == classifier__estimator__max_depth 7
classifier__estimator__min_samples_leaf 1 == classifier__estimator__min_samples_leaf 1
classifier__estimator__min_samples_split 100 == classifier__estimator__min_samples_split 100
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth 7 == classifier__estimator__max_depth 7
classifier__estimator__min_samples_leaf 5 == classifier__estimator__min_samples_leaf 5
classifier__estimator__min_samples_split 1 == classifier__estimator__min_samples_split 1
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth 7 == classifier__estimator__max_depth 7
classifier__estimator__min_samples_leaf 5 == classifier__estimator__min_samples_leaf 5
classifier__estimator__min_samples_split 2 == classifier__estimator__min_samples_split 2
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth 7 == classifier__estimator__max_depth 7
classifier__estimator__min_samples_leaf 5 == classifier__estimator__min_samples_leaf 5
classifier__estimator__min_samples_split 50 == classifier__estimator__min_samples_split 50
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth 7 == classifier__estimator__max_depth 7
classifier__estimator__min_samples_leaf 5 == classifier__estimator__min_samples_leaf 5
classifier__estimator__min_samples_split 100 == classifier__estimator__min_samples_split 100
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth 7 == classifier__estimator__max_depth 7
classifier__estimator__min_samples_leaf 10 == classifier__estimator__min_samples_leaf 10
classifier__estimator__min_samples_split 1 == classifier__estimator__min_samples_split 1
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth 7 == classifier__estimator__max_depth 7
classifier__estimator__min_samples_leaf 10 == classifier__estimator__min_samples_leaf 10
classifier__estimator__min_samples_split 2 == classifier__estimator__min_samples_split 2
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth 7 == classifier__estimator__max_depth 7
classifier__estimator__min_samples_leaf 10 == classifier__estimator__min_samples_leaf 10
classifier__estimator__min_samples_split 50 == classifier__estimator__min_samples_split 50
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth 7 == classifier__estimator__max_depth 7
classifier__estimator__min_samples_leaf 10 == classifier__estimator__min_samples_leaf 10
classifier__estimator__min_samples_split 100 == classifier__estimator__min_samples_split 100
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth 10 == classifier__estimator__max_depth 10
classifier__estimator__min_samples_leaf 1 == classifier__estimator__min_samples_leaf 1
classifier__estimator__min_samples_split 1 == classifier__estimator__min_samples_split 1
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth 10 == classifier__estimator__max_depth 10
classifier__estimator__min_samples_leaf 1 == classifier__estimator__min_samples_leaf 1
classifier__estimator__min_samples_split 2 == classifier__estimator__min_samples_split 2
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth 10 == classifier__estimator__max_depth 10
classifier__estimator__min_samples_leaf 1 == classifier__estimator__min_samples_leaf 1
classifier__estimator__min_samples_split 50 == classifier__estimator__min_samples_split 50
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth 10 == classifier__estimator__max_depth 10
classifier__estimator__min_samples_leaf 1 == classifier__estimator__min_samples_leaf 1
classifier__estimator__min_samples_split 100 == classifier__estimator__min_samples_split 100
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth 10 == classifier__estimator__max_depth 10
classifier__estimator__min_samples_leaf 5 == classifier__estimator__min_samples_leaf 5
classifier__estimator__min_samples_split 1 == classifier__estimator__min_samples_split 1
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth 10 == classifier__estimator__max_depth 10
classifier__estimator__min_samples_leaf 5 == classifier__estimator__min_samples_leaf 5
classifier__estimator__min_samples_split 2 == classifier__estimator__min_samples_split 2
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth 10 == classifier__estimator__max_depth 10
classifier__estimator__min_samples_leaf 5 == classifier__estimator__min_samples_leaf 5
classifier__estimator__min_samples_split 50 == classifier__estimator__min_samples_split 50
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth 10 == classifier__estimator__max_depth 10
classifier__estimator__min_samples_leaf 5 == classifier__estimator__min_samples_leaf 5
classifier__estimator__min_samples_split 100 == classifier__estimator__min_samples_split 100
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth 10 == classifier__estimator__max_depth 10
classifier__estimator__min_samples_leaf 10 == classifier__estimator__min_samples_leaf 10
classifier__estimator__min_samples_split 1 == classifier__estimator__min_samples_split 1
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth 10 == classifier__estimator__max_depth 10
classifier__estimator__min_samples_leaf 10 == classifier__estimator__min_samples_leaf 10
classifier__estimator__min_samples_split 2 == classifier__estimator__min_samples_split 2
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth 10 == classifier__estimator__max_depth 10
classifier__estimator__min_samples_leaf 10 == classifier__estimator__min_samples_leaf 10
classifier__estimator__min_samples_split 50 == classifier__estimator__min_samples_split 50
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth 10 == classifier__estimator__max_depth 10
classifier__estimator__min_samples_leaf 10 == classifier__estimator__min_samples_leaf 10
classifier__estimator__min_samples_split 100 == classifier__estimator__min_samples_split 100
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth None == classifier__estimator__max_depth None
classifier__estimator__min_samples_leaf 1 == classifier__estimator__min_samples_leaf 1
classifier__estimator__min_samples_split 1 == classifier__estimator__min_samples_split 1
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth None == classifier__estimator__max_depth None
classifier__estimator__min_samples_leaf 1 == classifier__estimator__min_samples_leaf 1
classifier__estimator__min_samples_split 2 == classifier__estimator__min_samples_split 2
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth None == classifier__estimator__max_depth None
classifier__estimator__min_samples_leaf 1 == classifier__estimator__min_samples_leaf 1
classifier__estimator__min_samples_split 50 == classifier__estimator__min_samples_split 50
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth None == classifier__estimator__max_depth None
classifier__estimator__min_samples_leaf 1 == classifier__estimator__min_samples_leaf 1
classifier__estimator__min_samples_split 100 == classifier__estimator__min_samples_split 100
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth None == classifier__estimator__max_depth None
classifier__estimator__min_samples_leaf 5 == classifier__estimator__min_samples_leaf 5
classifier__estimator__min_samples_split 1 == classifier__estimator__min_samples_split 1
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth None == classifier__estimator__max_depth None
classifier__estimator__min_samples_leaf 5 == classifier__estimator__min_samples_leaf 5
classifier__estimator__min_samples_split 2 == classifier__estimator__min_samples_split 2
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth None == classifier__estimator__max_depth None
classifier__estimator__min_samples_leaf 5 == classifier__estimator__min_samples_leaf 5
classifier__estimator__min_samples_split 50 == classifier__estimator__min_samples_split 50
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth None == classifier__estimator__max_depth None
classifier__estimator__min_samples_leaf 5 == classifier__estimator__min_samples_leaf 5
classifier__estimator__min_samples_split 100 == classifier__estimator__min_samples_split 100
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth None == classifier__estimator__max_depth None
classifier__estimator__min_samples_leaf 10 == classifier__estimator__min_samples_leaf 10
classifier__estimator__min_samples_split 1 == classifier__estimator__min_samples_split 1
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth None == classifier__estimator__max_depth None
classifier__estimator__min_samples_leaf 10 == classifier__estimator__min_samples_leaf 10
classifier__estimator__min_samples_split 2 == classifier__estimator__min_samples_split 2
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth None == classifier__estimator__max_depth None
classifier__estimator__min_samples_leaf 10 == classifier__estimator__min_samples_leaf 10
classifier__estimator__min_samples_split 50 == classifier__estimator__min_samples_split 50
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator DecisionTreeClassifier() == classifier__estimator DecisionTreeClassifier()
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__criterion entropy == classifier__estimator__criterion entropy
classifier__estimator__max_depth None == classifier__estimator__max_depth None
classifier__estimator__min_samples_leaf 10 == classifier__estimator__min_samples_leaf 10
classifier__estimator__min_samples_split 100 == classifier__estimator__min_samples_split 100
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
classifier__estimator__splitter best == classifier__estimator__splitter best
------------------------------------------------------------------
classifier__estimator LinearSVC() == classifier__estimator LinearSVC()
classifier__estimator__C 0.0010004043579101562 == classifier__estimator__C 0.0010004043579101562
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__dual False == classifier__estimator__dual False
classifier__estimator__max_iter 100 == classifier__estimator__max_iter 100
classifier__estimator__penalty l1 == classifier__estimator__penalty l1
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
------------------------------------------------------------------
classifier__estimator LinearSVC() == classifier__estimator LinearSVC()
classifier__estimator__C 0.0010004043579101562 == classifier__estimator__C 0.0010004043579101562
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__dual False == classifier__estimator__dual False
classifier__estimator__max_iter 100 == classifier__estimator__max_iter 100
classifier__estimator__penalty l2 == classifier__estimator__penalty l2
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
------------------------------------------------------------------
classifier__estimator LinearSVC() == classifier__estimator LinearSVC()
classifier__estimator__C 0.0010004043579101562 == classifier__estimator__C 0.0010004043579101562
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__dual False == classifier__estimator__dual False
classifier__estimator__max_iter 1000 == classifier__estimator__max_iter 1000
classifier__estimator__penalty l1 == classifier__estimator__penalty l1
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
------------------------------------------------------------------
classifier__estimator LinearSVC() == classifier__estimator LinearSVC()
classifier__estimator__C 0.0010004043579101562 == classifier__estimator__C 0.0010004043579101562
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__dual False == classifier__estimator__dual False
classifier__estimator__max_iter 1000 == classifier__estimator__max_iter 1000
classifier__estimator__penalty l2 == classifier__estimator__penalty l2
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
------------------------------------------------------------------
classifier__estimator LinearSVC() == classifier__estimator LinearSVC()
classifier__estimator__C 0.0010004043579101562 == classifier__estimator__C 0.0010004043579101562
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__dual False == classifier__estimator__dual False
classifier__estimator__max_iter 10000 == classifier__estimator__max_iter 10000
classifier__estimator__penalty l1 == classifier__estimator__penalty l1
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
------------------------------------------------------------------
classifier__estimator LinearSVC() == classifier__estimator LinearSVC()
classifier__estimator__C 0.0010004043579101562 == classifier__estimator__C 0.0010004043579101562
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__dual False == classifier__estimator__dual False
classifier__estimator__max_iter 10000 == classifier__estimator__max_iter 10000
classifier__estimator__penalty l2 == classifier__estimator__penalty l2
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
------------------------------------------------------------------
classifier__estimator LinearSVC() == classifier__estimator LinearSVC()
classifier__estimator__C 0.0010004043579101562 == classifier__estimator__C 0.0010004043579101562
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__dual False == classifier__estimator__dual False
classifier__estimator__max_iter 100 == classifier__estimator__max_iter 100
classifier__estimator__penalty l1 == classifier__estimator__penalty l1
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
------------------------------------------------------------------
classifier__estimator LinearSVC() == classifier__estimator LinearSVC()
classifier__estimator__C 0.0010004043579101562 == classifier__estimator__C 0.0010004043579101562
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__dual False == classifier__estimator__dual False
classifier__estimator__max_iter 100 == classifier__estimator__max_iter 100
classifier__estimator__penalty l2 == classifier__estimator__penalty l2
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
------------------------------------------------------------------
classifier__estimator LinearSVC() == classifier__estimator LinearSVC()
classifier__estimator__C 0.0010004043579101562 == classifier__estimator__C 0.0010004043579101562
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__dual False == classifier__estimator__dual False
classifier__estimator__max_iter 1000 == classifier__estimator__max_iter 1000
classifier__estimator__penalty l1 == classifier__estimator__penalty l1
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
------------------------------------------------------------------
classifier__estimator LinearSVC() == classifier__estimator LinearSVC()
classifier__estimator__C 0.0010004043579101562 == classifier__estimator__C 0.0010004043579101562
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__dual False == classifier__estimator__dual False
classifier__estimator__max_iter 1000 == classifier__estimator__max_iter 1000
classifier__estimator__penalty l2 == classifier__estimator__penalty l2
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
------------------------------------------------------------------
classifier__estimator LinearSVC() == classifier__estimator LinearSVC()
classifier__estimator__C 0.0010004043579101562 == classifier__estimator__C 0.0010004043579101562
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__dual False == classifier__estimator__dual False
classifier__estimator__max_iter 10000 == classifier__estimator__max_iter 10000
classifier__estimator__penalty l1 == classifier__estimator__penalty l1
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
------------------------------------------------------------------
classifier__estimator LinearSVC() == classifier__estimator LinearSVC()
classifier__estimator__C 0.0010004043579101562 == classifier__estimator__C 0.0010004043579101562
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__dual False == classifier__estimator__dual False
classifier__estimator__max_iter 10000 == classifier__estimator__max_iter 10000
classifier__estimator__penalty l2 == classifier__estimator__penalty l2
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
------------------------------------------------------------------
classifier__estimator LinearSVC() == classifier__estimator LinearSVC()
classifier__estimator__C 0.01000213623046875 == classifier__estimator__C 0.01000213623046875
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__dual False == classifier__estimator__dual False
classifier__estimator__max_iter 100 == classifier__estimator__max_iter 100
classifier__estimator__penalty l1 == classifier__estimator__penalty l1
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
------------------------------------------------------------------
classifier__estimator LinearSVC() == classifier__estimator LinearSVC()
classifier__estimator__C 0.01000213623046875 == classifier__estimator__C 0.01000213623046875
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__dual False == classifier__estimator__dual False
classifier__estimator__max_iter 100 == classifier__estimator__max_iter 100
classifier__estimator__penalty l2 == classifier__estimator__penalty l2
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
------------------------------------------------------------------
classifier__estimator LinearSVC() == classifier__estimator LinearSVC()
classifier__estimator__C 0.01000213623046875 == classifier__estimator__C 0.01000213623046875
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__dual False == classifier__estimator__dual False
classifier__estimator__max_iter 1000 == classifier__estimator__max_iter 1000
classifier__estimator__penalty l1 == classifier__estimator__penalty l1
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
------------------------------------------------------------------
classifier__estimator LinearSVC() == classifier__estimator LinearSVC()
classifier__estimator__C 0.01000213623046875 == classifier__estimator__C 0.01000213623046875
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__dual False == classifier__estimator__dual False
classifier__estimator__max_iter 1000 == classifier__estimator__max_iter 1000
classifier__estimator__penalty l2 == classifier__estimator__penalty l2
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
------------------------------------------------------------------
classifier__estimator LinearSVC() == classifier__estimator LinearSVC()
classifier__estimator__C 0.01000213623046875 == classifier__estimator__C 0.01000213623046875
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__dual False == classifier__estimator__dual False
classifier__estimator__max_iter 10000 == classifier__estimator__max_iter 10000
classifier__estimator__penalty l1 == classifier__estimator__penalty l1
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
------------------------------------------------------------------
classifier__estimator LinearSVC() == classifier__estimator LinearSVC()
classifier__estimator__C 0.01000213623046875 == classifier__estimator__C 0.01000213623046875
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__dual False == classifier__estimator__dual False
classifier__estimator__max_iter 10000 == classifier__estimator__max_iter 10000
classifier__estimator__penalty l2 == classifier__estimator__penalty l2
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
------------------------------------------------------------------
classifier__estimator LinearSVC() == classifier__estimator LinearSVC()
classifier__estimator__C 0.01000213623046875 == classifier__estimator__C 0.01000213623046875
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__dual False == classifier__estimator__dual False
classifier__estimator__max_iter 100 == classifier__estimator__max_iter 100
classifier__estimator__penalty l1 == classifier__estimator__penalty l1
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
------------------------------------------------------------------
classifier__estimator LinearSVC() == classifier__estimator LinearSVC()
classifier__estimator__C 0.01000213623046875 == classifier__estimator__C 0.01000213623046875
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__dual False == classifier__estimator__dual False
classifier__estimator__max_iter 100 == classifier__estimator__max_iter 100
classifier__estimator__penalty l2 == classifier__estimator__penalty l2
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
------------------------------------------------------------------
classifier__estimator LinearSVC() == classifier__estimator LinearSVC()
classifier__estimator__C 0.01000213623046875 == classifier__estimator__C 0.01000213623046875
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__dual False == classifier__estimator__dual False
classifier__estimator__max_iter 1000 == classifier__estimator__max_iter 1000
classifier__estimator__penalty l1 == classifier__estimator__penalty l1
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
------------------------------------------------------------------
classifier__estimator LinearSVC() == classifier__estimator LinearSVC()
classifier__estimator__C 0.01000213623046875 == classifier__estimator__C 0.01000213623046875
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__dual False == classifier__estimator__dual False
classifier__estimator__max_iter 1000 == classifier__estimator__max_iter 1000
classifier__estimator__penalty l2 == classifier__estimator__penalty l2
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
------------------------------------------------------------------
classifier__estimator LinearSVC() == classifier__estimator LinearSVC()
classifier__estimator__C 0.01000213623046875 == classifier__estimator__C 0.01000213623046875
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__dual False == classifier__estimator__dual False
classifier__estimator__max_iter 10000 == classifier__estimator__max_iter 10000
classifier__estimator__penalty l1 == classifier__estimator__penalty l1
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
------------------------------------------------------------------
classifier__estimator LinearSVC() == classifier__estimator LinearSVC()
classifier__estimator__C 0.01000213623046875 == classifier__estimator__C 0.01000213623046875
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__dual False == classifier__estimator__dual False
classifier__estimator__max_iter 10000 == classifier__estimator__max_iter 10000
classifier__estimator__penalty l2 == classifier__estimator__penalty l2
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
------------------------------------------------------------------
classifier__estimator LinearSVC() == classifier__estimator LinearSVC()
classifier__estimator__C 0.0999755859375 == classifier__estimator__C 0.0999755859375
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__dual False == classifier__estimator__dual False
classifier__estimator__max_iter 100 == classifier__estimator__max_iter 100
classifier__estimator__penalty l1 == classifier__estimator__penalty l1
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
------------------------------------------------------------------
classifier__estimator LinearSVC() == classifier__estimator LinearSVC()
classifier__estimator__C 0.0999755859375 == classifier__estimator__C 0.0999755859375
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__dual False == classifier__estimator__dual False
classifier__estimator__max_iter 100 == classifier__estimator__max_iter 100
classifier__estimator__penalty l2 == classifier__estimator__penalty l2
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
------------------------------------------------------------------
classifier__estimator LinearSVC() == classifier__estimator LinearSVC()
classifier__estimator__C 0.0999755859375 == classifier__estimator__C 0.0999755859375
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__dual False == classifier__estimator__dual False
classifier__estimator__max_iter 1000 == classifier__estimator__max_iter 1000
classifier__estimator__penalty l1 == classifier__estimator__penalty l1
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
------------------------------------------------------------------
classifier__estimator LinearSVC() == classifier__estimator LinearSVC()
classifier__estimator__C 0.0999755859375 == classifier__estimator__C 0.0999755859375
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__dual False == classifier__estimator__dual False
classifier__estimator__max_iter 1000 == classifier__estimator__max_iter 1000
classifier__estimator__penalty l2 == classifier__estimator__penalty l2
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
------------------------------------------------------------------
classifier__estimator LinearSVC() == classifier__estimator LinearSVC()
classifier__estimator__C 0.0999755859375 == classifier__estimator__C 0.0999755859375
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__dual False == classifier__estimator__dual False
classifier__estimator__max_iter 10000 == classifier__estimator__max_iter 10000
classifier__estimator__penalty l1 == classifier__estimator__penalty l1
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
------------------------------------------------------------------
classifier__estimator LinearSVC() == classifier__estimator LinearSVC()
classifier__estimator__C 0.0999755859375 == classifier__estimator__C 0.0999755859375
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__dual False == classifier__estimator__dual False
classifier__estimator__max_iter 10000 == classifier__estimator__max_iter 10000
classifier__estimator__penalty l2 == classifier__estimator__penalty l2
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
------------------------------------------------------------------
classifier__estimator LinearSVC() == classifier__estimator LinearSVC()
classifier__estimator__C 0.0999755859375 == classifier__estimator__C 0.0999755859375
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__dual False == classifier__estimator__dual False
classifier__estimator__max_iter 100 == classifier__estimator__max_iter 100
classifier__estimator__penalty l1 == classifier__estimator__penalty l1
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
------------------------------------------------------------------
classifier__estimator LinearSVC() == classifier__estimator LinearSVC()
classifier__estimator__C 0.0999755859375 == classifier__estimator__C 0.0999755859375
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__dual False == classifier__estimator__dual False
classifier__estimator__max_iter 100 == classifier__estimator__max_iter 100
classifier__estimator__penalty l2 == classifier__estimator__penalty l2
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
------------------------------------------------------------------
classifier__estimator LinearSVC() == classifier__estimator LinearSVC()
classifier__estimator__C 0.0999755859375 == classifier__estimator__C 0.0999755859375
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__dual False == classifier__estimator__dual False
classifier__estimator__max_iter 1000 == classifier__estimator__max_iter 1000
classifier__estimator__penalty l1 == classifier__estimator__penalty l1
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
------------------------------------------------------------------
classifier__estimator LinearSVC() == classifier__estimator LinearSVC()
classifier__estimator__C 0.0999755859375 == classifier__estimator__C 0.0999755859375
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__dual False == classifier__estimator__dual False
classifier__estimator__max_iter 1000 == classifier__estimator__max_iter 1000
classifier__estimator__penalty l2 == classifier__estimator__penalty l2
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
------------------------------------------------------------------
classifier__estimator LinearSVC() == classifier__estimator LinearSVC()
classifier__estimator__C 0.0999755859375 == classifier__estimator__C 0.0999755859375
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__dual False == classifier__estimator__dual False
classifier__estimator__max_iter 10000 == classifier__estimator__max_iter 10000
classifier__estimator__penalty l1 == classifier__estimator__penalty l1
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
------------------------------------------------------------------
classifier__estimator LinearSVC() == classifier__estimator LinearSVC()
classifier__estimator__C 0.0999755859375 == classifier__estimator__C 0.0999755859375
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__dual False == classifier__estimator__dual False
classifier__estimator__max_iter 10000 == classifier__estimator__max_iter 10000
classifier__estimator__penalty l2 == classifier__estimator__penalty l2
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
------------------------------------------------------------------
classifier__estimator LinearSVC() == classifier__estimator LinearSVC()
classifier__estimator__C 1.0 == classifier__estimator__C 1.0
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__dual False == classifier__estimator__dual False
classifier__estimator__max_iter 100 == classifier__estimator__max_iter 100
classifier__estimator__penalty l1 == classifier__estimator__penalty l1
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
------------------------------------------------------------------
classifier__estimator LinearSVC() == classifier__estimator LinearSVC()
classifier__estimator__C 1.0 == classifier__estimator__C 1.0
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__dual False == classifier__estimator__dual False
classifier__estimator__max_iter 100 == classifier__estimator__max_iter 100
classifier__estimator__penalty l2 == classifier__estimator__penalty l2
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
------------------------------------------------------------------
classifier__estimator LinearSVC() == classifier__estimator LinearSVC()
classifier__estimator__C 1.0 == classifier__estimator__C 1.0
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__dual False == classifier__estimator__dual False
classifier__estimator__max_iter 1000 == classifier__estimator__max_iter 1000
classifier__estimator__penalty l1 == classifier__estimator__penalty l1
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
------------------------------------------------------------------
classifier__estimator LinearSVC() == classifier__estimator LinearSVC()
classifier__estimator__C 1.0 == classifier__estimator__C 1.0
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__dual False == classifier__estimator__dual False
classifier__estimator__max_iter 1000 == classifier__estimator__max_iter 1000
classifier__estimator__penalty l2 == classifier__estimator__penalty l2
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
------------------------------------------------------------------
classifier__estimator LinearSVC() == classifier__estimator LinearSVC()
classifier__estimator__C 1.0 == classifier__estimator__C 1.0
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__dual False == classifier__estimator__dual False
classifier__estimator__max_iter 10000 == classifier__estimator__max_iter 10000
classifier__estimator__penalty l1 == classifier__estimator__penalty l1
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
------------------------------------------------------------------
classifier__estimator LinearSVC() == classifier__estimator LinearSVC()
classifier__estimator__C 1.0 == classifier__estimator__C 1.0
classifier__estimator__class_weight balanced == classifier__estimator__class_weight balanced
classifier__estimator__dual False == classifier__estimator__dual False
classifier__estimator__max_iter 10000 == classifier__estimator__max_iter 10000
classifier__estimator__penalty l2 == classifier__estimator__penalty l2
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
------------------------------------------------------------------
classifier__estimator LinearSVC() == classifier__estimator LinearSVC()
classifier__estimator__C 1.0 == classifier__estimator__C 1.0
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__dual False == classifier__estimator__dual False
classifier__estimator__max_iter 100 == classifier__estimator__max_iter 100
classifier__estimator__penalty l1 == classifier__estimator__penalty l1
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
------------------------------------------------------------------
classifier__estimator LinearSVC() == classifier__estimator LinearSVC()
classifier__estimator__C 1.0 == classifier__estimator__C 1.0
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__dual False == classifier__estimator__dual False
classifier__estimator__max_iter 100 == classifier__estimator__max_iter 100
classifier__estimator__penalty l2 == classifier__estimator__penalty l2
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
------------------------------------------------------------------
classifier__estimator LinearSVC() == classifier__estimator LinearSVC()
classifier__estimator__C 1.0 == classifier__estimator__C 1.0
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__dual False == classifier__estimator__dual False
classifier__estimator__max_iter 1000 == classifier__estimator__max_iter 1000
classifier__estimator__penalty l1 == classifier__estimator__penalty l1
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
------------------------------------------------------------------
classifier__estimator LinearSVC() == classifier__estimator LinearSVC()
classifier__estimator__C 1.0 == classifier__estimator__C 1.0
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__dual False == classifier__estimator__dual False
classifier__estimator__max_iter 1000 == classifier__estimator__max_iter 1000
classifier__estimator__penalty l2 == classifier__estimator__penalty l2
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
------------------------------------------------------------------
classifier__estimator LinearSVC() == classifier__estimator LinearSVC()
classifier__estimator__C 1.0 == classifier__estimator__C 1.0
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__dual False == classifier__estimator__dual False
classifier__estimator__max_iter 10000 == classifier__estimator__max_iter 10000
classifier__estimator__penalty l1 == classifier__estimator__penalty l1
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
------------------------------------------------------------------
classifier__estimator LinearSVC() == classifier__estimator LinearSVC()
classifier__estimator__C 1.0 == classifier__estimator__C 1.0
classifier__estimator__class_weight None == classifier__estimator__class_weight None
classifier__estimator__dual False == classifier__estimator__dual False
classifier__estimator__max_iter 10000 == classifier__estimator__max_iter 10000
classifier__estimator__penalty l2 == classifier__estimator__penalty l2
classifier__estimator__random_state 42 == classifier__estimator__random_state 42
------------------------------------------------------------------
classifier__estimator MLPClassifier() == classifier__estimator MLPClassifier()
classifier__estimator__activation logistic == classifier__estimator__activation logistic
classifier__estimator__alpha 0.0001 == classifier__estimator__alpha 0.0001
classifier__estimator__early_stopping True == classifier__estimator__early_stopping True
classifier__estimator__hidden_layer_sizes (50, 100, 50) == classifier__estimator__hidden_layer_sizes (50, 100, 50)
classifier__estimator__learning_rate constant == classifier__estimator__learning_rate constant
classifier__estimator__learning_rate_init 0.0001 == classifier__estimator__learning_rate_init 0.0001
classifier__estimator__max_iter 1000 == classifier__estimator__max_iter 1000
classifier__estimator__momentum 0.0 == classifier__estimator__momentum 0.0
classifier__estimator__solver adam == classifier__estimator__solver adam
------------------------------------------------------------------
classifier__estimator MLPClassifier() == classifier__estimator MLPClassifier()
classifier__estimator__activation logistic == classifier__estimator__activation logistic
classifier__estimator__alpha 0.0001 == classifier__estimator__alpha 0.0001
classifier__estimator__early_stopping True == classifier__estimator__early_stopping True
classifier__estimator__hidden_layer_sizes (50, 100, 50) == classifier__estimator__hidden_layer_sizes (50, 100, 50)
classifier__estimator__learning_rate constant == classifier__estimator__learning_rate constant
classifier__estimator__learning_rate_init 0.0001 == classifier__estimator__learning_rate_init 0.0001
classifier__estimator__max_iter 1000 == classifier__estimator__max_iter 1000
classifier__estimator__momentum 0.0 == classifier__estimator__momentum 0.0
classifier__estimator__solver sgd == classifier__estimator__solver sgd
------------------------------------------------------------------
classifier__estimator MLPClassifier() == classifier__estimator MLPClassifier()
classifier__estimator__activation logistic == classifier__estimator__activation logistic
classifier__estimator__alpha 0.0001 == classifier__estimator__alpha 0.0001
classifier__estimator__early_stopping True == classifier__estimator__early_stopping True
classifier__estimator__hidden_layer_sizes (50, 100, 50) == classifier__estimator__hidden_layer_sizes (50, 100, 50)
classifier__estimator__learning_rate constant == classifier__estimator__learning_rate constant
classifier__estimator__learning_rate_init 0.0001 == classifier__estimator__learning_rate_init 0.0001
classifier__estimator__max_iter 1000 == classifier__estimator__max_iter 1000
classifier__estimator__momentum 0.3 == classifier__estimator__momentum 0.3
classifier__estimator__solver adam == classifier__estimator__solver adam
------------------------------------------------------------------
classifier__estimator MLPClassifier() == classifier__estimator MLPClassifier()
classifier__estimator__activation logistic == classifier__estimator__activation logistic
classifier__estimator__alpha 0.0001 == classifier__estimator__alpha 0.0001
classifier__estimator__early_stopping True == classifier__estimator__early_stopping True
classifier__estimator__hidden_layer_sizes (50, 100, 50) == classifier__estimator__hidden_layer_sizes (50, 100, 50)
classifier__estimator__learning_rate constant == classifier__estimator__learning_rate constant
classifier__estimator__learning_rate_init 0.0001 == classifier__estimator__learning_rate_init 0.0001
classifier__estimator__max_iter 1000 == classifier__estimator__max_iter 1000
classifier__estimator__momentum 0.3 == classifier__estimator__momentum 0.3
classifier__estimator__solver sgd == classifier__estimator__solver sgd
------------------------------------------------------------------
classifier__estimator MLPClassifier() == classifier__estimator MLPClassifier()
classifier__estimator__activation logistic == classifier__estimator__activation logistic
classifier__estimator__alpha 0.0001 == classifier__estimator__alpha 0.0001
classifier__estimator__early_stopping True == classifier__estimator__early_stopping True
classifier__estimator__hidden_layer_sizes (50, 100, 50) == classifier__estimator__hidden_layer_sizes (50, 100, 50)
classifier__estimator__learning_rate constant == classifier__estimator__learning_rate constant
classifier__estimator__learning_rate_init 0.0001 == classifier__estimator__learning_rate_init 0.0001
classifier__estimator__max_iter 1000 == classifier__estimator__max_iter 1000
classifier__estimator__momentum 0.6 == classifier__estimator__momentum 0.6
classifier__estimator__solver adam == classifier__estimator__solver adam
------------------------------------------------------------------
classifier__estimator MLPClassifier() == classifier__estimator MLPClassifier()
classifier__estimator__activation logistic == classifier__estimator__activation logistic
classifier__estimator__alpha 0.0001 == classifier__estimator__alpha 0.0001
classifier__estimator__early_stopping True == classifier__estimator__early_stopping True
classifier__estimator__hidden_layer_sizes (50, 100, 50) == classifier__estimator__hidden_layer_sizes (50, 100, 50)
classifier__estimator__learning_rate constant == classifier__estimator__learning_rate constant
classifier__estimator__learning_rate_init 0.0001 == classifier__estimator__learning_rate_init 0.0001
classifier__estimator__max_iter 1000 == classifier__estimator__max_iter 1000
classifier__estimator__momentum 0.6 == classifier__estimator__momentum 0.6
classifier__estimator__solver sgd == classifier__estimator__solver sgd
------------------------------------------------------------------
classifier__estimator MLPClassifier() == classifier__estimator MLPClassifier()
classifier__estimator__activation logistic == classifier__estimator__activation logistic
classifier__estimator__alpha 0.0001 == classifier__estimator__alpha 0.0001
classifier__estimator__early_stopping True == classifier__estimator__early_stopping True
classifier__estimator__hidden_layer_sizes (50, 100, 50) == classifier__estimator__hidden_layer_sizes (50, 100, 50)
classifier__estimator__learning_rate constant == classifier__estimator__learning_rate constant
classifier__estimator__learning_rate_init 0.0001 == classifier__estimator__learning_rate_init 0.0001
classifier__estimator__max_iter 1000 == classifier__estimator__max_iter 1000
classifier__estimator__momentum 0.8999999999999999 == classifier__estimator__momentum 0.8999999999999999
classifier__estimator__solver adam == classifier__estimator__solver adam
------------------------------------------------------------------
classifier__estimator MLPClassifier() == classifier__estimator MLPClassifier()
classifier__estimator__activation logistic == classifier__estimator__activation logistic
classifier__estimator__alpha 0.0001 == classifier__estimator__alpha 0.0001
classifier__estimator__early_stopping True == classifier__estimator__early_stopping True
classifier__estimator__hidden_layer_sizes (50, 100, 50) == classifier__estimator__hidden_layer_sizes (50, 100, 50)
classifier__estimator__learning_rate constant == classifier__estimator__learning_rate constant
classifier__estimator__learning_rate_init 0.0001 == classifier__estimator__learning_rate_init 0.0001
classifier__estimator__max_iter 1000 == classifier__estimator__max_iter 1000
classifier__estimator__momentum 0.8999999999999999 == classifier__estimator__momentum 0.8999999999999999
classifier__estimator__solver sgd == classifier__estimator__solver sgd
------------------------------------------------------------------
classifier__estimator MLPClassifier() == classifier__estimator MLPClassifier()
classifier__estimator__activation logistic == classifier__estimator__activation logistic
classifier__estimator__alpha 0.0001 == classifier__estimator__alpha 0.0001
classifier__estimator__early_stopping True == classifier__estimator__early_stopping True
classifier__estimator__hidden_layer_sizes (50, 100, 50) == classifier__estimator__hidden_layer_sizes (50, 100, 50)
classifier__estimator__learning_rate constant == classifier__estimator__learning_rate constant
classifier__estimator__learning_rate_init 0.001 == classifier__estimator__learning_rate_init 0.001
classifier__estimator__max_iter 1000 == classifier__estimator__max_iter 1000
classifier__estimator__momentum 0.0 == classifier__estimator__momentum 0.0
classifier__estimator__solver adam == classifier__estimator__solver adam
------------------------------------------------------------------
classifier__estimator MLPClassifier() == classifier__estimator MLPClassifier()
classifier__estimator__activation logistic == classifier__estimator__activation logistic
classifier__estimator__alpha 0.0001 == classifier__estimator__alpha 0.0001
classifier__estimator__early_stopping True == classifier__estimator__early_stopping True
classifier__estimator__hidden_layer_sizes (50, 100, 50) == classifier__estimator__hidden_layer_sizes (50, 100, 50)
classifier__estimator__learning_rate constant == classifier__estimator__learning_rate constant
classifier__estimator__learning_rate_init 0.001 == classifier__estimator__learning_rate_init 0.001
classifier__estimator__max_iter 1000 == classifier__estimator__max_iter 1000
classifier__estimator__momentum 0.0 == classifier__estimator__momentum 0.0
classifier__estimator__solver sgd == classifier__estimator__solver sgd
------------------------------------------------------------------
classifier__estimator MLPClassifier() == classifier__estimator MLPClassifier()
classifier__estimator__activation logistic == classifier__estimator__activation logistic
classifier__estimator__alpha 0.0001 == classifier__estimator__alpha 0.0001
classifier__estimator__early_stopping True == classifier__estimator__early_stopping True
classifier__estimator__hidden_layer_sizes (50, 100, 50) == classifier__estimator__hidden_layer_sizes (50, 100, 50)
classifier__estimator__learning_rate constant == classifier__estimator__learning_rate constant
classifier__estimator__learning_rate_init 0.001 == classifier__estimator__learning_rate_init 0.001
classifier__estimator__max_iter 1000 == classifier__estimator__max_iter 1000
classifier__estimator__momentum 0.3 == classifier__estimator__momentum 0.3
classifier__estimator__solver adam == classifier__estimator__solver adam
------------------------------------------------------------------
classifier__estimator MLPClassifier() == classifier__estimator MLPClassifier()
classifier__estimator__activation logistic == classifier__estimator__activation logistic
classifier__estimator__alpha 0.0001 == classifier__estimator__alpha 0.0001
classifier__estimator__early_stopping True == classifier__estimator__early_stopping True
classifier__estimator__hidden_layer_sizes (50, 100, 50) == classifier__estimator__hidden_layer_sizes (50, 100, 50)
classifier__estimator__learning_rate constant == classifier__estimator__learning_rate constant
classifier__estimator__learning_rate_init 0.001 == classifier__estimator__learning_rate_init 0.001
classifier__estimator__max_iter 1000 == classifier__estimator__max_iter 1000
classifier__estimator__momentum 0.3 == classifier__estimator__momentum 0.3
classifier__estimator__solver sgd == classifier__estimator__solver sgd
------------------------------------------------------------------
classifier__estimator MLPClassifier() == classifier__estimator MLPClassifier()
classifier__estimator__activation logistic == classifier__estimator__activation logistic
classifier__estimator__alpha 0.0001 == classifier__estimator__alpha 0.0001
classifier__estimator__early_stopping True == classifier__estimator__early_stopping True
classifier__estimator__hidden_layer_sizes (50, 100, 50) == classifier__estimator__hidden_layer_sizes (50, 100, 50)
classifier__estimator__learning_rate constant == classifier__estimator__learning_rate constant
classifier__estimator__learning_rate_init 0.001 == classifier__estimator__learning_rate_init 0.001
classifier__estimator__max_iter 1000 == classifier__estimator__max_iter 1000
classifier__estimator__momentum 0.6 == classifier__estimator__momentum 0.6
classifier__estimator__solver adam == classifier__estimator__solver adam
------------------------------------------------------------------
classifier__estimator MLPClassifier() == classifier__estimator MLPClassifier()
classifier__estimator__activation logistic == classifier__estimator__activation logistic
classifier__estimator__alpha 0.0001 == classifier__estimator__alpha 0.0001
classifier__estimator__early_stopping True == classifier__estimator__early_stopping True
classifier__estimator__hidden_layer_sizes (50, 100, 50) == classifier__estimator__hidden_layer_sizes (50, 100, 50)
classifier__estimator__learning_rate constant == classifier__estimator__learning_rate constant
classifier__estimator__learning_rate_init 0.001 == classifier__estimator__learning_rate_init 0.001
classifier__estimator__max_iter 1000 == classifier__estimator__max_iter 1000
classifier__estimator__momentum 0.6 == classifier__estimator__momentum 0.6
classifier__estimator__solver sgd == classifier__estimator__solver sgd
------------------------------------------------------------------
classifier__estimator MLPClassifier() == classifier__estimator MLPClassifier()
classifier__estimator__activation logistic == classifier__estimator__activation logistic
classifier__estimator__alpha 0.0001 == classifier__estimator__alpha 0.0001
classifier__estimator__early_stopping True == classifier__estimator__early_stopping True
classifier__estimator__hidden_layer_sizes (50, 100, 50) == classifier__estimator__hidden_layer_sizes (50, 100, 50)
classifier__estimator__learning_rate constant == classifier__estimator__learning_rate constant
classifier__estimator__learning_rate_init 0.001 == classifier__estimator__learning_rate_init 0.001
classifier__estimator__max_iter 1000 == classifier__estimator__max_iter 1000
classifier__estimator__momentum 0.8999999999999999 == classifier__estimator__momentum 0.8999999999999999
classifier__estimator__solver adam == classifier__estimator__solver adam
------------------------------------------------------------------
classifier__estimator MLPClassifier() == classifier__estimator MLPClassifier()
classifier__estimator__activation logistic == classifier__estimator__activation logistic
classifier__estimator__alpha 0.0001 == classifier__estimator__alpha 0.0001
classifier__estimator__early_stopping True == classifier__estimator__early_stopping True
classifier__estimator__hidden_layer_sizes (50, 100, 50) == classifier__estimator__hidden_layer_sizes (50, 100, 50)
classifier__estimator__learning_rate constant == classifier__estimator__learning_rate constant
classifier__estimator__learning_rate_init 0.001 == classifier__estimator__learning_rate_init 0.001
classifier__estimator__max_iter 1000 == classifier__estimator__max_iter 1000
classifier__estimator__momentum 0.8999999999999999 == classifier__estimator__momentum 0.8999999999999999
classifier__estimator__solver sgd == classifier__estimator__solver sgd
------------------------------------------------------------------
classifier__estimator MLPClassifier() == classifier__estimator MLPClassifier()
classifier__estimator__activation logistic == classifier__estimator__activation logistic
classifier__estimator__alpha 0.0001 == classifier__estimator__alpha 0.0001
classifier__estimator__early_stopping True == classifier__estimator__early_stopping True
classifier__estimator__hidden_layer_sizes (50, 100, 50) == classifier__estimator__hidden_layer_sizes (50, 100, 50)
classifier__estimator__learning_rate adaptive == classifier__estimator__learning_rate adaptive
classifier__estimator__learning_rate_init 0.0001 == classifier__estimator__learning_rate_init 0.0001
classifier__estimator__max_iter 1000 == classifier__estimator__max_iter 1000
classifier__estimator__momentum 0.0 == classifier__estimator__momentum 0.0
classifier__estimator__solver adam == classifier__estimator__solver adam
------------------------------------------------------------------
classifier__estimator MLPClassifier() == classifier__estimator MLPClassifier()
classifier__estimator__activation logistic == classifier__estimator__activation logistic
classifier__estimator__alpha 0.0001 == classifier__estimator__alpha 0.0001
classifier__estimator__early_stopping True == classifier__estimator__early_stopping True
classifier__estimator__hidden_layer_sizes (50, 100, 50) == classifier__estimator__hidden_layer_sizes (50, 100, 50)
classifier__estimator__learning_rate adaptive == classifier__estimator__learning_rate adaptive
classifier__estimator__learning_rate_init 0.0001 == classifier__estimator__learning_rate_init 0.0001
classifier__estimator__max_iter 1000 == classifier__estimator__max_iter 1000
classifier__estimator__momentum 0.0 == classifier__estimator__momentum 0.0
classifier__estimator__solver sgd == classifier__estimator__solver sgd
------------------------------------------------------------------
classifier__estimator MLPClassifier() == classifier__estimator MLPClassifier()
classifier__estimator__activation logistic == classifier__estimator__activation logistic
classifier__estimator__alpha 0.0001 == classifier__estimator__alpha 0.0001
classifier__estimator__early_stopping True == classifier__estimator__early_stopping True
classifier__estimator__hidden_layer_sizes (50, 100, 50) == classifier__estimator__hidden_layer_sizes (50, 100, 50)
classifier__estimator__learning_rate adaptive == classifier__estimator__learning_rate adaptive
classifier__estimator__learning_rate_init 0.0001 == classifier__estimator__learning_rate_init 0.0001
classifier__estimator__max_iter 1000 == classifier__estimator__max_iter 1000
classifier__estimator__momentum 0.3 == classifier__estimator__momentum 0.3
classifier__estimator__solver adam == classifier__estimator__solver adam
------------------------------------------------------------------
classifier__estimator MLPClassifier() == classifier__estimator MLPClassifier()
classifier__estimator__activation logistic == classifier__estimator__activation logistic
classifier__estimator__alpha 0.0001 == classifier__estimator__alpha 0.0001
classifier__estimator__early_stopping True == classifier__estimator__early_stopping True
classifier__estimator__hidden_layer_sizes (50, 100, 50) == classifier__estimator__hidden_layer_sizes (50, 100, 50)
classifier__estimator__learning_rate adaptive == classifier__estimator__learning_rate adaptive
classifier__estimator__learning_rate_init 0.0001 == classifier__estimator__learning_rate_init 0.0001
classifier__estimator__max_iter 1000 == classifier__estimator__max_iter 1000
classifier__estimator__momentum 0.3 == classifier__estimator__momentum 0.3
classifier__estimator__solver sgd == classifier__estimator__solver sgd
------------------------------------------------------------------
classifier__estimator MLPClassifier() == classifier__estimator MLPClassifier()
classifier__estimator__activation logistic == classifier__estimator__activation logistic
classifier__estimator__alpha 0.0001 == classifier__estimator__alpha 0.0001
classifier__estimator__early_stopping True == classifier__estimator__early_stopping True
classifier__estimator__hidden_layer_sizes (50, 100, 50) == classifier__estimator__hidden_layer_sizes (50, 100, 50)
classifier__estimator__learning_rate adaptive == classifier__estimator__learning_rate adaptive
classifier__estimator__learning_rate_init 0.0001 == classifier__estimator__learning_rate_init 0.0001
classifier__estimator__max_iter 1000 == classifier__estimator__max_iter 1000
classifier__estimator__momentum 0.6 == classifier__estimator__momentum 0.6
classifier__estimator__solver adam == classifier__estimator__solver adam
------------------------------------------------------------------
classifier__estimator MLPClassifier() == classifier__estimator MLPClassifier()
classifier__estimator__activation logistic == classifier__estimator__activation logistic
classifier__estimator__alpha 0.0001 == classifier__estimator__alpha 0.0001
classifier__estimator__early_stopping True == classifier__estimator__early_stopping True
classifier__estimator__hidden_layer_sizes (50, 100, 50) == classifier__estimator__hidden_layer_sizes (50, 100, 50)
classifier__estimator__learning_rate adaptive == classifier__estimator__learning_rate adaptive
classifier__estimator__learning_rate_init 0.0001 == classifier__estimator__learning_rate_init 0.0001
classifier__estimator__max_iter 1000 == classifier__estimator__max_iter 1000
classifier__estimator__momentum 0.6 == classifier__estimator__momentum 0.6
classifier__estimator__solver sgd == classifier__estimator__solver sgd
------------------------------------------------------------------
classifier__estimator MLPClassifier() == classifier__estimator MLPClassifier()
classifier__estimator__activation logistic == classifier__estimator__activation logistic
classifier__estimator__alpha 0.0001 == classifier__estimator__alpha 0.0001
classifier__estimator__early_stopping True == classifier__estimator__early_stopping True
classifier__estimator__hidden_layer_sizes (50, 100, 50) == classifier__estimator__hidden_layer_sizes (50, 100, 50)
classifier__estimator__learning_rate adaptive == classifier__estimator__learning_rate adaptive
classifier__estimator__learning_rate_init 0.0001 == classifier__estimator__learning_rate_init 0.0001
classifier__estimator__max_iter 1000 == classifier__estimator__max_iter 1000
classifier__estimator__momentum 0.8999999999999999 == classifier__estimator__momentum 0.8999999999999999
classifier__estimator__solver adam == classifier__estimator__solver adam
------------------------------------------------------------------
classifier__estimator MLPClassifier() == classifier__estimator MLPClassifier()
classifier__estimator__activation logistic == classifier__estimator__activation logistic
classifier__estimator__alpha 0.0001 == classifier__estimator__alpha 0.0001
classifier__estimator__early_stopping True == classifier__estimator__early_stopping True
classifier__estimator__hidden_layer_sizes (50, 100, 50) == classifier__estimator__hidden_layer_sizes (50, 100, 50)
classifier__estimator__learning_rate adaptive == classifier__estimator__learning_rate adaptive
classifier__estimator__learning_rate_init 0.0001 == classifier__estimator__learning_rate_init 0.0001
classifier__estimator__max_iter 1000 == classifier__estimator__max_iter 1000
classifier__estimator__momentum 0.8999999999999999 == classifier__estimator__momentum 0.8999999999999999
classifier__estimator__solver sgd == classifier__estimator__solver sgd
------------------------------------------------------------------
classifier__estimator MLPClassifier() == classifier__estimator MLPClassifier()
classifier__estimator__activation logistic == classifier__estimator__activation logistic
classifier__estimator__alpha 0.0001 == classifier__estimator__alpha 0.0001
classifier__estimator__early_stopping True == classifier__estimator__early_stopping True
classifier__estimator__hidden_layer_sizes (50, 100, 50) == classifier__estimator__hidden_layer_sizes (50, 100, 50)
classifier__estimator__learning_rate adaptive == classifier__estimator__learning_rate adaptive
classifier__estimator__learning_rate_init 0.001 == classifier__estimator__learning_rate_init 0.001
classifier__estimator__max_iter 1000 == classifier__estimator__max_iter 1000
classifier__estimator__momentum 0.0 == classifier__estimator__momentum 0.0
classifier__estimator__solver adam == classifier__estimator__solver adam
------------------------------------------------------------------
classifier__estimator MLPClassifier() == classifier__estimator MLPClassifier()
classifier__estimator__activation logistic == classifier__estimator__activation logistic
classifier__estimator__alpha 0.0001 == classifier__estimator__alpha 0.0001
classifier__estimator__early_stopping True == classifier__estimator__early_stopping True
classifier__estimator__hidden_layer_sizes (50, 100, 50) == classifier__estimator__hidden_layer_sizes (50, 100, 50)
classifier__estimator__learning_rate adaptive == classifier__estimator__learning_rate adaptive
classifier__estimator__learning_rate_init 0.001 == classifier__estimator__learning_rate_init 0.001
classifier__estimator__max_iter 1000 == classifier__estimator__max_iter 1000
classifier__estimator__momentum 0.0 == classifier__estimator__momentum 0.0
classifier__estimator__solver sgd == classifier__estimator__solver sgd
------------------------------------------------------------------
classifier__estimator MLPClassifier() == classifier__estimator MLPClassifier()
classifier__estimator__activation logistic == classifier__estimator__activation logistic
classifier__estimator__alpha 0.0001 == classifier__estimator__alpha 0.0001
classifier__estimator__early_stopping True == classifier__estimator__early_stopping True
classifier__estimator__hidden_layer_sizes (50, 100, 50) == classifier__estimator__hidden_layer_sizes (50, 100, 50)
classifier__estimator__learning_rate adaptive == classifier__estimator__learning_rate adaptive
classifier__estimator__learning_rate_init 0.001 == classifier__estimator__learning_rate_init 0.001
classifier__estimator__max_iter 1000 == classifier__estimator__max_iter 1000
classifier__estimator__momentum 0.3 == classifier__estimator__momentum 0.3
classifier__estimator__solver adam == classifier__estimator__solver adam
------------------------------------------------------------------
classifier__estimator MLPClassifier() == classifier__estimator MLPClassifier()
classifier__estimator__activation logistic == classifier__estimator__activation logistic
classifier__estimator__alpha 0.0001 == classifier__estimator__alpha 0.0001
classifier__estimator__early_stopping True == classifier__estimator__early_stopping True
classifier__estimator__hidden_layer_sizes (50, 100, 50) == classifier__estimator__hidden_layer_sizes (50, 100, 50)
classifier__estimator__learning_rate adaptive == classifier__estimator__learning_rate adaptive
classifier__estimator__learning_rate_init 0.001 == classifier__estimator__learning_rate_init 0.001
classifier__estimator__max_iter 1000 == classifier__estimator__max_iter 1000
classifier__estimator__momentum 0.3 == classifier__estimator__momentum 0.3
classifier__estimator__solver sgd == classifier__estimator__solver sgd
------------------------------------------------------------------
classifier__estimator MLPClassifier() == classifier__estimator MLPClassifier()
classifier__estimator__activation logistic == classifier__estimator__activation logistic
classifier__estimator__alpha 0.0001 == classifier__estimator__alpha 0.0001
classifier__estimator__early_stopping True == classifier__estimator__early_stopping True
classifier__estimator__hidden_layer_sizes (50, 100, 50) == classifier__estimator__hidden_layer_sizes (50, 100, 50)
classifier__estimator__learning_rate adaptive == classifier__estimator__learning_rate adaptive
classifier__estimator__learning_rate_init 0.001 == classifier__estimator__learning_rate_init 0.001
classifier__estimator__max_iter 1000 == classifier__estimator__max_iter 1000
classifier__estimator__momentum 0.6 == classifier__estimator__momentum 0.6
classifier__estimator__solver adam == classifier__estimator__solver adam
------------------------------------------------------------------
classifier__estimator MLPClassifier() == classifier__estimator MLPClassifier()
classifier__estimator__activation logistic == classifier__estimator__activation logistic
classifier__estimator__alpha 0.0001 == classifier__estimator__alpha 0.0001
classifier__estimator__early_stopping True == classifier__estimator__early_stopping True
classifier__estimator__hidden_layer_sizes (50, 100, 50) == classifier__estimator__hidden_layer_sizes (50, 100, 50)
classifier__estimator__learning_rate adaptive == classifier__estimator__learning_rate adaptive
classifier__estimator__learning_rate_init 0.001 == classifier__estimator__learning_rate_init 0.001
classifier__estimator__max_iter 1000 == classifier__estimator__max_iter 1000
classifier__estimator__momentum 0.6 == classifier__estimator__momentum 0.6
classifier__estimator__solver sgd == classifier__estimator__solver sgd
------------------------------------------------------------------
classifier__estimator MLPClassifier() == classifier__estimator MLPClassifier()
classifier__estimator__activation logistic == classifier__estimator__activation logistic
classifier__estimator__alpha 0.0001 == classifier__estimator__alpha 0.0001
classifier__estimator__early_stopping True == classifier__estimator__early_stopping True
classifier__estimator__hidden_layer_sizes (50, 100, 50) == classifier__estimator__hidden_layer_sizes (50, 100, 50)
classifier__estimator__learning_rate adaptive == classifier__estimator__learning_rate adaptive
classifier__estimator__learning_rate_init 0.001 == classifier__estimator__learning_rate_init 0.001
classifier__estimator__max_iter 1000 == classifier__estimator__max_iter 1000
classifier__estimator__momentum 0.8999999999999999 == classifier__estimator__momentum 0.8999999999999999
classifier__estimator__solver adam == classifier__estimator__solver adam
------------------------------------------------------------------
classifier__estimator MLPClassifier() == classifier__estimator MLPClassifier()
classifier__estimator__activation logistic == classifier__estimator__activation logistic
classifier__estimator__alpha 0.0001 == classifier__estimator__alpha 0.0001
classifier__estimator__early_stopping True == classifier__estimator__early_stopping True
classifier__estimator__hidden_layer_sizes (50, 100, 50) == classifier__estimator__hidden_layer_sizes (50, 100, 50)
classifier__estimator__learning_rate adaptive == classifier__estimator__learning_rate adaptive
classifier__estimator__learning_rate_init 0.001 == classifier__estimator__learning_rate_init 0.001
classifier__estimator__max_iter 1000 == classifier__estimator__max_iter 1000
classifier__estimator__momentum 0.8999999999999999 == classifier__estimator__momentum 0.8999999999999999
classifier__estimator__solver sgd == classifier__estimator__solver sgd
------------------------------------------------------------------
classifier__estimator MLPClassifier() == classifier__estimator MLPClassifier()
classifier__estimator__activation logistic == classifier__estimator__activation logistic
classifier__estimator__alpha 0.0001 == classifier__estimator__alpha 0.0001
classifier__estimator__early_stopping True == classifier__estimator__early_stopping True
classifier__estimator__hidden_layer_sizes (100,) == classifier__estimator__hidden_layer_sizes (100,)
classifier__estimator__learning_rate constant == classifier__estimator__learning_rate constant
classifier__estimator__learning_rate_init 0.0001 == classifier__estimator__learning_rate_init 0.0001
classifier__estimator__max_iter 1000 == classifier__estimator__max_iter 1000
classifier__estimator__momentum 0.0 == classifier__estimator__momentum 0.0
classifier__estimator__solver adam == classifier__estimator__solver adam
------------------------------------------------------------------
classifier__estimator MLPClassifier() == classifier__estimator MLPClassifier()
classifier__estimator__activation logistic == classifier__estimator__activation logistic
classifier__estimator__alpha 0.0001 == classifier__estimator__alpha 0.0001
classifier__estimator__early_stopping True == classifier__estimator__early_stopping True
classifier__estimator__hidden_layer_sizes (100,) == classifier__estimator__hidden_layer_sizes (100,)
classifier__estimator__learning_rate constant == classifier__estimator__learning_rate constant
classifier__estimator__learning_rate_init 0.0001 == classifier__estimator__learning_rate_init 0.0001
classifier__estimator__max_iter 1000 == classifier__estimator__max_iter 1000
classifier__estimator__momentum 0.0 == classifier__estimator__momentum 0.0
classifier__estimator__solver sgd == classifier__estimator__solver sgd
------------------------------------------------------------------
classifier__estimator MLPClassifier() == classifier__estimator MLPClassifier()
classifier__estimator__activation logistic == classifier__estimator__activation logistic
classifier__estimator__alpha 0.0001 == classifier__estimator__alpha 0.0001
classifier__estimator__early_stopping True == classifier__estimator__early_stopping True
classifier__estimator__hidden_layer_sizes (100,) == classifier__estimator__hidden_layer_sizes (100,)
classifier__estimator__learning_rate constant == classifier__estimator__learning_rate constant
classifier__estimator__learning_rate_init 0.0001 == classifier__estimator__learning_rate_init 0.0001
classifier__estimator__max_iter 1000 == classifier__estimator__max_iter 1000
classifier__estimator__momentum 0.3 == classifier__estimator__momentum 0.3
classifier__estimator__solver adam == classifier__estimator__solver adam
------------------------------------------------------------------
classifier__estimator MLPClassifier() == classifier__estimator MLPClassifier()
classifier__estimator__activation logistic == classifier__estimator__activation logistic
classifier__estimator__alpha 0.0001 == classifier__estimator__alpha 0.0001
classifier__estimator__early_stopping True == classifier__estimator__early_stopping True
classifier__estimator__hidden_layer_sizes (100,) == classifier__estimator__hidden_layer_sizes (100,)
classifier__estimator__learning_rate constant == classifier__estimator__learning_rate constant
classifier__estimator__learning_rate_init 0.0001 == classifier__estimator__learning_rate_init 0.0001
classifier__estimator__max_iter 1000 == classifier__estimator__max_iter 1000
classifier__estimator__momentum 0.3 == classifier__estimator__momentum 0.3
classifier__estimator__solver sgd == classifier__estimator__solver sgd
------------------------------------------------------------------
classifier__estimator MLPClassifier() == classifier__estimator MLPClassifier()
classifier__estimator__activation logistic == classifier__estimator__activation logistic
classifier__estimator__alpha 0.0001 == classifier__estimator__alpha 0.0001
classifier__estimator__early_stopping True == classifier__estimator__early_stopping True
classifier__estimator__hidden_layer_sizes (100,) == classifier__estimator__hidden_layer_sizes (100,)
classifier__estimator__learning_rate constant == classifier__estimator__learning_rate constant
classifier__estimator__learning_rate_init 0.0001 == classifier__estimator__learning_rate_init 0.0001
classifier__estimator__max_iter 1000 == classifier__estimator__max_iter 1000
classifier__estimator__momentum 0.6 == classifier__estimator__momentum 0.6
classifier__estimator__solver adam == classifier__estimator__solver adam
------------------------------------------------------------------
classifier__estimator MLPClassifier() == classifier__estimator MLPClassifier()
classifier__estimator__activation logistic == classifier__estimator__activation logistic
classifier__estimator__alpha 0.0001 == classifier__estimator__alpha 0.0001
classifier__estimator__early_stopping True == classifier__estimator__early_stopping True
classifier__estimator__hidden_layer_sizes (100,) == classifier__estimator__hidden_layer_sizes (100,)
classifier__estimator__learning_rate constant == classifier__estimator__learning_rate constant
classifier__estimator__learning_rate_init 0.0001 == classifier__estimator__learning_rate_init 0.0001
classifier__estimator__max_iter 1000 == classifier__estimator__max_iter 1000
classifier__estimator__momentum 0.6 == classifier__estimator__momentum 0.6
classifier__estimator__solver sgd == classifier__estimator__solver sgd
------------------------------------------------------------------
classifier__estimator MLPClassifier() == classifier__estimator MLPClassifier()
classifier__estimator__activation logistic == classifier__estimator__activation logistic
classifier__estimator__alpha 0.0001 == classifier__estimator__alpha 0.0001
classifier__estimator__early_stopping True == classifier__estimator__early_stopping True
classifier__estimator__hidden_layer_sizes (100,) == classifier__estimator__hidden_layer_sizes (100,)
classifier__estimator__learning_rate constant == classifier__estimator__learning_rate constant
classifier__estimator__learning_rate_init 0.0001 == classifier__estimator__learning_rate_init 0.0001
classifier__estimator__max_iter 1000 == classifier__estimator__max_iter 1000
classifier__estimator__momentum 0.8999999999999999 == classifier__estimator__momentum 0.8999999999999999
classifier__estimator__solver adam == classifier__estimator__solver adam
------------------------------------------------------------------
classifier__estimator MLPClassifier() == classifier__estimator MLPClassifier()
classifier__estimator__activation logistic == classifier__estimator__activation logistic
classifier__estimator__alpha 0.0001 == classifier__estimator__alpha 0.0001
classifier__estimator__early_stopping True == classifier__estimator__early_stopping True
classifier__estimator__hidden_layer_sizes (100,) == classifier__estimator__hidden_layer_sizes (100,)
classifier__estimator__learning_rate constant == classifier__estimator__learning_rate constant
classifier__estimator__learning_rate_init 0.0001 == classifier__estimator__learning_rate_init 0.0001
classifier__estimator__max_iter 1000 == classifier__estimator__max_iter 1000
classifier__estimator__momentum 0.8999999999999999 == classifier__estimator__momentum 0.8999999999999999
classifier__estimator__solver sgd == classifier__estimator__solver sgd
------------------------------------------------------------------
classifier__estimator MLPClassifier() == classifier__estimator MLPClassifier()
classifier__estimator__activation logistic == classifier__estimator__activation logistic
classifier__estimator__alpha 0.0001 == classifier__estimator__alpha 0.0001
classifier__estimator__early_stopping True == classifier__estimator__early_stopping True
classifier__estimator__hidden_layer_sizes (100,) == classifier__estimator__hidden_layer_sizes (100,)
classifier__estimator__learning_rate constant == classifier__estimator__learning_rate constant
classifier__estimator__learning_rate_init 0.001 == classifier__estimator__learning_rate_init 0.001
classifier__estimator__max_iter 1000 == classifier__estimator__max_iter 1000
classifier__estimator__momentum 0.0 == classifier__estimator__momentum 0.0
classifier__estimator__solver adam == classifier__estimator__solver adam
------------------------------------------------------------------
classifier__estimator MLPClassifier() == classifier__estimator MLPClassifier()
classifier__estimator__activation logistic == classifier__estimator__activation logistic
classifier__estimator__alpha 0.0001 == classifier__estimator__alpha 0.0001
classifier__estimator__early_stopping True == classifier__estimator__early_stopping True
classifier__estimator__hidden_layer_sizes (100,) == classifier__estimator__hidden_layer_sizes (100,)
classifier__estimator__learning_rate constant == classifier__estimator__learning_rate constant
classifier__estimator__learning_rate_init 0.001 == classifier__estimator__learning_rate_init 0.001
classifier__estimator__max_iter 1000 == classifier__estimator__max_iter 1000
classifier__estimator__momentum 0.0 == classifier__estimator__momentum 0.0
classifier__estimator__solver sgd == classifier__estimator__solver sgd
------------------------------------------------------------------
classifier__estimator MLPClassifier() == classifier__estimator MLPClassifier()
classifier__estimator__activation logistic == classifier__estimator__activation logistic
classifier__estimator__alpha 0.0001 == classifier__estimator__alpha 0.0001
classifier__estimator__early_stopping True == classifier__estimator__early_stopping True
classifier__estimator__hidden_layer_sizes (100,) == classifier__estimator__hidden_layer_sizes (100,)
classifier__estimator__learning_rate constant == classifier__estimator__learning_rate constant
classifier__estimator__learning_rate_init 0.001 == classifier__estimator__learning_rate_init 0.001
classifier__estimator__max_iter 1000 == classifier__estimator__max_iter 1000
classifier__estimator__momentum 0.3 == classifier__estimator__momentum 0.3
classifier__estimator__solver adam == classifier__estimator__solver adam
------------------------------------------------------------------
classifier__estimator MLPClassifier() == classifier__estimator MLPClassifier()
classifier__estimator__activation logistic == classifier__estimator__activation logistic
classifier__estimator__alpha 0.0001 == classifier__estimator__alpha 0.0001
classifier__estimator__early_stopping True == classifier__estimator__early_stopping True
classifier__estimator__hidden_layer_sizes (100,) == classifier__estimator__hidden_layer_sizes (100,)
classifier__estimator__learning_rate constant == classifier__estimator__learning_rate constant
classifier__estimator__learning_rate_init 0.001 == classifier__estimator__learning_rate_init 0.001
classifier__estimator__max_iter 1000 == classifier__estimator__max_iter 1000
classifier__estimator__momentum 0.3 == classifier__estimator__momentum 0.3
classifier__estimator__solver sgd == classifier__estimator__solver sgd
------------------------------------------------------------------
classifier__estimator MLPClassifier() == classifier__estimator MLPClassifier()
classifier__estimator__activation logistic == classifier__estimator__activation logistic
classifier__estimator__alpha 0.0001 == classifier__estimator__alpha 0.0001
classifier__estimator__early_stopping True == classifier__estimator__early_stopping True
classifier__estimator__hidden_layer_sizes (100,) == classifier__estimator__hidden_layer_sizes (100,)
classifier__estimator__learning_rate constant == classifier__estimator__learning_rate constant
classifier__estimator__learning_rate_init 0.001 == classifier__estimator__learning_rate_init 0.001
classifier__estimator__max_iter 1000 == classifier__estimator__max_iter 1000
classifier__estimator__momentum 0.6 == classifier__estimator__momentum 0.6
classifier__estimator__solver adam == classifier__estimator__solver adam
------------------------------------------------------------------
classifier__estimator MLPClassifier() == classifier__estimator MLPClassifier()
classifier__estimator__activation logistic == classifier__estimator__activation logistic
classifier__estimator__alpha 0.0001 == classifier__estimator__alpha 0.0001
classifier__estimator__early_stopping True == classifier__estimator__early_stopping True
classifier__estimator__hidden_layer_sizes (100,) == classifier__estimator__hidden_layer_sizes (100,)
classifier__estimator__learning_rate constant == classifier__estimator__learning_rate constant
classifier__estimator__learning_rate_init 0.001 == classifier__estimator__learning_rate_init 0.001
classifier__estimator__max_iter 1000 == classifier__estimator__max_iter 1000
classifier__estimator__momentum 0.6 == classifier__estimator__momentum 0.6
classifier__estimator__solver sgd == classifier__estimator__solver sgd
------------------------------------------------------------------
classifier__estimator MLPClassifier() == classifier__estimator MLPClassifier()
classifier__estimator__activation logistic == classifier__estimator__activation logistic
classifier__estimator__alpha 0.0001 == classifier__estimator__alpha 0.0001
classifier__estimator__early_stopping True == classifier__estimator__early_stopping True
classifier__estimator__hidden_layer_sizes (100,) == classifier__estimator__hidden_layer_sizes (100,)
classifier__estimator__learning_rate constant == classifier__estimator__learning_rate constant
classifier__estimator__learning_rate_init 0.001 == classifier__estimator__learning_rate_init 0.001
classifier__estimator__max_iter 1000 == classifier__estimator__max_iter 1000
classifier__estimator__momentum 0.8999999999999999 == classifier__estimator__momentum 0.8999999999999999
classifier__estimator__solver adam == classifier__estimator__solver adam
------------------------------------------------------------------
classifier__estimator MLPClassifier() == classifier__estimator MLPClassifier()
classifier__estimator__activation logistic == classifier__estimator__activation logistic
classifier__estimator__alpha 0.0001 == classifier__estimator__alpha 0.0001
classifier__estimator__early_stopping True == classifier__estimator__early_stopping True
classifier__estimator__hidden_layer_sizes (100,) == classifier__estimator__hidden_layer_sizes (100,)
classifier__estimator__learning_rate constant == classifier__estimator__learning_rate constant
classifier__estimator__learning_rate_init 0.001 == classifier__estimator__learning_rate_init 0.001
classifier__estimator__max_iter 1000 == classifier__estimator__max_iter 1000
classifier__estimator__momentum 0.8999999999999999 == classifier__estimator__momentum 0.8999999999999999
classifier__estimator__solver sgd == classifier__estimator__solver sgd
------------------------------------------------------------------
classifier__estimator MLPClassifier() == classifier__estimator MLPClassifier()
classifier__estimator__activation logistic == classifier__estimator__activation logistic
classifier__estimator__alpha 0.0001 == classifier__estimator__alpha 0.0001
classifier__estimator__early_stopping True == classifier__estimator__early_stopping True
classifier__estimator__hidden_layer_sizes (100,) == classifier__estimator__hidden_layer_sizes (100,)
classifier__estimator__learning_rate adaptive == classifier__estimator__learning_rate adaptive
classifier__estimator__learning_rate_init 0.0001 == classifier__estimator__learning_rate_init 0.0001
classifier__estimator__max_iter 1000 == classifier__estimator__max_iter 1000
classifier__estimator__momentum 0.0 == classifier__estimator__momentum 0.0
classifier__estimator__solver adam == classifier__estimator__solver adam
------------------------------------------------------------------
classifier__estimator MLPClassifier() == classifier__estimator MLPClassifier()
classifier__estimator__activation logistic == classifier__estimator__activation logistic
classifier__estimator__alpha 0.0001 == classifier__estimator__alpha 0.0001
classifier__estimator__early_stopping True == classifier__estimator__early_stopping True
classifier__estimator__hidden_layer_sizes (100,) == classifier__estimator__hidden_layer_sizes (100,)
classifier__estimator__learning_rate adaptive == classifier__estimator__learning_rate adaptive
classifier__estimator__learning_rate_init 0.0001 == classifier__estimator__learning_rate_init 0.0001
classifier__estimator__max_iter 1000 == classifier__estimator__max_iter 1000
classifier__estimator__momentum 0.0 == classifier__estimator__momentum 0.0
classifier__estimator__solver sgd == classifier__estimator__solver sgd
------------------------------------------------------------------
classifier__estimator MLPClassifier() == classifier__estimator MLPClassifier()
classifier__estimator__activation logistic == classifier__estimator__activation logistic
classifier__estimator__alpha 0.0001 == classifier__estimator__alpha 0.0001
classifier__estimator__early_stopping True == classifier__estimator__early_stopping True
classifier__estimator__hidden_layer_sizes (100,) == classifier__estimator__hidden_layer_sizes (100,)
classifier__estimator__learning_rate adaptive == classifier__estimator__learning_rate adaptive
classifier__estimator__learning_rate_init 0.0001 == classifier__estimator__learning_rate_init 0.0001
classifier__estimator__max_iter 1000 == classifier__estimator__max_iter 1000
classifier__estimator__momentum 0.3 == classifier__estimator__momentum 0.3
classifier__estimator__solver adam == classifier__estimator__solver adam
------------------------------------------------------------------
classifier__estimator MLPClassifier() == classifier__estimator MLPClassifier()
classifier__estimator__activation logistic == classifier__estimator__activation logistic
classifier__estimator__alpha 0.0001 == classifier__estimator__alpha 0.0001
classifier__estimator__early_stopping True == classifier__estimator__early_stopping True
classifier__estimator__hidden_layer_sizes (100,) == classifier__estimator__hidden_layer_sizes (100,)
classifier__estimator__learning_rate adaptive == classifier__estimator__learning_rate adaptive
classifier__estimator__learning_rate_init 0.0001 == classifier__estimator__learning_rate_init 0.0001
classifier__estimator__max_iter 1000 == classifier__estimator__max_iter 1000
classifier__estimator__momentum 0.3 == classifier__estimator__momentum 0.3
classifier__estimator__solver sgd == classifier__estimator__solver sgd
------------------------------------------------------------------
classifier__estimator MLPClassifier() == classifier__estimator MLPClassifier()
classifier__estimator__activation logistic == classifier__estimator__activation logistic
classifier__estimator__alpha 0.0001 == classifier__estimator__alpha 0.0001
classifier__estimator__early_stopping True == classifier__estimator__early_stopping True
classifier__estimator__hidden_layer_sizes (100,) == classifier__estimator__hidden_layer_sizes (100,)
classifier__estimator__learning_rate adaptive == classifier__estimator__learning_rate adaptive
classifier__estimator__learning_rate_init 0.0001 == classifier__estimator__learning_rate_init 0.0001
classifier__estimator__max_iter 1000 == classifier__estimator__max_iter 1000
classifier__estimator__momentum 0.6 == classifier__estimator__momentum 0.6
classifier__estimator__solver adam == classifier__estimator__solver adam
------------------------------------------------------------------
classifier__estimator MLPClassifier() == classifier__estimator MLPClassifier()
classifier__estimator__activation logistic == classifier__estimator__activation logistic
classifier__estimator__alpha 0.0001 == classifier__estimator__alpha 0.0001
classifier__estimator__early_stopping True == classifier__estimator__early_stopping True
classifier__estimator__hidden_layer_sizes (100,) == classifier__estimator__hidden_layer_sizes (100,)
classifier__estimator__learning_rate adaptive == classifier__estimator__learning_rate adaptive
classifier__estimator__learning_rate_init 0.0001 == classifier__estimator__learning_rate_init 0.0001
classifier__estimator__max_iter 1000 == classifier__estimator__max_iter 1000
classifier__estimator__momentum 0.6 == classifier__estimator__momentum 0.6
classifier__estimator__solver sgd == classifier__estimator__solver sgd
------------------------------------------------------------------
classifier__estimator MLPClassifier() == classifier__estimator MLPClassifier()
classifier__estimator__activation logistic == classifier__estimator__activation logistic
classifier__estimator__alpha 0.0001 == classifier__estimator__alpha 0.0001
classifier__estimator__early_stopping True == classifier__estimator__early_stopping True
classifier__estimator__hidden_layer_sizes (100,) == classifier__estimator__hidden_layer_sizes (100,)
classifier__estimator__learning_rate adaptive == classifier__estimator__learning_rate adaptive
classifier__estimator__learning_rate_init 0.0001 == classifier__estimator__learning_rate_init 0.0001
classifier__estimator__max_iter 1000 == classifier__estimator__max_iter 1000
classifier__estimator__momentum 0.8999999999999999 == classifier__estimator__momentum 0.8999999999999999
classifier__estimator__solver adam == classifier__estimator__solver adam
------------------------------------------------------------------
classifier__estimator MLPClassifier() == classifier__estimator MLPClassifier()
classifier__estimator__activation logistic == classifier__estimator__activation logistic
classifier__estimator__alpha 0.0001 == classifier__estimator__alpha 0.0001
classifier__estimator__early_stopping True == classifier__estimator__early_stopping True
classifier__estimator__hidden_layer_sizes (100,) == classifier__estimator__hidden_layer_sizes (100,)
classifier__estimator__learning_rate adaptive == classifier__estimator__learning_rate adaptive
classifier__estimator__learning_rate_init 0.0001 == classifier__estimator__learning_rate_init 0.0001
classifier__estimator__max_iter 1000 == classifier__estimator__max_iter 1000
classifier__estimator__momentum 0.8999999999999999 == classifier__estimator__momentum 0.8999999999999999
classifier__estimator__solver sgd == classifier__estimator__solver sgd
------------------------------------------------------------------
classifier__estimator MLPClassifier() == classifier__estimator MLPClassifier()
classifier__estimator__activation logistic == classifier__estimator__activation logistic
classifier__estimator__alpha 0.0001 == classifier__estimator__alpha 0.0001
classifier__estimator__early_stopping True == classifier__estimator__early_stopping True
classifier__estimator__hidden_layer_sizes (100,) == classifier__estimator__hidden_layer_sizes (100,)
classifier__estimator__learning_rate adaptive == classifier__estimator__learning_rate adaptive
classifier__estimator__learning_rate_init 0.001 == classifier__estimator__learning_rate_init 0.001
classifier__estimator__max_iter 1000 == classifier__estimator__max_iter 1000
classifier__estimator__momentum 0.0 == classifier__estimator__momentum 0.0
classifier__estimator__solver adam == classifier__estimator__solver adam
------------------------------------------------------------------
classifier__estimator MLPClassifier() == classifier__estimator MLPClassifier()
classifier__estimator__activation logistic == classifier__estimator__activation logistic
classifier__estimator__alpha 0.0001 == classifier__estimator__alpha 0.0001
classifier__estimator__early_stopping True == classifier__estimator__early_stopping True
classifier__estimator__hidden_layer_sizes (100,) == classifier__estimator__hidden_layer_sizes (100,)
classifier__estimator__learning_rate adaptive == classifier__estimator__learning_rate adaptive
classifier__estimator__learning_rate_init 0.001 == classifier__estimator__learning_rate_init 0.001
classifier__estimator__max_iter 1000 == classifier__estimator__max_iter 1000
classifier__estimator__momentum 0.0 == classifier__estimator__momentum 0.0
classifier__estimator__solver sgd == classifier__estimator__solver sgd
------------------------------------------------------------------
classifier__estimator MLPClassifier() == classifier__estimator MLPClassifier()
classifier__estimator__activation logistic == classifier__estimator__activation logistic
classifier__estimator__alpha 0.0001 == classifier__estimator__alpha 0.0001
classifier__estimator__early_stopping True == classifier__estimator__early_stopping True
classifier__estimator__hidden_layer_sizes (100,) == classifier__estimator__hidden_layer_sizes (100,)
classifier__estimator__learning_rate adaptive == classifier__estimator__learning_rate adaptive
classifier__estimator__learning_rate_init 0.001 == classifier__estimator__learning_rate_init 0.001
classifier__estimator__max_iter 1000 == classifier__estimator__max_iter 1000
classifier__estimator__momentum 0.3 == classifier__estimator__momentum 0.3
classifier__estimator__solver adam == classifier__estimator__solver adam
------------------------------------------------------------------
classifier__estimator MLPClassifier() == classifier__estimator MLPClassifier()
classifier__estimator__activation logistic == classifier__estimator__activation logistic
classifier__estimator__alpha 0.0001 == classifier__estimator__alpha 0.0001
classifier__estimator__early_stopping True == classifier__estimator__early_stopping True
classifier__estimator__hidden_layer_sizes (100,) == classifier__estimator__hidden_layer_sizes (100,)
classifier__estimator__learning_rate adaptive == classifier__estimator__learning_rate adaptive
classifier__estimator__learning_rate_init 0.001 == classifier__estimator__learning_rate_init 0.001
classifier__estimator__max_iter 1000 == classifier__estimator__max_iter 1000
classifier__estimator__momentum 0.3 == classifier__estimator__momentum 0.3
classifier__estimator__solver sgd == classifier__estimator__solver sgd
------------------------------------------------------------------
classifier__estimator MLPClassifier() == classifier__estimator MLPClassifier()
classifier__estimator__activation logistic == classifier__estimator__activation logistic
classifier__estimator__alpha 0.0001 == classifier__estimator__alpha 0.0001
classifier__estimator__early_stopping True == classifier__estimator__early_stopping True
classifier__estimator__hidden_layer_sizes (100,) == classifier__estimator__hidden_layer_sizes (100,)
classifier__estimator__learning_rate adaptive == classifier__estimator__learning_rate adaptive
classifier__estimator__learning_rate_init 0.001 == classifier__estimator__learning_rate_init 0.001
classifier__estimator__max_iter 1000 == classifier__estimator__max_iter 1000
classifier__estimator__momentum 0.6 == classifier__estimator__momentum 0.6
classifier__estimator__solver adam == classifier__estimator__solver adam
------------------------------------------------------------------
classifier__estimator MLPClassifier() == classifier__estimator MLPClassifier()
classifier__estimator__activation logistic == classifier__estimator__activation logistic
classifier__estimator__alpha 0.0001 == classifier__estimator__alpha 0.0001
classifier__estimator__early_stopping True == classifier__estimator__early_stopping True
classifier__estimator__hidden_layer_sizes (100,) == classifier__estimator__hidden_layer_sizes (100,)
classifier__estimator__learning_rate adaptive == classifier__estimator__learning_rate adaptive
classifier__estimator__learning_rate_init 0.001 == classifier__estimator__learning_rate_init 0.001
classifier__estimator__max_iter 1000 == classifier__estimator__max_iter 1000
classifier__estimator__momentum 0.6 == classifier__estimator__momentum 0.6
classifier__estimator__solver sgd == classifier__estimator__solver sgd
------------------------------------------------------------------
classifier__estimator MLPClassifier() == classifier__estimator MLPClassifier()
classifier__estimator__activation logistic == classifier__estimator__activation logistic
classifier__estimator__alpha 0.0001 == classifier__estimator__alpha 0.0001
classifier__estimator__early_stopping True == classifier__estimator__early_stopping True
classifier__estimator__hidden_layer_sizes (100,) == classifier__estimator__hidden_layer_sizes (100,)
classifier__estimator__learning_rate adaptive == classifier__estimator__learning_rate adaptive
classifier__estimator__learning_rate_init 0.001 == classifier__estimator__learning_rate_init 0.001
classifier__estimator__max_iter 1000 == classifier__estimator__max_iter 1000
classifier__estimator__momentum 0.8999999999999999 == classifier__estimator__momentum 0.8999999999999999
classifier__estimator__solver adam == classifier__estimator__solver adam
------------------------------------------------------------------
classifier__estimator MLPClassifier() == classifier__estimator MLPClassifier()
classifier__estimator__activation logistic == classifier__estimator__activation logistic
classifier__estimator__alpha 0.0001 == classifier__estimator__alpha 0.0001
classifier__estimator__early_stopping True == classifier__estimator__early_stopping True
classifier__estimator__hidden_layer_sizes (100,) == classifier__estimator__hidden_layer_sizes (100,)
classifier__estimator__learning_rate adaptive == classifier__estimator__learning_rate adaptive
classifier__estimator__learning_rate_init 0.001 == classifier__estimator__learning_rate_init 0.001
classifier__estimator__max_iter 1000 == classifier__estimator__max_iter 1000
classifier__estimator__momentum 0.8999999999999999 == classifier__estimator__momentum 0.8999999999999999
classifier__estimator__solver sgd == classifier__estimator__solver sgd
------------------------------------------------------------------
classifier__estimator MLPClassifier() == classifier__estimator MLPClassifier()
classifier__estimator__activation logistic == classifier__estimator__activation logistic
classifier__estimator__alpha 0.0001 == classifier__estimator__alpha 0.0001
classifier__estimator__early_stopping True == classifier__estimator__early_stopping True
classifier__estimator__hidden_layer_sizes (200, 100) == classifier__estimator__hidden_layer_sizes (200, 100)
classifier__estimator__learning_rate constant == classifier__estimator__learning_rate constant
classifier__estimator__learning_rate_init 0.0001 == classifier__estimator__learning_rate_init 0.0001
classifier__estimator__max_iter 1000 == classifier__estimator__max_iter 1000
classifier__estimator__momentum 0.0 == classifier__estimator__momentum 0.0
classifier__estimator__solver adam == classifier__estimator__solver adam
------------------------------------------------------------------
classifier__estimator MLPClassifier() == classifier__estimator MLPClassifier()
classifier__estimator__activation logistic == classifier__estimator__activation logistic
classifier__estimator__alpha 0.0001 == classifier__estimator__alpha 0.0001
classifier__estimator__early_stopping True == classifier__estimator__early_stopping True
classifier__estimator__hidden_layer_sizes (200, 100) == classifier__estimator__hidden_layer_sizes (200, 100)
classifier__estimator__learning_rate constant == classifier__estimator__learning_rate constant
classifier__estimator__learning_rate_init 0.0001 == classifier__estimator__learning_rate_init 0.0001
classifier__estimator__max_iter 1000 == classifier__estimator__max_iter 1000
classifier__estimator__momentum 0.0 == classifier__estimator__momentum 0.0
classifier__estimator__solver sgd == classifier__estimator__solver sgd
------------------------------------------------------------------
classifier__estimator MLPClassifier() == classifier__estimator MLPClassifier()
classifier__estimator__activation logistic == classifier__estimator__activation logistic
classifier__estimator__alpha 0.0001 == classifier__estimator__alpha 0.0001
classifier__estimator__early_stopping True == classifier__estimator__early_stopping True
classifier__estimator__hidden_layer_sizes (200, 100) == classifier__estimator__hidden_layer_sizes (200, 100)
classifier__estimator__learning_rate constant == classifier__estimator__learning_rate constant
classifier__estimator__learning_rate_init 0.0001 == classifier__estimator__learning_rate_init 0.0001
classifier__estimator__max_iter 1000 == classifier__estimator__max_iter 1000
classifier__estimator__momentum 0.3 == classifier__estimator__momentum 0.3
classifier__estimator__solver adam == classifier__estimator__solver adam
------------------------------------------------------------------
classifier__estimator MLPClassifier() == classifier__estimator MLPClassifier()
classifier__estimator__activation logistic == classifier__estimator__activation logistic
classifier__estimator__alpha 0.0001 == classifier__estimator__alpha 0.0001
classifier__estimator__early_stopping True == classifier__estimator__early_stopping True
classifier__estimator__hidden_layer_sizes (200, 100) == classifier__estimator__hidden_layer_sizes (200, 100)
classifier__estimator__learning_rate constant == classifier__estimator__learning_rate constant
classifier__estimator__learning_rate_init 0.0001 == classifier__estimator__learning_rate_init 0.0001
classifier__estimator__max_iter 1000 == classifier__estimator__max_iter 1000
classifier__estimator__momentum 0.3 == classifier__estimator__momentum 0.3
classifier__estimator__solver sgd == classifier__estimator__solver sgd
------------------------------------------------------------------
classifier__estimator MLPClassifier() == classifier__estimator MLPClassifier()
classifier__estimator__activation logistic == classifier__estimator__activation logistic
classifier__estimator__alpha 0.0001 == classifier__estimator__alpha 0.0001
classifier__estimator__early_stopping True == classifier__estimator__early_stopping True
classifier__estimator__hidden_layer_sizes (200, 100) == classifier__estimator__hidden_layer_sizes (200, 100)
classifier__estimator__learning_rate constant == classifier__estimator__learning_rate constant
classifier__estimator__learning_rate_init 0.0001 == classifier__estimator__learning_rate_init 0.0001
classifier__estimator__max_iter 1000 == classifier__estimator__max_iter 1000
classifier__estimator__momentum 0.6 == classifier__estimator__momentum 0.6
classifier__estimator__solver adam == classifier__estimator__solver adam
------------------------------------------------------------------
classifier__estimator MLPClassifier() == classifier__estimator MLPClassifier()
classifier__estimator__activation logistic == classifier__estimator__activation logistic
classifier__estimator__alpha 0.0001 == classifier__estimator__alpha 0.0001
classifier__estimator__early_stopping True == classifier__estimator__early_stopping True
classifier__estimator__hidden_layer_sizes (200, 100) == classifier__estimator__hidden_layer_sizes (200, 100)
classifier__estimator__learning_rate constant == classifier__estimator__learning_rate constant
classifier__estimator__learning_rate_init 0.0001 == classifier__estimator__learning_rate_init 0.0001
classifier__estimator__max_iter 1000 == classifier__estimator__max_iter 1000
classifier__estimator__momentum 0.6 == classifier__estimator__momentum 0.6
classifier__estimator__solver sgd == classifier__estimator__solver sgd
------------------------------------------------------------------
classifier__estimator MLPClassifier() == classifier__estimator MLPClassifier()
classifier__estimator__activation logistic == classifier__estimator__activation logistic
classifier__estimator__alpha 0.0001 == classifier__estimator__alpha 0.0001
classifier__estimator__early_stopping True == classifier__estimator__early_stopping True
classifier__estimator__hidden_layer_sizes (200, 100) == classifier__estimator__hidden_layer_sizes (200, 100)
classifier__estimator__learning_rate constant == classifier__estimator__learning_rate constant
classifier__estimator__learning_rate_init 0.0001 == classifier__estimator__learning_rate_init 0.0001
classifier__estimator__max_iter 1000 == classifier__estimator__max_iter 1000
classifier__estimator__momentum 0.8999999999999999 == classifier__estimator__momentum 0.8999999999999999
classifier__estimator__solver adam == classifier__estimator__solver adam
------------------------------------------------------------------
classifier__estimator MLPClassifier() == classifier__estimator MLPClassifier()
classifier__estimator__activation logistic == classifier__estimator__activation logistic
classifier__estimator__alpha 0.0001 == classifier__estimator__alpha 0.0001
classifier__estimator__early_stopping True == classifier__estimator__early_stopping True
classifier__estimator__hidden_layer_sizes (200, 100) == classifier__estimator__hidden_layer_sizes (200, 100)
classifier__estimator__learning_rate constant == classifier__estimator__learning_rate constant
classifier__estimator__learning_rate_init 0.0001 == classifier__estimator__learning_rate_init 0.0001
classifier__estimator__max_iter 1000 == classifier__estimator__max_iter 1000
classifier__estimator__momentum 0.8999999999999999 == classifier__estimator__momentum 0.8999999999999999
classifier__estimator__solver sgd == classifier__estimator__solver sgd
------------------------------------------------------------------
classifier__estimator MLPClassifier() == classifier__estimator MLPClassifier()
classifier__estimator__activation logistic == classifier__estimator__activation logistic
classifier__estimator__alpha 0.0001 == classifier__estimator__alpha 0.0001
classifier__estimator__early_stopping True == classifier__estimator__early_stopping True
classifier__estimator__hidden_layer_sizes (200, 100) == classifier__estimator__hidden_layer_sizes (200, 100)
classifier__estimator__learning_rate constant == classifier__estimator__learning_rate constant
classifier__estimator__learning_rate_init 0.001 == classifier__estimator__learning_rate_init 0.001
classifier__estimator__max_iter 1000 == classifier__estimator__max_iter 1000
classifier__estimator__momentum 0.0 == classifier__estimator__momentum 0.0
classifier__estimator__solver adam == classifier__estimator__solver adam
------------------------------------------------------------------
classifier__estimator MLPClassifier() == classifier__estimator MLPClassifier()
classifier__estimator__activation logistic == classifier__estimator__activation logistic
classifier__estimator__alpha 0.0001 == classifier__estimator__alpha 0.0001
classifier__estimator__early_stopping True == classifier__estimator__early_stopping True
classifier__estimator__hidden_layer_sizes (200, 100) == classifier__estimator__hidden_layer_sizes (200, 100)
classifier__estimator__learning_rate constant == classifier__estimator__learning_rate constant
classifier__estimator__learning_rate_init 0.001 == classifier__estimator__learning_rate_init 0.001
classifier__estimator__max_iter 1000 == classifier__estimator__max_iter 1000
classifier__estimator__momentum 0.0 == classifier__estimator__momentum 0.0
classifier__estimator__solver sgd == classifier__estimator__solver sgd
------------------------------------------------------------------
classifier__estimator MLPClassifier() == classifier__estimator MLPClassifier()
classifier__estimator__activation logistic == classifier__estimator__activation logistic
classifier__estimator__alpha 0.0001 == classifier__estimator__alpha 0.0001
classifier__estimator__early_stopping True == classifier__estimator__early_stopping True
classifier__estimator__hidden_layer_sizes (200, 100) == classifier__estimator__hidden_layer_sizes (200, 100)
classifier__estimator__learning_rate constant == classifier__estimator__learning_rate constant
classifier__estimator__learning_rate_init 0.001 == classifier__estimator__learning_rate_init 0.001
classifier__estimator__max_iter 1000 == classifier__estimator__max_iter 1000
classifier__estimator__momentum 0.3 == classifier__estimator__momentum 0.3
classifier__estimator__solver adam == classifier__estimator__solver adam
------------------------------------------------------------------
classifier__estimator MLPClassifier() == classifier__estimator MLPClassifier()
classifier__estimator__activation logistic == classifier__estimator__activation logistic
classifier__estimator__alpha 0.0001 == classifier__estimator__alpha 0.0001
classifier__estimator__early_stopping True == classifier__estimator__early_stopping True
classifier__estimator__hidden_layer_sizes (200, 100) == classifier__estimator__hidden_layer_sizes (200, 100)
classifier__estimator__learning_rate constant == classifier__estimator__learning_rate constant
classifier__estimator__learning_rate_init 0.001 == classifier__estimator__learning_rate_init 0.001
classifier__estimator__max_iter 1000 == classifier__estimator__max_iter 1000
classifier__estimator__momentum 0.3 == classifier__estimator__momentum 0.3
classifier__estimator__solver sgd == classifier__estimator__solver sgd
------------------------------------------------------------------
classifier__estimator MLPClassifier() == classifier__estimator MLPClassifier()
classifier__estimator__activation logistic == classifier__estimator__activation logistic
classifier__estimator__alpha 0.0001 == classifier__estimator__alpha 0.0001
classifier__estimator__early_stopping True == classifier__estimator__early_stopping True
classifier__estimator__hidden_layer_sizes (200, 100) == classifier__estimator__hidden_layer_sizes (200, 100)
classifier__estimator__learning_rate constant == classifier__estimator__learning_rate constant
classifier__estimator__learning_rate_init 0.001 == classifier__estimator__learning_rate_init 0.001
classifier__estimator__max_iter 1000 == classifier__estimator__max_iter 1000
classifier__estimator__momentum 0.6 == classifier__estimator__momentum 0.6
classifier__estimator__solver adam == classifier__estimator__solver adam
------------------------------------------------------------------
classifier__estimator MLPClassifier() == classifier__estimator MLPClassifier()
classifier__estimator__activation logistic == classifier__estimator__activation logistic
classifier__estimator__alpha 0.0001 == classifier__estimator__alpha 0.0001
classifier__estimator__early_stopping True == classifier__estimator__early_stopping True
classifier__estimator__hidden_layer_sizes (200, 100) == classifier__estimator__hidden_layer_sizes (200, 100)
classifier__estimator__learning_rate constant == classifier__estimator__learning_rate constant
classifier__estimator__learning_rate_init 0.001 == classifier__estimator__learning_rate_init 0.001
classifier__estimator__max_iter 1000 == classifier__estimator__max_iter 1000
classifier__estimator__momentum 0.6 == classifier__estimator__momentum 0.6
classifier__estimator__solver sgd == classifier__estimator__solver sgd
------------------------------------------------------------------
classifier__estimator MLPClassifier() == classifier__estimator MLPClassifier()
classifier__estimator__activation logistic == classifier__estimator__activation logistic
classifier__estimator__alpha 0.0001 == classifier__estimator__alpha 0.0001
classifier__estimator__early_stopping True == classifier__estimator__early_stopping True
classifier__estimator__hidden_layer_sizes (200, 100) == classifier__estimator__hidden_layer_sizes (200, 100)
classifier__estimator__learning_rate constant == classifier__estimator__learning_rate constant
classifier__estimator__learning_rate_init 0.001 == classifier__estimator__learning_rate_init 0.001
classifier__estimator__max_iter 1000 == classifier__estimator__max_iter 1000
classifier__estimator__momentum 0.8999999999999999 == classifier__estimator__momentum 0.8999999999999999
classifier__estimator__solver adam == classifier__estimator__solver adam
------------------------------------------------------------------
classifier__estimator MLPClassifier() == classifier__estimator MLPClassifier()
classifier__estimator__activation logistic == classifier__estimator__activation logistic
classifier__estimator__alpha 0.0001 == classifier__estimator__alpha 0.0001
classifier__estimator__early_stopping True == classifier__estimator__early_stopping True
classifier__estimator__hidden_layer_sizes (200, 100) == classifier__estimator__hidden_layer_sizes (200, 100)
classifier__estimator__learning_rate constant == classifier__estimator__learning_rate constant
classifier__estimator__learning_rate_init 0.001 == classifier__estimator__learning_rate_init 0.001
classifier__estimator__max_iter 1000 == classifier__estimator__max_iter 1000
classifier__estimator__momentum 0.8999999999999999 == classifier__estimator__momentum 0.8999999999999999
classifier__estimator__solver sgd == classifier__estimator__solver sgd
------------------------------------------------------------------
classifier__estimator MLPClassifier() == classifier__estimator MLPClassifier()
classifier__estimator__activation logistic == classifier__estimator__activation logistic
classifier__estimator__alpha 0.0001 == classifier__estimator__alpha 0.0001
classifier__estimator__early_stopping True == classifier__estimator__early_stopping True
classifier__estimator__hidden_layer_sizes (200, 100) == classifier__estimator__hidden_layer_sizes (200, 100)
classifier__estimator__learning_rate adaptive == classifier__estimator__learning_rate adaptive
classifier__estimator__learning_rate_init 0.0001 == classifier__estimator__learning_rate_init 0.0001
classifier__estimator__max_iter 1000 == classifier__estimator__max_iter 1000
classifier__estimator__momentum 0.0 == classifier__estimator__momentum 0.0
classifier__estimator__solver adam == classifier__estimator__solver adam
------------------------------------------------------------------
classifier__estimator MLPClassifier() == classifier__estimator MLPClassifier()
classifier__estimator__activation logistic == classifier__estimator__activation logistic
classifier__estimator__alpha 0.0001 == classifier__estimator__alpha 0.0001
classifier__estimator__early_stopping True == classifier__estimator__early_stopping True
classifier__estimator__hidden_layer_sizes (200, 100) == classifier__estimator__hidden_layer_sizes (200, 100)
classifier__estimator__learning_rate adaptive == classifier__estimator__learning_rate adaptive
classifier__estimator__learning_rate_init 0.0001 == classifier__estimator__learning_rate_init 0.0001
classifier__estimator__max_iter 1000 == classifier__estimator__max_iter 1000
classifier__estimator__momentum 0.0 == classifier__estimator__momentum 0.0
classifier__estimator__solver sgd == classifier__estimator__solver sgd
------------------------------------------------------------------
classifier__estimator MLPClassifier() == classifier__estimator MLPClassifier()
classifier__estimator__activation logistic == classifier__estimator__activation logistic
classifier__estimator__alpha 0.0001 == classifier__estimator__alpha 0.0001
classifier__estimator__early_stopping True == classifier__estimator__early_stopping True
classifier__estimator__hidden_layer_sizes (200, 100) == classifier__estimator__hidden_layer_sizes (200, 100)
classifier__estimator__learning_rate adaptive == classifier__estimator__learning_rate adaptive
classifier__estimator__learning_rate_init 0.0001 == classifier__estimator__learning_rate_init 0.0001
classifier__estimator__max_iter 1000 == classifier__estimator__max_iter 1000
classifier__estimator__momentum 0.3 == classifier__estimator__momentum 0.3
classifier__estimator__solver adam == classifier__estimator__solver adam
------------------------------------------------------------------
classifier__estimator MLPClassifier() == classifier__estimator MLPClassifier()
classifier__estimator__activation logistic == classifier__estimator__activation logistic
classifier__estimator__alpha 0.0001 == classifier__estimator__alpha 0.0001
classifier__estimator__early_stopping True == classifier__estimator__early_stopping True
classifier__estimator__hidden_layer_sizes (200, 100) == classifier__estimator__hidden_layer_sizes (200, 100)
classifier__estimator__learning_rate adaptive == classifier__estimator__learning_rate adaptive
classifier__estimator__learning_rate_init 0.0001 == classifier__estimator__learning_rate_init 0.0001
classifier__estimator__max_iter 1000 == classifier__estimator__max_iter 1000
classifier__estimator__momentum 0.3 == classifier__estimator__momentum 0.3
classifier__estimator__solver sgd == classifier__estimator__solver sgd
------------------------------------------------------------------
classifier__estimator MLPClassifier() == classifier__estimator MLPClassifier()
classifier__estimator__activation logistic == classifier__estimator__activation logistic
classifier__estimator__alpha 0.0001 == classifier__estimator__alpha 0.0001
classifier__estimator__early_stopping True == classifier__estimator__early_stopping True
classifier__estimator__hidden_layer_sizes (200, 100) == classifier__estimator__hidden_layer_sizes (200, 100)
classifier__estimator__learning_rate adaptive == classifier__estimator__learning_rate adaptive
classifier__estimator__learning_rate_init 0.0001 == classifier__estimator__learning_rate_init 0.0001
classifier__estimator__max_iter 1000 == classifier__estimator__max_iter 1000
classifier__estimator__momentum 0.6 == classifier__estimator__momentum 0.6
classifier__estimator__solver adam == classifier__estimator__solver adam
------------------------------------------------------------------
classifier__estimator MLPClassifier() == classifier__estimator MLPClassifier()
classifier__estimator__activation logistic == classifier__estimator__activation logistic
classifier__estimator__alpha 0.0001 == classifier__estimator__alpha 0.0001
classifier__estimator__early_stopping True == classifier__estimator__early_stopping True
classifier__estimator__hidden_layer_sizes (200, 100) == classifier__estimator__hidden_layer_sizes (200, 100)
classifier__estimator__learning_rate adaptive == classifier__estimator__learning_rate adaptive
classifier__estimator__learning_rate_init 0.0001 == classifier__estimator__learning_rate_init 0.0001
classifier__estimator__max_iter 1000 == classifier__estimator__max_iter 1000
classifier__estimator__momentum 0.6 == classifier__estimator__momentum 0.6
classifier__estimator__solver sgd == classifier__estimator__solver sgd
------------------------------------------------------------------
classifier__estimator MLPClassifier() == classifier__estimator MLPClassifier()
classifier__estimator__activation logistic == classifier__estimator__activation logistic
classifier__estimator__alpha 0.0001 == classifier__estimator__alpha 0.0001
classifier__estimator__early_stopping True == classifier__estimator__early_stopping True
classifier__estimator__hidden_layer_sizes (200, 100) == classifier__estimator__hidden_layer_sizes (200, 100)
classifier__estimator__learning_rate adaptive == classifier__estimator__learning_rate adaptive
classifier__estimator__learning_rate_init 0.0001 == classifier__estimator__learning_rate_init 0.0001
classifier__estimator__max_iter 1000 == classifier__estimator__max_iter 1000
classifier__estimator__momentum 0.8999999999999999 == classifier__estimator__momentum 0.8999999999999999
classifier__estimator__solver adam == classifier__estimator__solver adam
------------------------------------------------------------------
classifier__estimator MLPClassifier() == classifier__estimator MLPClassifier()
classifier__estimator__activation logistic == classifier__estimator__activation logistic
classifier__estimator__alpha 0.0001 == classifier__estimator__alpha 0.0001
classifier__estimator__early_stopping True == classifier__estimator__early_stopping True
classifier__estimator__hidden_layer_sizes (200, 100) == classifier__estimator__hidden_layer_sizes (200, 100)
classifier__estimator__learning_rate adaptive == classifier__estimator__learning_rate adaptive
classifier__estimator__learning_rate_init 0.0001 == classifier__estimator__learning_rate_init 0.0001
classifier__estimator__max_iter 1000 == classifier__estimator__max_iter 1000
classifier__estimator__momentum 0.8999999999999999 == classifier__estimator__momentum 0.8999999999999999
classifier__estimator__solver sgd == classifier__estimator__solver sgd
------------------------------------------------------------------
classifier__estimator MLPClassifier() == classifier__estimator MLPClassifier()
classifier__estimator__activation logistic == classifier__estimator__activation logistic
classifier__estimator__alpha 0.0001 == classifier__estimator__alpha 0.0001
classifier__estimator__early_stopping True == classifier__estimator__early_stopping True
classifier__estimator__hidden_layer_sizes (200, 100) == classifier__estimator__hidden_layer_sizes (200, 100)
classifier__estimator__learning_rate adaptive == classifier__estimator__learning_rate adaptive
classifier__estimator__learning_rate_init 0.001 == classifier__estimator__learning_rate_init 0.001
classifier__estimator__max_iter 1000 == classifier__estimator__max_iter 1000
classifier__estimator__momentum 0.0 == classifier__estimator__momentum 0.0
classifier__estimator__solver adam == classifier__estimator__solver adam
------------------------------------------------------------------
classifier__estimator MLPClassifier() == classifier__estimator MLPClassifier()
classifier__estimator__activation logistic == classifier__estimator__activation logistic
classifier__estimator__alpha 0.0001 == classifier__estimator__alpha 0.0001
classifier__estimator__early_stopping True == classifier__estimator__early_stopping True
classifier__estimator__hidden_layer_sizes (200, 100) == classifier__estimator__hidden_layer_sizes (200, 100)
classifier__estimator__learning_rate adaptive == classifier__estimator__learning_rate adaptive
classifier__estimator__learning_rate_init 0.001 == classifier__estimator__learning_rate_init 0.001
classifier__estimator__max_iter 1000 == classifier__estimator__max_iter 1000
classifier__estimator__momentum 0.0 == classifier__estimator__momentum 0.0
classifier__estimator__solver sgd == classifier__estimator__solver sgd
------------------------------------------------------------------
classifier__estimator MLPClassifier() == classifier__estimator MLPClassifier()
classifier__estimator__activation logistic == classifier__estimator__activation logistic
classifier__estimator__alpha 0.0001 == classifier__estimator__alpha 0.0001
classifier__estimator__early_stopping True == classifier__estimator__early_stopping True
classifier__estimator__hidden_layer_sizes (200, 100) == classifier__estimator__hidden_layer_sizes (200, 100)
classifier__estimator__learning_rate adaptive == classifier__estimator__learning_rate adaptive
classifier__estimator__learning_rate_init 0.001 == classifier__estimator__learning_rate_init 0.001
classifier__estimator__max_iter 1000 == classifier__estimator__max_iter 1000
classifier__estimator__momentum 0.3 == classifier__estimator__momentum 0.3
classifier__estimator__solver adam == classifier__estimator__solver adam
------------------------------------------------------------------
classifier__estimator MLPClassifier() == classifier__estimator MLPClassifier()
classifier__estimator__activation logistic == classifier__estimator__activation logistic
classifier__estimator__alpha 0.0001 == classifier__estimator__alpha 0.0001
classifier__estimator__early_stopping True == classifier__estimator__early_stopping True
classifier__estimator__hidden_layer_sizes (200, 100) == classifier__estimator__hidden_layer_sizes (200, 100)
classifier__estimator__learning_rate adaptive == classifier__estimator__learning_rate adaptive
classifier__estimator__learning_rate_init 0.001 == classifier__estimator__learning_rate_init 0.001
classifier__estimator__max_iter 1000 == classifier__estimator__max_iter 1000
classifier__estimator__momentum 0.3 == classifier__estimator__momentum 0.3
classifier__estimator__solver sgd == classifier__estimator__solver sgd
------------------------------------------------------------------
Removing already executed params object from candidate_params: {'classifier__estimator': MLPClassifier(), 'classifier__estimator__activation': 'logistic', 'classifier__estimator__alpha': 0.0001, 'classifier__estimator__early_stopping': True, 'classifier__estimator__hidden_layer_sizes': (200, 100), 'classifier__estimator__learning_rate': 'adaptive', 'classifier__estimator__learning_rate_init': 0.001, 'classifier__estimator__max_iter': 1000, 'classifier__estimator__momentum': 0.3, 'classifier__estimator__solver': 'sgd'}

Removing already executed params object from candidate_params: {'classifier__estimator': MLPClassifier(), 'classifier__estimator__activation': 'logistic', 'classifier__estimator__alpha': 0.0001, 'classifier__estimator__early_stopping': True, 'classifier__estimator__hidden_layer_sizes': (200, 100), 'classifier__estimator__learning_rate': 'adaptive', 'classifier__estimator__learning_rate_init': 0.001, 'classifier__estimator__max_iter': 1000, 'classifier__estimator__momentum': 0.3, 'classifier__estimator__solver': 'adam'}

Removing already executed params object from candidate_params: {'classifier__estimator': MLPClassifier(), 'classifier__estimator__activation': 'logistic', 'classifier__estimator__alpha': 0.0001, 'classifier__estimator__early_stopping': True, 'classifier__estimator__hidden_layer_sizes': (200, 100), 'classifier__estimator__learning_rate': 'adaptive', 'classifier__estimator__learning_rate_init': 0.001, 'classifier__estimator__max_iter': 1000, 'classifier__estimator__momentum': 0.0, 'classifier__estimator__solver': 'sgd'}

Removing already executed params object from candidate_params: {'classifier__estimator': MLPClassifier(), 'classifier__estimator__activation': 'logistic', 'classifier__estimator__alpha': 0.0001, 'classifier__estimator__early_stopping': True, 'classifier__estimator__hidden_layer_sizes': (200, 100), 'classifier__estimator__learning_rate': 'adaptive', 'classifier__estimator__learning_rate_init': 0.001, 'classifier__estimator__max_iter': 1000, 'classifier__estimator__momentum': 0.0, 'classifier__estimator__solver': 'adam'}

Removing already executed params object from candidate_params: {'classifier__estimator': MLPClassifier(), 'classifier__estimator__activation': 'logistic', 'classifier__estimator__alpha': 0.0001, 'classifier__estimator__early_stopping': True, 'classifier__estimator__hidden_layer_sizes': (200, 100), 'classifier__estimator__learning_rate': 'adaptive', 'classifier__estimator__learning_rate_init': 0.0001, 'classifier__estimator__max_iter': 1000, 'classifier__estimator__momentum': 0.8999999999999999, 'classifier__estimator__solver': 'sgd'}

Removing already executed params object from candidate_params: {'classifier__estimator': MLPClassifier(), 'classifier__estimator__activation': 'logistic', 'classifier__estimator__alpha': 0.0001, 'classifier__estimator__early_stopping': True, 'classifier__estimator__hidden_layer_sizes': (200, 100), 'classifier__estimator__learning_rate': 'adaptive', 'classifier__estimator__learning_rate_init': 0.0001, 'classifier__estimator__max_iter': 1000, 'classifier__estimator__momentum': 0.8999999999999999, 'classifier__estimator__solver': 'adam'}

Removing already executed params object from candidate_params: {'classifier__estimator': MLPClassifier(), 'classifier__estimator__activation': 'logistic', 'classifier__estimator__alpha': 0.0001, 'classifier__estimator__early_stopping': True, 'classifier__estimator__hidden_layer_sizes': (200, 100), 'classifier__estimator__learning_rate': 'adaptive', 'classifier__estimator__learning_rate_init': 0.0001, 'classifier__estimator__max_iter': 1000, 'classifier__estimator__momentum': 0.6, 'classifier__estimator__solver': 'sgd'}

Removing already executed params object from candidate_params: {'classifier__estimator': MLPClassifier(), 'classifier__estimator__activation': 'logistic', 'classifier__estimator__alpha': 0.0001, 'classifier__estimator__early_stopping': True, 'classifier__estimator__hidden_layer_sizes': (200, 100), 'classifier__estimator__learning_rate': 'adaptive', 'classifier__estimator__learning_rate_init': 0.0001, 'classifier__estimator__max_iter': 1000, 'classifier__estimator__momentum': 0.6, 'classifier__estimator__solver': 'adam'}

Removing already executed params object from candidate_params: {'classifier__estimator': MLPClassifier(), 'classifier__estimator__activation': 'logistic', 'classifier__estimator__alpha': 0.0001, 'classifier__estimator__early_stopping': True, 'classifier__estimator__hidden_layer_sizes': (200, 100), 'classifier__estimator__learning_rate': 'adaptive', 'classifier__estimator__learning_rate_init': 0.0001, 'classifier__estimator__max_iter': 1000, 'classifier__estimator__momentum': 0.3, 'classifier__estimator__solver': 'sgd'}

Removing already executed params object from candidate_params: {'classifier__estimator': MLPClassifier(), 'classifier__estimator__activation': 'logistic', 'classifier__estimator__alpha': 0.0001, 'classifier__estimator__early_stopping': True, 'classifier__estimator__hidden_layer_sizes': (200, 100), 'classifier__estimator__learning_rate': 'adaptive', 'classifier__estimator__learning_rate_init': 0.0001, 'classifier__estimator__max_iter': 1000, 'classifier__estimator__momentum': 0.3, 'classifier__estimator__solver': 'adam'}

Removing already executed params object from candidate_params: {'classifier__estimator': MLPClassifier(), 'classifier__estimator__activation': 'logistic', 'classifier__estimator__alpha': 0.0001, 'classifier__estimator__early_stopping': True, 'classifier__estimator__hidden_layer_sizes': (200, 100), 'classifier__estimator__learning_rate': 'adaptive', 'classifier__estimator__learning_rate_init': 0.0001, 'classifier__estimator__max_iter': 1000, 'classifier__estimator__momentum': 0.0, 'classifier__estimator__solver': 'sgd'}

Removing already executed params object from candidate_params: {'classifier__estimator': MLPClassifier(), 'classifier__estimator__activation': 'logistic', 'classifier__estimator__alpha': 0.0001, 'classifier__estimator__early_stopping': True, 'classifier__estimator__hidden_layer_sizes': (200, 100), 'classifier__estimator__learning_rate': 'adaptive', 'classifier__estimator__learning_rate_init': 0.0001, 'classifier__estimator__max_iter': 1000, 'classifier__estimator__momentum': 0.0, 'classifier__estimator__solver': 'adam'}

Removing already executed params object from candidate_params: {'classifier__estimator': MLPClassifier(), 'classifier__estimator__activation': 'logistic', 'classifier__estimator__alpha': 0.0001, 'classifier__estimator__early_stopping': True, 'classifier__estimator__hidden_layer_sizes': (200, 100), 'classifier__estimator__learning_rate': 'constant', 'classifier__estimator__learning_rate_init': 0.001, 'classifier__estimator__max_iter': 1000, 'classifier__estimator__momentum': 0.8999999999999999, 'classifier__estimator__solver': 'sgd'}

Removing already executed params object from candidate_params: {'classifier__estimator': MLPClassifier(), 'classifier__estimator__activation': 'logistic', 'classifier__estimator__alpha': 0.0001, 'classifier__estimator__early_stopping': True, 'classifier__estimator__hidden_layer_sizes': (200, 100), 'classifier__estimator__learning_rate': 'constant', 'classifier__estimator__learning_rate_init': 0.001, 'classifier__estimator__max_iter': 1000, 'classifier__estimator__momentum': 0.8999999999999999, 'classifier__estimator__solver': 'adam'}

Removing already executed params object from candidate_params: {'classifier__estimator': MLPClassifier(), 'classifier__estimator__activation': 'logistic', 'classifier__estimator__alpha': 0.0001, 'classifier__estimator__early_stopping': True, 'classifier__estimator__hidden_layer_sizes': (200, 100), 'classifier__estimator__learning_rate': 'constant', 'classifier__estimator__learning_rate_init': 0.001, 'classifier__estimator__max_iter': 1000, 'classifier__estimator__momentum': 0.6, 'classifier__estimator__solver': 'sgd'}

Removing already executed params object from candidate_params: {'classifier__estimator': MLPClassifier(), 'classifier__estimator__activation': 'logistic', 'classifier__estimator__alpha': 0.0001, 'classifier__estimator__early_stopping': True, 'classifier__estimator__hidden_layer_sizes': (200, 100), 'classifier__estimator__learning_rate': 'constant', 'classifier__estimator__learning_rate_init': 0.001, 'classifier__estimator__max_iter': 1000, 'classifier__estimator__momentum': 0.6, 'classifier__estimator__solver': 'adam'}

Removing already executed params object from candidate_params: {'classifier__estimator': MLPClassifier(), 'classifier__estimator__activation': 'logistic', 'classifier__estimator__alpha': 0.0001, 'classifier__estimator__early_stopping': True, 'classifier__estimator__hidden_layer_sizes': (200, 100), 'classifier__estimator__learning_rate': 'constant', 'classifier__estimator__learning_rate_init': 0.001, 'classifier__estimator__max_iter': 1000, 'classifier__estimator__momentum': 0.3, 'classifier__estimator__solver': 'sgd'}

Removing already executed params object from candidate_params: {'classifier__estimator': MLPClassifier(), 'classifier__estimator__activation': 'logistic', 'classifier__estimator__alpha': 0.0001, 'classifier__estimator__early_stopping': True, 'classifier__estimator__hidden_layer_sizes': (200, 100), 'classifier__estimator__learning_rate': 'constant', 'classifier__estimator__learning_rate_init': 0.001, 'classifier__estimator__max_iter': 1000, 'classifier__estimator__momentum': 0.3, 'classifier__estimator__solver': 'adam'}

Removing already executed params object from candidate_params: {'classifier__estimator': MLPClassifier(), 'classifier__estimator__activation': 'logistic', 'classifier__estimator__alpha': 0.0001, 'classifier__estimator__early_stopping': True, 'classifier__estimator__hidden_layer_sizes': (200, 100), 'classifier__estimator__learning_rate': 'constant', 'classifier__estimator__learning_rate_init': 0.001, 'classifier__estimator__max_iter': 1000, 'classifier__estimator__momentum': 0.0, 'classifier__estimator__solver': 'sgd'}

Removing already executed params object from candidate_params: {'classifier__estimator': MLPClassifier(), 'classifier__estimator__activation': 'logistic', 'classifier__estimator__alpha': 0.0001, 'classifier__estimator__early_stopping': True, 'classifier__estimator__hidden_layer_sizes': (200, 100), 'classifier__estimator__learning_rate': 'constant', 'classifier__estimator__learning_rate_init': 0.001, 'classifier__estimator__max_iter': 1000, 'classifier__estimator__momentum': 0.0, 'classifier__estimator__solver': 'adam'}

Removing already executed params object from candidate_params: {'classifier__estimator': MLPClassifier(), 'classifier__estimator__activation': 'logistic', 'classifier__estimator__alpha': 0.0001, 'classifier__estimator__early_stopping': True, 'classifier__estimator__hidden_layer_sizes': (200, 100), 'classifier__estimator__learning_rate': 'constant', 'classifier__estimator__learning_rate_init': 0.0001, 'classifier__estimator__max_iter': 1000, 'classifier__estimator__momentum': 0.8999999999999999, 'classifier__estimator__solver': 'sgd'}

Removing already executed params object from candidate_params: {'classifier__estimator': MLPClassifier(), 'classifier__estimator__activation': 'logistic', 'classifier__estimator__alpha': 0.0001, 'classifier__estimator__early_stopping': True, 'classifier__estimator__hidden_layer_sizes': (200, 100), 'classifier__estimator__learning_rate': 'constant', 'classifier__estimator__learning_rate_init': 0.0001, 'classifier__estimator__max_iter': 1000, 'classifier__estimator__momentum': 0.8999999999999999, 'classifier__estimator__solver': 'adam'}

Removing already executed params object from candidate_params: {'classifier__estimator': MLPClassifier(), 'classifier__estimator__activation': 'logistic', 'classifier__estimator__alpha': 0.0001, 'classifier__estimator__early_stopping': True, 'classifier__estimator__hidden_layer_sizes': (200, 100), 'classifier__estimator__learning_rate': 'constant', 'classifier__estimator__learning_rate_init': 0.0001, 'classifier__estimator__max_iter': 1000, 'classifier__estimator__momentum': 0.6, 'classifier__estimator__solver': 'sgd'}

Removing already executed params object from candidate_params: {'classifier__estimator': MLPClassifier(), 'classifier__estimator__activation': 'logistic', 'classifier__estimator__alpha': 0.0001, 'classifier__estimator__early_stopping': True, 'classifier__estimator__hidden_layer_sizes': (200, 100), 'classifier__estimator__learning_rate': 'constant', 'classifier__estimator__learning_rate_init': 0.0001, 'classifier__estimator__max_iter': 1000, 'classifier__estimator__momentum': 0.6, 'classifier__estimator__solver': 'adam'}

Removing already executed params object from candidate_params: {'classifier__estimator': MLPClassifier(), 'classifier__estimator__activation': 'logistic', 'classifier__estimator__alpha': 0.0001, 'classifier__estimator__early_stopping': True, 'classifier__estimator__hidden_layer_sizes': (200, 100), 'classifier__estimator__learning_rate': 'constant', 'classifier__estimator__learning_rate_init': 0.0001, 'classifier__estimator__max_iter': 1000, 'classifier__estimator__momentum': 0.3, 'classifier__estimator__solver': 'sgd'}

Removing already executed params object from candidate_params: {'classifier__estimator': MLPClassifier(), 'classifier__estimator__activation': 'logistic', 'classifier__estimator__alpha': 0.0001, 'classifier__estimator__early_stopping': True, 'classifier__estimator__hidden_layer_sizes': (200, 100), 'classifier__estimator__learning_rate': 'constant', 'classifier__estimator__learning_rate_init': 0.0001, 'classifier__estimator__max_iter': 1000, 'classifier__estimator__momentum': 0.3, 'classifier__estimator__solver': 'adam'}

Removing already executed params object from candidate_params: {'classifier__estimator': MLPClassifier(), 'classifier__estimator__activation': 'logistic', 'classifier__estimator__alpha': 0.0001, 'classifier__estimator__early_stopping': True, 'classifier__estimator__hidden_layer_sizes': (200, 100), 'classifier__estimator__learning_rate': 'constant', 'classifier__estimator__learning_rate_init': 0.0001, 'classifier__estimator__max_iter': 1000, 'classifier__estimator__momentum': 0.0, 'classifier__estimator__solver': 'sgd'}

Removing already executed params object from candidate_params: {'classifier__estimator': MLPClassifier(), 'classifier__estimator__activation': 'logistic', 'classifier__estimator__alpha': 0.0001, 'classifier__estimator__early_stopping': True, 'classifier__estimator__hidden_layer_sizes': (200, 100), 'classifier__estimator__learning_rate': 'constant', 'classifier__estimator__learning_rate_init': 0.0001, 'classifier__estimator__max_iter': 1000, 'classifier__estimator__momentum': 0.0, 'classifier__estimator__solver': 'adam'}

Removing already executed params object from candidate_params: {'classifier__estimator': MLPClassifier(), 'classifier__estimator__activation': 'logistic', 'classifier__estimator__alpha': 0.0001, 'classifier__estimator__early_stopping': True, 'classifier__estimator__hidden_layer_sizes': (100,), 'classifier__estimator__learning_rate': 'adaptive', 'classifier__estimator__learning_rate_init': 0.001, 'classifier__estimator__max_iter': 1000, 'classifier__estimator__momentum': 0.8999999999999999, 'classifier__estimator__solver': 'sgd'}

Removing already executed params object from candidate_params: {'classifier__estimator': MLPClassifier(), 'classifier__estimator__activation': 'logistic', 'classifier__estimator__alpha': 0.0001, 'classifier__estimator__early_stopping': True, 'classifier__estimator__hidden_layer_sizes': (100,), 'classifier__estimator__learning_rate': 'adaptive', 'classifier__estimator__learning_rate_init': 0.001, 'classifier__estimator__max_iter': 1000, 'classifier__estimator__momentum': 0.8999999999999999, 'classifier__estimator__solver': 'adam'}

Removing already executed params object from candidate_params: {'classifier__estimator': MLPClassifier(), 'classifier__estimator__activation': 'logistic', 'classifier__estimator__alpha': 0.0001, 'classifier__estimator__early_stopping': True, 'classifier__estimator__hidden_layer_sizes': (100,), 'classifier__estimator__learning_rate': 'adaptive', 'classifier__estimator__learning_rate_init': 0.001, 'classifier__estimator__max_iter': 1000, 'classifier__estimator__momentum': 0.6, 'classifier__estimator__solver': 'sgd'}

Removing already executed params object from candidate_params: {'classifier__estimator': MLPClassifier(), 'classifier__estimator__activation': 'logistic', 'classifier__estimator__alpha': 0.0001, 'classifier__estimator__early_stopping': True, 'classifier__estimator__hidden_layer_sizes': (100,), 'classifier__estimator__learning_rate': 'adaptive', 'classifier__estimator__learning_rate_init': 0.001, 'classifier__estimator__max_iter': 1000, 'classifier__estimator__momentum': 0.6, 'classifier__estimator__solver': 'adam'}

Removing already executed params object from candidate_params: {'classifier__estimator': MLPClassifier(), 'classifier__estimator__activation': 'logistic', 'classifier__estimator__alpha': 0.0001, 'classifier__estimator__early_stopping': True, 'classifier__estimator__hidden_layer_sizes': (100,), 'classifier__estimator__learning_rate': 'adaptive', 'classifier__estimator__learning_rate_init': 0.001, 'classifier__estimator__max_iter': 1000, 'classifier__estimator__momentum': 0.3, 'classifier__estimator__solver': 'sgd'}

Removing already executed params object from candidate_params: {'classifier__estimator': MLPClassifier(), 'classifier__estimator__activation': 'logistic', 'classifier__estimator__alpha': 0.0001, 'classifier__estimator__early_stopping': True, 'classifier__estimator__hidden_layer_sizes': (100,), 'classifier__estimator__learning_rate': 'adaptive', 'classifier__estimator__learning_rate_init': 0.001, 'classifier__estimator__max_iter': 1000, 'classifier__estimator__momentum': 0.3, 'classifier__estimator__solver': 'adam'}

Removing already executed params object from candidate_params: {'classifier__estimator': MLPClassifier(), 'classifier__estimator__activation': 'logistic', 'classifier__estimator__alpha': 0.0001, 'classifier__estimator__early_stopping': True, 'classifier__estimator__hidden_layer_sizes': (100,), 'classifier__estimator__learning_rate': 'adaptive', 'classifier__estimator__learning_rate_init': 0.001, 'classifier__estimator__max_iter': 1000, 'classifier__estimator__momentum': 0.0, 'classifier__estimator__solver': 'sgd'}

Removing already executed params object from candidate_params: {'classifier__estimator': MLPClassifier(), 'classifier__estimator__activation': 'logistic', 'classifier__estimator__alpha': 0.0001, 'classifier__estimator__early_stopping': True, 'classifier__estimator__hidden_layer_sizes': (100,), 'classifier__estimator__learning_rate': 'adaptive', 'classifier__estimator__learning_rate_init': 0.001, 'classifier__estimator__max_iter': 1000, 'classifier__estimator__momentum': 0.0, 'classifier__estimator__solver': 'adam'}

Removing already executed params object from candidate_params: {'classifier__estimator': MLPClassifier(), 'classifier__estimator__activation': 'logistic', 'classifier__estimator__alpha': 0.0001, 'classifier__estimator__early_stopping': True, 'classifier__estimator__hidden_layer_sizes': (100,), 'classifier__estimator__learning_rate': 'adaptive', 'classifier__estimator__learning_rate_init': 0.0001, 'classifier__estimator__max_iter': 1000, 'classifier__estimator__momentum': 0.8999999999999999, 'classifier__estimator__solver': 'sgd'}

Removing already executed params object from candidate_params: {'classifier__estimator': MLPClassifier(), 'classifier__estimator__activation': 'logistic', 'classifier__estimator__alpha': 0.0001, 'classifier__estimator__early_stopping': True, 'classifier__estimator__hidden_layer_sizes': (100,), 'classifier__estimator__learning_rate': 'adaptive', 'classifier__estimator__learning_rate_init': 0.0001, 'classifier__estimator__max_iter': 1000, 'classifier__estimator__momentum': 0.8999999999999999, 'classifier__estimator__solver': 'adam'}

Removing already executed params object from candidate_params: {'classifier__estimator': MLPClassifier(), 'classifier__estimator__activation': 'logistic', 'classifier__estimator__alpha': 0.0001, 'classifier__estimator__early_stopping': True, 'classifier__estimator__hidden_layer_sizes': (100,), 'classifier__estimator__learning_rate': 'adaptive', 'classifier__estimator__learning_rate_init': 0.0001, 'classifier__estimator__max_iter': 1000, 'classifier__estimator__momentum': 0.6, 'classifier__estimator__solver': 'sgd'}

Removing already executed params object from candidate_params: {'classifier__estimator': MLPClassifier(), 'classifier__estimator__activation': 'logistic', 'classifier__estimator__alpha': 0.0001, 'classifier__estimator__early_stopping': True, 'classifier__estimator__hidden_layer_sizes': (100,), 'classifier__estimator__learning_rate': 'adaptive', 'classifier__estimator__learning_rate_init': 0.0001, 'classifier__estimator__max_iter': 1000, 'classifier__estimator__momentum': 0.6, 'classifier__estimator__solver': 'adam'}

Removing already executed params object from candidate_params: {'classifier__estimator': MLPClassifier(), 'classifier__estimator__activation': 'logistic', 'classifier__estimator__alpha': 0.0001, 'classifier__estimator__early_stopping': True, 'classifier__estimator__hidden_layer_sizes': (100,), 'classifier__estimator__learning_rate': 'adaptive', 'classifier__estimator__learning_rate_init': 0.0001, 'classifier__estimator__max_iter': 1000, 'classifier__estimator__momentum': 0.3, 'classifier__estimator__solver': 'sgd'}

Removing already executed params object from candidate_params: {'classifier__estimator': MLPClassifier(), 'classifier__estimator__activation': 'logistic', 'classifier__estimator__alpha': 0.0001, 'classifier__estimator__early_stopping': True, 'classifier__estimator__hidden_layer_sizes': (100,), 'classifier__estimator__learning_rate': 'adaptive', 'classifier__estimator__learning_rate_init': 0.0001, 'classifier__estimator__max_iter': 1000, 'classifier__estimator__momentum': 0.3, 'classifier__estimator__solver': 'adam'}

Removing already executed params object from candidate_params: {'classifier__estimator': MLPClassifier(), 'classifier__estimator__activation': 'logistic', 'classifier__estimator__alpha': 0.0001, 'classifier__estimator__early_stopping': True, 'classifier__estimator__hidden_layer_sizes': (100,), 'classifier__estimator__learning_rate': 'adaptive', 'classifier__estimator__learning_rate_init': 0.0001, 'classifier__estimator__max_iter': 1000, 'classifier__estimator__momentum': 0.0, 'classifier__estimator__solver': 'sgd'}

Removing already executed params object from candidate_params: {'classifier__estimator': MLPClassifier(), 'classifier__estimator__activation': 'logistic', 'classifier__estimator__alpha': 0.0001, 'classifier__estimator__early_stopping': True, 'classifier__estimator__hidden_layer_sizes': (100,), 'classifier__estimator__learning_rate': 'adaptive', 'classifier__estimator__learning_rate_init': 0.0001, 'classifier__estimator__max_iter': 1000, 'classifier__estimator__momentum': 0.0, 'classifier__estimator__solver': 'adam'}

Removing already executed params object from candidate_params: {'classifier__estimator': MLPClassifier(), 'classifier__estimator__activation': 'logistic', 'classifier__estimator__alpha': 0.0001, 'classifier__estimator__early_stopping': True, 'classifier__estimator__hidden_layer_sizes': (100,), 'classifier__estimator__learning_rate': 'constant', 'classifier__estimator__learning_rate_init': 0.001, 'classifier__estimator__max_iter': 1000, 'classifier__estimator__momentum': 0.8999999999999999, 'classifier__estimator__solver': 'sgd'}

Removing already executed params object from candidate_params: {'classifier__estimator': MLPClassifier(), 'classifier__estimator__activation': 'logistic', 'classifier__estimator__alpha': 0.0001, 'classifier__estimator__early_stopping': True, 'classifier__estimator__hidden_layer_sizes': (100,), 'classifier__estimator__learning_rate': 'constant', 'classifier__estimator__learning_rate_init': 0.001, 'classifier__estimator__max_iter': 1000, 'classifier__estimator__momentum': 0.8999999999999999, 'classifier__estimator__solver': 'adam'}

Removing already executed params object from candidate_params: {'classifier__estimator': MLPClassifier(), 'classifier__estimator__activation': 'logistic', 'classifier__estimator__alpha': 0.0001, 'classifier__estimator__early_stopping': True, 'classifier__estimator__hidden_layer_sizes': (100,), 'classifier__estimator__learning_rate': 'constant', 'classifier__estimator__learning_rate_init': 0.001, 'classifier__estimator__max_iter': 1000, 'classifier__estimator__momentum': 0.6, 'classifier__estimator__solver': 'sgd'}

Removing already executed params object from candidate_params: {'classifier__estimator': MLPClassifier(), 'classifier__estimator__activation': 'logistic', 'classifier__estimator__alpha': 0.0001, 'classifier__estimator__early_stopping': True, 'classifier__estimator__hidden_layer_sizes': (100,), 'classifier__estimator__learning_rate': 'constant', 'classifier__estimator__learning_rate_init': 0.001, 'classifier__estimator__max_iter': 1000, 'classifier__estimator__momentum': 0.6, 'classifier__estimator__solver': 'adam'}

Removing already executed params object from candidate_params: {'classifier__estimator': MLPClassifier(), 'classifier__estimator__activation': 'logistic', 'classifier__estimator__alpha': 0.0001, 'classifier__estimator__early_stopping': True, 'classifier__estimator__hidden_layer_sizes': (100,), 'classifier__estimator__learning_rate': 'constant', 'classifier__estimator__learning_rate_init': 0.001, 'classifier__estimator__max_iter': 1000, 'classifier__estimator__momentum': 0.3, 'classifier__estimator__solver': 'sgd'}

Removing already executed params object from candidate_params: {'classifier__estimator': MLPClassifier(), 'classifier__estimator__activation': 'logistic', 'classifier__estimator__alpha': 0.0001, 'classifier__estimator__early_stopping': True, 'classifier__estimator__hidden_layer_sizes': (100,), 'classifier__estimator__learning_rate': 'constant', 'classifier__estimator__learning_rate_init': 0.001, 'classifier__estimator__max_iter': 1000, 'classifier__estimator__momentum': 0.3, 'classifier__estimator__solver': 'adam'}

Removing already executed params object from candidate_params: {'classifier__estimator': MLPClassifier(), 'classifier__estimator__activation': 'logistic', 'classifier__estimator__alpha': 0.0001, 'classifier__estimator__early_stopping': True, 'classifier__estimator__hidden_layer_sizes': (100,), 'classifier__estimator__learning_rate': 'constant', 'classifier__estimator__learning_rate_init': 0.001, 'classifier__estimator__max_iter': 1000, 'classifier__estimator__momentum': 0.0, 'classifier__estimator__solver': 'sgd'}

Removing already executed params object from candidate_params: {'classifier__estimator': MLPClassifier(), 'classifier__estimator__activation': 'logistic', 'classifier__estimator__alpha': 0.0001, 'classifier__estimator__early_stopping': True, 'classifier__estimator__hidden_layer_sizes': (100,), 'classifier__estimator__learning_rate': 'constant', 'classifier__estimator__learning_rate_init': 0.001, 'classifier__estimator__max_iter': 1000, 'classifier__estimator__momentum': 0.0, 'classifier__estimator__solver': 'adam'}

Removing already executed params object from candidate_params: {'classifier__estimator': MLPClassifier(), 'classifier__estimator__activation': 'logistic', 'classifier__estimator__alpha': 0.0001, 'classifier__estimator__early_stopping': True, 'classifier__estimator__hidden_layer_sizes': (100,), 'classifier__estimator__learning_rate': 'constant', 'classifier__estimator__learning_rate_init': 0.0001, 'classifier__estimator__max_iter': 1000, 'classifier__estimator__momentum': 0.8999999999999999, 'classifier__estimator__solver': 'sgd'}

Removing already executed params object from candidate_params: {'classifier__estimator': MLPClassifier(), 'classifier__estimator__activation': 'logistic', 'classifier__estimator__alpha': 0.0001, 'classifier__estimator__early_stopping': True, 'classifier__estimator__hidden_layer_sizes': (100,), 'classifier__estimator__learning_rate': 'constant', 'classifier__estimator__learning_rate_init': 0.0001, 'classifier__estimator__max_iter': 1000, 'classifier__estimator__momentum': 0.8999999999999999, 'classifier__estimator__solver': 'adam'}

Removing already executed params object from candidate_params: {'classifier__estimator': MLPClassifier(), 'classifier__estimator__activation': 'logistic', 'classifier__estimator__alpha': 0.0001, 'classifier__estimator__early_stopping': True, 'classifier__estimator__hidden_layer_sizes': (100,), 'classifier__estimator__learning_rate': 'constant', 'classifier__estimator__learning_rate_init': 0.0001, 'classifier__estimator__max_iter': 1000, 'classifier__estimator__momentum': 0.6, 'classifier__estimator__solver': 'sgd'}

Removing already executed params object from candidate_params: {'classifier__estimator': MLPClassifier(), 'classifier__estimator__activation': 'logistic', 'classifier__estimator__alpha': 0.0001, 'classifier__estimator__early_stopping': True, 'classifier__estimator__hidden_layer_sizes': (100,), 'classifier__estimator__learning_rate': 'constant', 'classifier__estimator__learning_rate_init': 0.0001, 'classifier__estimator__max_iter': 1000, 'classifier__estimator__momentum': 0.6, 'classifier__estimator__solver': 'adam'}

Removing already executed params object from candidate_params: {'classifier__estimator': MLPClassifier(), 'classifier__estimator__activation': 'logistic', 'classifier__estimator__alpha': 0.0001, 'classifier__estimator__early_stopping': True, 'classifier__estimator__hidden_layer_sizes': (100,), 'classifier__estimator__learning_rate': 'constant', 'classifier__estimator__learning_rate_init': 0.0001, 'classifier__estimator__max_iter': 1000, 'classifier__estimator__momentum': 0.3, 'classifier__estimator__solver': 'sgd'}

Removing already executed params object from candidate_params: {'classifier__estimator': MLPClassifier(), 'classifier__estimator__activation': 'logistic', 'classifier__estimator__alpha': 0.0001, 'classifier__estimator__early_stopping': True, 'classifier__estimator__hidden_layer_sizes': (100,), 'classifier__estimator__learning_rate': 'constant', 'classifier__estimator__learning_rate_init': 0.0001, 'classifier__estimator__max_iter': 1000, 'classifier__estimator__momentum': 0.3, 'classifier__estimator__solver': 'adam'}

Removing already executed params object from candidate_params: {'classifier__estimator': MLPClassifier(), 'classifier__estimator__activation': 'logistic', 'classifier__estimator__alpha': 0.0001, 'classifier__estimator__early_stopping': True, 'classifier__estimator__hidden_layer_sizes': (100,), 'classifier__estimator__learning_rate': 'constant', 'classifier__estimator__learning_rate_init': 0.0001, 'classifier__estimator__max_iter': 1000, 'classifier__estimator__momentum': 0.0, 'classifier__estimator__solver': 'sgd'}

Removing already executed params object from candidate_params: {'classifier__estimator': MLPClassifier(), 'classifier__estimator__activation': 'logistic', 'classifier__estimator__alpha': 0.0001, 'classifier__estimator__early_stopping': True, 'classifier__estimator__hidden_layer_sizes': (100,), 'classifier__estimator__learning_rate': 'constant', 'classifier__estimator__learning_rate_init': 0.0001, 'classifier__estimator__max_iter': 1000, 'classifier__estimator__momentum': 0.0, 'classifier__estimator__solver': 'adam'}

Removing already executed params object from candidate_params: {'classifier__estimator': MLPClassifier(), 'classifier__estimator__activation': 'logistic', 'classifier__estimator__alpha': 0.0001, 'classifier__estimator__early_stopping': True, 'classifier__estimator__hidden_layer_sizes': (50, 100, 50), 'classifier__estimator__learning_rate': 'adaptive', 'classifier__estimator__learning_rate_init': 0.001, 'classifier__estimator__max_iter': 1000, 'classifier__estimator__momentum': 0.8999999999999999, 'classifier__estimator__solver': 'sgd'}

Removing already executed params object from candidate_params: {'classifier__estimator': MLPClassifier(), 'classifier__estimator__activation': 'logistic', 'classifier__estimator__alpha': 0.0001, 'classifier__estimator__early_stopping': True, 'classifier__estimator__hidden_layer_sizes': (50, 100, 50), 'classifier__estimator__learning_rate': 'adaptive', 'classifier__estimator__learning_rate_init': 0.001, 'classifier__estimator__max_iter': 1000, 'classifier__estimator__momentum': 0.8999999999999999, 'classifier__estimator__solver': 'adam'}

Removing already executed params object from candidate_params: {'classifier__estimator': MLPClassifier(), 'classifier__estimator__activation': 'logistic', 'classifier__estimator__alpha': 0.0001, 'classifier__estimator__early_stopping': True, 'classifier__estimator__hidden_layer_sizes': (50, 100, 50), 'classifier__estimator__learning_rate': 'adaptive', 'classifier__estimator__learning_rate_init': 0.001, 'classifier__estimator__max_iter': 1000, 'classifier__estimator__momentum': 0.6, 'classifier__estimator__solver': 'sgd'}

Removing already executed params object from candidate_params: {'classifier__estimator': MLPClassifier(), 'classifier__estimator__activation': 'logistic', 'classifier__estimator__alpha': 0.0001, 'classifier__estimator__early_stopping': True, 'classifier__estimator__hidden_layer_sizes': (50, 100, 50), 'classifier__estimator__learning_rate': 'adaptive', 'classifier__estimator__learning_rate_init': 0.001, 'classifier__estimator__max_iter': 1000, 'classifier__estimator__momentum': 0.6, 'classifier__estimator__solver': 'adam'}

Removing already executed params object from candidate_params: {'classifier__estimator': MLPClassifier(), 'classifier__estimator__activation': 'logistic', 'classifier__estimator__alpha': 0.0001, 'classifier__estimator__early_stopping': True, 'classifier__estimator__hidden_layer_sizes': (50, 100, 50), 'classifier__estimator__learning_rate': 'adaptive', 'classifier__estimator__learning_rate_init': 0.001, 'classifier__estimator__max_iter': 1000, 'classifier__estimator__momentum': 0.3, 'classifier__estimator__solver': 'sgd'}

Removing already executed params object from candidate_params: {'classifier__estimator': MLPClassifier(), 'classifier__estimator__activation': 'logistic', 'classifier__estimator__alpha': 0.0001, 'classifier__estimator__early_stopping': True, 'classifier__estimator__hidden_layer_sizes': (50, 100, 50), 'classifier__estimator__learning_rate': 'adaptive', 'classifier__estimator__learning_rate_init': 0.001, 'classifier__estimator__max_iter': 1000, 'classifier__estimator__momentum': 0.3, 'classifier__estimator__solver': 'adam'}

Removing already executed params object from candidate_params: {'classifier__estimator': MLPClassifier(), 'classifier__estimator__activation': 'logistic', 'classifier__estimator__alpha': 0.0001, 'classifier__estimator__early_stopping': True, 'classifier__estimator__hidden_layer_sizes': (50, 100, 50), 'classifier__estimator__learning_rate': 'adaptive', 'classifier__estimator__learning_rate_init': 0.001, 'classifier__estimator__max_iter': 1000, 'classifier__estimator__momentum': 0.0, 'classifier__estimator__solver': 'sgd'}

Removing already executed params object from candidate_params: {'classifier__estimator': MLPClassifier(), 'classifier__estimator__activation': 'logistic', 'classifier__estimator__alpha': 0.0001, 'classifier__estimator__early_stopping': True, 'classifier__estimator__hidden_layer_sizes': (50, 100, 50), 'classifier__estimator__learning_rate': 'adaptive', 'classifier__estimator__learning_rate_init': 0.001, 'classifier__estimator__max_iter': 1000, 'classifier__estimator__momentum': 0.0, 'classifier__estimator__solver': 'adam'}

Removing already executed params object from candidate_params: {'classifier__estimator': MLPClassifier(), 'classifier__estimator__activation': 'logistic', 'classifier__estimator__alpha': 0.0001, 'classifier__estimator__early_stopping': True, 'classifier__estimator__hidden_layer_sizes': (50, 100, 50), 'classifier__estimator__learning_rate': 'adaptive', 'classifier__estimator__learning_rate_init': 0.0001, 'classifier__estimator__max_iter': 1000, 'classifier__estimator__momentum': 0.8999999999999999, 'classifier__estimator__solver': 'sgd'}

Removing already executed params object from candidate_params: {'classifier__estimator': MLPClassifier(), 'classifier__estimator__activation': 'logistic', 'classifier__estimator__alpha': 0.0001, 'classifier__estimator__early_stopping': True, 'classifier__estimator__hidden_layer_sizes': (50, 100, 50), 'classifier__estimator__learning_rate': 'adaptive', 'classifier__estimator__learning_rate_init': 0.0001, 'classifier__estimator__max_iter': 1000, 'classifier__estimator__momentum': 0.8999999999999999, 'classifier__estimator__solver': 'adam'}

Removing already executed params object from candidate_params: {'classifier__estimator': MLPClassifier(), 'classifier__estimator__activation': 'logistic', 'classifier__estimator__alpha': 0.0001, 'classifier__estimator__early_stopping': True, 'classifier__estimator__hidden_layer_sizes': (50, 100, 50), 'classifier__estimator__learning_rate': 'adaptive', 'classifier__estimator__learning_rate_init': 0.0001, 'classifier__estimator__max_iter': 1000, 'classifier__estimator__momentum': 0.6, 'classifier__estimator__solver': 'sgd'}

Removing already executed params object from candidate_params: {'classifier__estimator': MLPClassifier(), 'classifier__estimator__activation': 'logistic', 'classifier__estimator__alpha': 0.0001, 'classifier__estimator__early_stopping': True, 'classifier__estimator__hidden_layer_sizes': (50, 100, 50), 'classifier__estimator__learning_rate': 'adaptive', 'classifier__estimator__learning_rate_init': 0.0001, 'classifier__estimator__max_iter': 1000, 'classifier__estimator__momentum': 0.6, 'classifier__estimator__solver': 'adam'}

Removing already executed params object from candidate_params: {'classifier__estimator': MLPClassifier(), 'classifier__estimator__activation': 'logistic', 'classifier__estimator__alpha': 0.0001, 'classifier__estimator__early_stopping': True, 'classifier__estimator__hidden_layer_sizes': (50, 100, 50), 'classifier__estimator__learning_rate': 'adaptive', 'classifier__estimator__learning_rate_init': 0.0001, 'classifier__estimator__max_iter': 1000, 'classifier__estimator__momentum': 0.3, 'classifier__estimator__solver': 'sgd'}

Removing already executed params object from candidate_params: {'classifier__estimator': MLPClassifier(), 'classifier__estimator__activation': 'logistic', 'classifier__estimator__alpha': 0.0001, 'classifier__estimator__early_stopping': True, 'classifier__estimator__hidden_layer_sizes': (50, 100, 50), 'classifier__estimator__learning_rate': 'adaptive', 'classifier__estimator__learning_rate_init': 0.0001, 'classifier__estimator__max_iter': 1000, 'classifier__estimator__momentum': 0.3, 'classifier__estimator__solver': 'adam'}

Removing already executed params object from candidate_params: {'classifier__estimator': MLPClassifier(), 'classifier__estimator__activation': 'logistic', 'classifier__estimator__alpha': 0.0001, 'classifier__estimator__early_stopping': True, 'classifier__estimator__hidden_layer_sizes': (50, 100, 50), 'classifier__estimator__learning_rate': 'adaptive', 'classifier__estimator__learning_rate_init': 0.0001, 'classifier__estimator__max_iter': 1000, 'classifier__estimator__momentum': 0.0, 'classifier__estimator__solver': 'sgd'}

Removing already executed params object from candidate_params: {'classifier__estimator': MLPClassifier(), 'classifier__estimator__activation': 'logistic', 'classifier__estimator__alpha': 0.0001, 'classifier__estimator__early_stopping': True, 'classifier__estimator__hidden_layer_sizes': (50, 100, 50), 'classifier__estimator__learning_rate': 'adaptive', 'classifier__estimator__learning_rate_init': 0.0001, 'classifier__estimator__max_iter': 1000, 'classifier__estimator__momentum': 0.0, 'classifier__estimator__solver': 'adam'}

Removing already executed params object from candidate_params: {'classifier__estimator': MLPClassifier(), 'classifier__estimator__activation': 'logistic', 'classifier__estimator__alpha': 0.0001, 'classifier__estimator__early_stopping': True, 'classifier__estimator__hidden_layer_sizes': (50, 100, 50), 'classifier__estimator__learning_rate': 'constant', 'classifier__estimator__learning_rate_init': 0.001, 'classifier__estimator__max_iter': 1000, 'classifier__estimator__momentum': 0.8999999999999999, 'classifier__estimator__solver': 'sgd'}

Removing already executed params object from candidate_params: {'classifier__estimator': MLPClassifier(), 'classifier__estimator__activation': 'logistic', 'classifier__estimator__alpha': 0.0001, 'classifier__estimator__early_stopping': True, 'classifier__estimator__hidden_layer_sizes': (50, 100, 50), 'classifier__estimator__learning_rate': 'constant', 'classifier__estimator__learning_rate_init': 0.001, 'classifier__estimator__max_iter': 1000, 'classifier__estimator__momentum': 0.8999999999999999, 'classifier__estimator__solver': 'adam'}

Removing already executed params object from candidate_params: {'classifier__estimator': MLPClassifier(), 'classifier__estimator__activation': 'logistic', 'classifier__estimator__alpha': 0.0001, 'classifier__estimator__early_stopping': True, 'classifier__estimator__hidden_layer_sizes': (50, 100, 50), 'classifier__estimator__learning_rate': 'constant', 'classifier__estimator__learning_rate_init': 0.001, 'classifier__estimator__max_iter': 1000, 'classifier__estimator__momentum': 0.6, 'classifier__estimator__solver': 'sgd'}

Removing already executed params object from candidate_params: {'classifier__estimator': MLPClassifier(), 'classifier__estimator__activation': 'logistic', 'classifier__estimator__alpha': 0.0001, 'classifier__estimator__early_stopping': True, 'classifier__estimator__hidden_layer_sizes': (50, 100, 50), 'classifier__estimator__learning_rate': 'constant', 'classifier__estimator__learning_rate_init': 0.001, 'classifier__estimator__max_iter': 1000, 'classifier__estimator__momentum': 0.6, 'classifier__estimator__solver': 'adam'}

Removing already executed params object from candidate_params: {'classifier__estimator': MLPClassifier(), 'classifier__estimator__activation': 'logistic', 'classifier__estimator__alpha': 0.0001, 'classifier__estimator__early_stopping': True, 'classifier__estimator__hidden_layer_sizes': (50, 100, 50), 'classifier__estimator__learning_rate': 'constant', 'classifier__estimator__learning_rate_init': 0.001, 'classifier__estimator__max_iter': 1000, 'classifier__estimator__momentum': 0.3, 'classifier__estimator__solver': 'sgd'}

Removing already executed params object from candidate_params: {'classifier__estimator': MLPClassifier(), 'classifier__estimator__activation': 'logistic', 'classifier__estimator__alpha': 0.0001, 'classifier__estimator__early_stopping': True, 'classifier__estimator__hidden_layer_sizes': (50, 100, 50), 'classifier__estimator__learning_rate': 'constant', 'classifier__estimator__learning_rate_init': 0.001, 'classifier__estimator__max_iter': 1000, 'classifier__estimator__momentum': 0.3, 'classifier__estimator__solver': 'adam'}

Removing already executed params object from candidate_params: {'classifier__estimator': MLPClassifier(), 'classifier__estimator__activation': 'logistic', 'classifier__estimator__alpha': 0.0001, 'classifier__estimator__early_stopping': True, 'classifier__estimator__hidden_layer_sizes': (50, 100, 50), 'classifier__estimator__learning_rate': 'constant', 'classifier__estimator__learning_rate_init': 0.001, 'classifier__estimator__max_iter': 1000, 'classifier__estimator__momentum': 0.0, 'classifier__estimator__solver': 'sgd'}

Removing already executed params object from candidate_params: {'classifier__estimator': MLPClassifier(), 'classifier__estimator__activation': 'logistic', 'classifier__estimator__alpha': 0.0001, 'classifier__estimator__early_stopping': True, 'classifier__estimator__hidden_layer_sizes': (50, 100, 50), 'classifier__estimator__learning_rate': 'constant', 'classifier__estimator__learning_rate_init': 0.001, 'classifier__estimator__max_iter': 1000, 'classifier__estimator__momentum': 0.0, 'classifier__estimator__solver': 'adam'}

Removing already executed params object from candidate_params: {'classifier__estimator': MLPClassifier(), 'classifier__estimator__activation': 'logistic', 'classifier__estimator__alpha': 0.0001, 'classifier__estimator__early_stopping': True, 'classifier__estimator__hidden_layer_sizes': (50, 100, 50), 'classifier__estimator__learning_rate': 'constant', 'classifier__estimator__learning_rate_init': 0.0001, 'classifier__estimator__max_iter': 1000, 'classifier__estimator__momentum': 0.8999999999999999, 'classifier__estimator__solver': 'sgd'}

Removing already executed params object from candidate_params: {'classifier__estimator': MLPClassifier(), 'classifier__estimator__activation': 'logistic', 'classifier__estimator__alpha': 0.0001, 'classifier__estimator__early_stopping': True, 'classifier__estimator__hidden_layer_sizes': (50, 100, 50), 'classifier__estimator__learning_rate': 'constant', 'classifier__estimator__learning_rate_init': 0.0001, 'classifier__estimator__max_iter': 1000, 'classifier__estimator__momentum': 0.8999999999999999, 'classifier__estimator__solver': 'adam'}

Removing already executed params object from candidate_params: {'classifier__estimator': MLPClassifier(), 'classifier__estimator__activation': 'logistic', 'classifier__estimator__alpha': 0.0001, 'classifier__estimator__early_stopping': True, 'classifier__estimator__hidden_layer_sizes': (50, 100, 50), 'classifier__estimator__learning_rate': 'constant', 'classifier__estimator__learning_rate_init': 0.0001, 'classifier__estimator__max_iter': 1000, 'classifier__estimator__momentum': 0.6, 'classifier__estimator__solver': 'sgd'}

Removing already executed params object from candidate_params: {'classifier__estimator': MLPClassifier(), 'classifier__estimator__activation': 'logistic', 'classifier__estimator__alpha': 0.0001, 'classifier__estimator__early_stopping': True, 'classifier__estimator__hidden_layer_sizes': (50, 100, 50), 'classifier__estimator__learning_rate': 'constant', 'classifier__estimator__learning_rate_init': 0.0001, 'classifier__estimator__max_iter': 1000, 'classifier__estimator__momentum': 0.6, 'classifier__estimator__solver': 'adam'}

Removing already executed params object from candidate_params: {'classifier__estimator': MLPClassifier(), 'classifier__estimator__activation': 'logistic', 'classifier__estimator__alpha': 0.0001, 'classifier__estimator__early_stopping': True, 'classifier__estimator__hidden_layer_sizes': (50, 100, 50), 'classifier__estimator__learning_rate': 'constant', 'classifier__estimator__learning_rate_init': 0.0001, 'classifier__estimator__max_iter': 1000, 'classifier__estimator__momentum': 0.3, 'classifier__estimator__solver': 'sgd'}

Removing already executed params object from candidate_params: {'classifier__estimator': MLPClassifier(), 'classifier__estimator__activation': 'logistic', 'classifier__estimator__alpha': 0.0001, 'classifier__estimator__early_stopping': True, 'classifier__estimator__hidden_layer_sizes': (50, 100, 50), 'classifier__estimator__learning_rate': 'constant', 'classifier__estimator__learning_rate_init': 0.0001, 'classifier__estimator__max_iter': 1000, 'classifier__estimator__momentum': 0.3, 'classifier__estimator__solver': 'adam'}

Removing already executed params object from candidate_params: {'classifier__estimator': MLPClassifier(), 'classifier__estimator__activation': 'logistic', 'classifier__estimator__alpha': 0.0001, 'classifier__estimator__early_stopping': True, 'classifier__estimator__hidden_layer_sizes': (50, 100, 50), 'classifier__estimator__learning_rate': 'constant', 'classifier__estimator__learning_rate_init': 0.0001, 'classifier__estimator__max_iter': 1000, 'classifier__estimator__momentum': 0.0, 'classifier__estimator__solver': 'sgd'}

Removing already executed params object from candidate_params: {'classifier__estimator': MLPClassifier(), 'classifier__estimator__activation': 'logistic', 'classifier__estimator__alpha': 0.0001, 'classifier__estimator__early_stopping': True, 'classifier__estimator__hidden_layer_sizes': (50, 100, 50), 'classifier__estimator__learning_rate': 'constant', 'classifier__estimator__learning_rate_init': 0.0001, 'classifier__estimator__max_iter': 1000, 'classifier__estimator__momentum': 0.0, 'classifier__estimator__solver': 'adam'}

Removing already executed params object from candidate_params: {'classifier__estimator': LinearSVC(), 'classifier__estimator__C': 1.0, 'classifier__estimator__class_weight': None, 'classifier__estimator__dual': False, 'classifier__estimator__max_iter': 10000, 'classifier__estimator__penalty': 'l2', 'classifier__estimator__random_state': 42}

Removing already executed params object from candidate_params: {'classifier__estimator': LinearSVC(), 'classifier__estimator__C': 1.0, 'classifier__estimator__class_weight': None, 'classifier__estimator__dual': False, 'classifier__estimator__max_iter': 10000, 'classifier__estimator__penalty': 'l1', 'classifier__estimator__random_state': 42}

Removing already executed params object from candidate_params: {'classifier__estimator': LinearSVC(), 'classifier__estimator__C': 1.0, 'classifier__estimator__class_weight': None, 'classifier__estimator__dual': False, 'classifier__estimator__max_iter': 1000, 'classifier__estimator__penalty': 'l2', 'classifier__estimator__random_state': 42}

Removing already executed params object from candidate_params: {'classifier__estimator': LinearSVC(), 'classifier__estimator__C': 1.0, 'classifier__estimator__class_weight': None, 'classifier__estimator__dual': False, 'classifier__estimator__max_iter': 1000, 'classifier__estimator__penalty': 'l1', 'classifier__estimator__random_state': 42}

Removing already executed params object from candidate_params: {'classifier__estimator': LinearSVC(), 'classifier__estimator__C': 1.0, 'classifier__estimator__class_weight': None, 'classifier__estimator__dual': False, 'classifier__estimator__max_iter': 100, 'classifier__estimator__penalty': 'l2', 'classifier__estimator__random_state': 42}

Removing already executed params object from candidate_params: {'classifier__estimator': LinearSVC(), 'classifier__estimator__C': 1.0, 'classifier__estimator__class_weight': None, 'classifier__estimator__dual': False, 'classifier__estimator__max_iter': 100, 'classifier__estimator__penalty': 'l1', 'classifier__estimator__random_state': 42}

Removing already executed params object from candidate_params: {'classifier__estimator': LinearSVC(), 'classifier__estimator__C': 1.0, 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__dual': False, 'classifier__estimator__max_iter': 10000, 'classifier__estimator__penalty': 'l2', 'classifier__estimator__random_state': 42}

Removing already executed params object from candidate_params: {'classifier__estimator': LinearSVC(), 'classifier__estimator__C': 1.0, 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__dual': False, 'classifier__estimator__max_iter': 10000, 'classifier__estimator__penalty': 'l1', 'classifier__estimator__random_state': 42}

Removing already executed params object from candidate_params: {'classifier__estimator': LinearSVC(), 'classifier__estimator__C': 1.0, 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__dual': False, 'classifier__estimator__max_iter': 1000, 'classifier__estimator__penalty': 'l2', 'classifier__estimator__random_state': 42}

Removing already executed params object from candidate_params: {'classifier__estimator': LinearSVC(), 'classifier__estimator__C': 1.0, 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__dual': False, 'classifier__estimator__max_iter': 1000, 'classifier__estimator__penalty': 'l1', 'classifier__estimator__random_state': 42}

Removing already executed params object from candidate_params: {'classifier__estimator': LinearSVC(), 'classifier__estimator__C': 1.0, 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__dual': False, 'classifier__estimator__max_iter': 100, 'classifier__estimator__penalty': 'l2', 'classifier__estimator__random_state': 42}

Removing already executed params object from candidate_params: {'classifier__estimator': LinearSVC(), 'classifier__estimator__C': 1.0, 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__dual': False, 'classifier__estimator__max_iter': 100, 'classifier__estimator__penalty': 'l1', 'classifier__estimator__random_state': 42}

Removing already executed params object from candidate_params: {'classifier__estimator': LinearSVC(), 'classifier__estimator__C': 0.1, 'classifier__estimator__class_weight': None, 'classifier__estimator__dual': False, 'classifier__estimator__max_iter': 10000, 'classifier__estimator__penalty': 'l2', 'classifier__estimator__random_state': 42}

Removing already executed params object from candidate_params: {'classifier__estimator': LinearSVC(), 'classifier__estimator__C': 0.1, 'classifier__estimator__class_weight': None, 'classifier__estimator__dual': False, 'classifier__estimator__max_iter': 10000, 'classifier__estimator__penalty': 'l1', 'classifier__estimator__random_state': 42}

Removing already executed params object from candidate_params: {'classifier__estimator': LinearSVC(), 'classifier__estimator__C': 0.1, 'classifier__estimator__class_weight': None, 'classifier__estimator__dual': False, 'classifier__estimator__max_iter': 1000, 'classifier__estimator__penalty': 'l2', 'classifier__estimator__random_state': 42}

Removing already executed params object from candidate_params: {'classifier__estimator': LinearSVC(), 'classifier__estimator__C': 0.1, 'classifier__estimator__class_weight': None, 'classifier__estimator__dual': False, 'classifier__estimator__max_iter': 1000, 'classifier__estimator__penalty': 'l1', 'classifier__estimator__random_state': 42}

Removing already executed params object from candidate_params: {'classifier__estimator': LinearSVC(), 'classifier__estimator__C': 0.1, 'classifier__estimator__class_weight': None, 'classifier__estimator__dual': False, 'classifier__estimator__max_iter': 100, 'classifier__estimator__penalty': 'l2', 'classifier__estimator__random_state': 42}

Removing already executed params object from candidate_params: {'classifier__estimator': LinearSVC(), 'classifier__estimator__C': 0.1, 'classifier__estimator__class_weight': None, 'classifier__estimator__dual': False, 'classifier__estimator__max_iter': 100, 'classifier__estimator__penalty': 'l1', 'classifier__estimator__random_state': 42}

Removing already executed params object from candidate_params: {'classifier__estimator': LinearSVC(), 'classifier__estimator__C': 0.1, 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__dual': False, 'classifier__estimator__max_iter': 10000, 'classifier__estimator__penalty': 'l2', 'classifier__estimator__random_state': 42}

Removing already executed params object from candidate_params: {'classifier__estimator': LinearSVC(), 'classifier__estimator__C': 0.1, 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__dual': False, 'classifier__estimator__max_iter': 10000, 'classifier__estimator__penalty': 'l1', 'classifier__estimator__random_state': 42}

Removing already executed params object from candidate_params: {'classifier__estimator': LinearSVC(), 'classifier__estimator__C': 0.1, 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__dual': False, 'classifier__estimator__max_iter': 1000, 'classifier__estimator__penalty': 'l2', 'classifier__estimator__random_state': 42}

Removing already executed params object from candidate_params: {'classifier__estimator': LinearSVC(), 'classifier__estimator__C': 0.1, 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__dual': False, 'classifier__estimator__max_iter': 1000, 'classifier__estimator__penalty': 'l1', 'classifier__estimator__random_state': 42}

Removing already executed params object from candidate_params: {'classifier__estimator': LinearSVC(), 'classifier__estimator__C': 0.1, 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__dual': False, 'classifier__estimator__max_iter': 100, 'classifier__estimator__penalty': 'l2', 'classifier__estimator__random_state': 42}

Removing already executed params object from candidate_params: {'classifier__estimator': LinearSVC(), 'classifier__estimator__C': 0.1, 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__dual': False, 'classifier__estimator__max_iter': 100, 'classifier__estimator__penalty': 'l1', 'classifier__estimator__random_state': 42}

Removing already executed params object from candidate_params: {'classifier__estimator': LinearSVC(), 'classifier__estimator__C': 0.01, 'classifier__estimator__class_weight': None, 'classifier__estimator__dual': False, 'classifier__estimator__max_iter': 10000, 'classifier__estimator__penalty': 'l2', 'classifier__estimator__random_state': 42}

Removing already executed params object from candidate_params: {'classifier__estimator': LinearSVC(), 'classifier__estimator__C': 0.01, 'classifier__estimator__class_weight': None, 'classifier__estimator__dual': False, 'classifier__estimator__max_iter': 10000, 'classifier__estimator__penalty': 'l1', 'classifier__estimator__random_state': 42}

Removing already executed params object from candidate_params: {'classifier__estimator': LinearSVC(), 'classifier__estimator__C': 0.01, 'classifier__estimator__class_weight': None, 'classifier__estimator__dual': False, 'classifier__estimator__max_iter': 1000, 'classifier__estimator__penalty': 'l2', 'classifier__estimator__random_state': 42}

Removing already executed params object from candidate_params: {'classifier__estimator': LinearSVC(), 'classifier__estimator__C': 0.01, 'classifier__estimator__class_weight': None, 'classifier__estimator__dual': False, 'classifier__estimator__max_iter': 1000, 'classifier__estimator__penalty': 'l1', 'classifier__estimator__random_state': 42}

Removing already executed params object from candidate_params: {'classifier__estimator': LinearSVC(), 'classifier__estimator__C': 0.01, 'classifier__estimator__class_weight': None, 'classifier__estimator__dual': False, 'classifier__estimator__max_iter': 100, 'classifier__estimator__penalty': 'l2', 'classifier__estimator__random_state': 42}

Removing already executed params object from candidate_params: {'classifier__estimator': LinearSVC(), 'classifier__estimator__C': 0.01, 'classifier__estimator__class_weight': None, 'classifier__estimator__dual': False, 'classifier__estimator__max_iter': 100, 'classifier__estimator__penalty': 'l1', 'classifier__estimator__random_state': 42}

Removing already executed params object from candidate_params: {'classifier__estimator': LinearSVC(), 'classifier__estimator__C': 0.01, 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__dual': False, 'classifier__estimator__max_iter': 10000, 'classifier__estimator__penalty': 'l2', 'classifier__estimator__random_state': 42}

Removing already executed params object from candidate_params: {'classifier__estimator': LinearSVC(), 'classifier__estimator__C': 0.01, 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__dual': False, 'classifier__estimator__max_iter': 10000, 'classifier__estimator__penalty': 'l1', 'classifier__estimator__random_state': 42}

Removing already executed params object from candidate_params: {'classifier__estimator': LinearSVC(), 'classifier__estimator__C': 0.01, 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__dual': False, 'classifier__estimator__max_iter': 1000, 'classifier__estimator__penalty': 'l2', 'classifier__estimator__random_state': 42}

Removing already executed params object from candidate_params: {'classifier__estimator': LinearSVC(), 'classifier__estimator__C': 0.01, 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__dual': False, 'classifier__estimator__max_iter': 1000, 'classifier__estimator__penalty': 'l1', 'classifier__estimator__random_state': 42}

Removing already executed params object from candidate_params: {'classifier__estimator': LinearSVC(), 'classifier__estimator__C': 0.01, 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__dual': False, 'classifier__estimator__max_iter': 100, 'classifier__estimator__penalty': 'l2', 'classifier__estimator__random_state': 42}

Removing already executed params object from candidate_params: {'classifier__estimator': LinearSVC(), 'classifier__estimator__C': 0.01, 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__dual': False, 'classifier__estimator__max_iter': 100, 'classifier__estimator__penalty': 'l1', 'classifier__estimator__random_state': 42}

Removing already executed params object from candidate_params: {'classifier__estimator': LinearSVC(), 'classifier__estimator__C': 0.001, 'classifier__estimator__class_weight': None, 'classifier__estimator__dual': False, 'classifier__estimator__max_iter': 10000, 'classifier__estimator__penalty': 'l2', 'classifier__estimator__random_state': 42}

Removing already executed params object from candidate_params: {'classifier__estimator': LinearSVC(), 'classifier__estimator__C': 0.001, 'classifier__estimator__class_weight': None, 'classifier__estimator__dual': False, 'classifier__estimator__max_iter': 10000, 'classifier__estimator__penalty': 'l1', 'classifier__estimator__random_state': 42}

Removing already executed params object from candidate_params: {'classifier__estimator': LinearSVC(), 'classifier__estimator__C': 0.001, 'classifier__estimator__class_weight': None, 'classifier__estimator__dual': False, 'classifier__estimator__max_iter': 1000, 'classifier__estimator__penalty': 'l2', 'classifier__estimator__random_state': 42}

Removing already executed params object from candidate_params: {'classifier__estimator': LinearSVC(), 'classifier__estimator__C': 0.001, 'classifier__estimator__class_weight': None, 'classifier__estimator__dual': False, 'classifier__estimator__max_iter': 1000, 'classifier__estimator__penalty': 'l1', 'classifier__estimator__random_state': 42}

Removing already executed params object from candidate_params: {'classifier__estimator': LinearSVC(), 'classifier__estimator__C': 0.001, 'classifier__estimator__class_weight': None, 'classifier__estimator__dual': False, 'classifier__estimator__max_iter': 100, 'classifier__estimator__penalty': 'l2', 'classifier__estimator__random_state': 42}

Removing already executed params object from candidate_params: {'classifier__estimator': LinearSVC(), 'classifier__estimator__C': 0.001, 'classifier__estimator__class_weight': None, 'classifier__estimator__dual': False, 'classifier__estimator__max_iter': 100, 'classifier__estimator__penalty': 'l1', 'classifier__estimator__random_state': 42}

Removing already executed params object from candidate_params: {'classifier__estimator': LinearSVC(), 'classifier__estimator__C': 0.001, 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__dual': False, 'classifier__estimator__max_iter': 10000, 'classifier__estimator__penalty': 'l2', 'classifier__estimator__random_state': 42}

Removing already executed params object from candidate_params: {'classifier__estimator': LinearSVC(), 'classifier__estimator__C': 0.001, 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__dual': False, 'classifier__estimator__max_iter': 10000, 'classifier__estimator__penalty': 'l1', 'classifier__estimator__random_state': 42}

Removing already executed params object from candidate_params: {'classifier__estimator': LinearSVC(), 'classifier__estimator__C': 0.001, 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__dual': False, 'classifier__estimator__max_iter': 1000, 'classifier__estimator__penalty': 'l2', 'classifier__estimator__random_state': 42}

Removing already executed params object from candidate_params: {'classifier__estimator': LinearSVC(), 'classifier__estimator__C': 0.001, 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__dual': False, 'classifier__estimator__max_iter': 1000, 'classifier__estimator__penalty': 'l1', 'classifier__estimator__random_state': 42}

Removing already executed params object from candidate_params: {'classifier__estimator': LinearSVC(), 'classifier__estimator__C': 0.001, 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__dual': False, 'classifier__estimator__max_iter': 100, 'classifier__estimator__penalty': 'l2', 'classifier__estimator__random_state': 42}

Removing already executed params object from candidate_params: {'classifier__estimator': LinearSVC(), 'classifier__estimator__C': 0.001, 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__dual': False, 'classifier__estimator__max_iter': 100, 'classifier__estimator__penalty': 'l1', 'classifier__estimator__random_state': 42}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': None, 'classifier__estimator__min_samples_leaf': 10, 'classifier__estimator__min_samples_split': 100, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': None, 'classifier__estimator__min_samples_leaf': 10, 'classifier__estimator__min_samples_split': 50, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': None, 'classifier__estimator__min_samples_leaf': 10, 'classifier__estimator__min_samples_split': 2, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': None, 'classifier__estimator__min_samples_leaf': 10, 'classifier__estimator__min_samples_split': 1, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': None, 'classifier__estimator__min_samples_leaf': 5, 'classifier__estimator__min_samples_split': 100, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': None, 'classifier__estimator__min_samples_leaf': 5, 'classifier__estimator__min_samples_split': 50, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': None, 'classifier__estimator__min_samples_leaf': 5, 'classifier__estimator__min_samples_split': 2, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': None, 'classifier__estimator__min_samples_leaf': 5, 'classifier__estimator__min_samples_split': 1, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': None, 'classifier__estimator__min_samples_leaf': 1, 'classifier__estimator__min_samples_split': 100, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': None, 'classifier__estimator__min_samples_leaf': 1, 'classifier__estimator__min_samples_split': 50, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': None, 'classifier__estimator__min_samples_leaf': 1, 'classifier__estimator__min_samples_split': 2, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': None, 'classifier__estimator__min_samples_leaf': 1, 'classifier__estimator__min_samples_split': 1, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': 10, 'classifier__estimator__min_samples_leaf': 10, 'classifier__estimator__min_samples_split': 100, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': 10, 'classifier__estimator__min_samples_leaf': 10, 'classifier__estimator__min_samples_split': 50, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': 10, 'classifier__estimator__min_samples_leaf': 10, 'classifier__estimator__min_samples_split': 2, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': 10, 'classifier__estimator__min_samples_leaf': 10, 'classifier__estimator__min_samples_split': 1, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': 10, 'classifier__estimator__min_samples_leaf': 5, 'classifier__estimator__min_samples_split': 100, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': 10, 'classifier__estimator__min_samples_leaf': 5, 'classifier__estimator__min_samples_split': 50, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': 10, 'classifier__estimator__min_samples_leaf': 5, 'classifier__estimator__min_samples_split': 2, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': 10, 'classifier__estimator__min_samples_leaf': 5, 'classifier__estimator__min_samples_split': 1, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': 10, 'classifier__estimator__min_samples_leaf': 1, 'classifier__estimator__min_samples_split': 100, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': 10, 'classifier__estimator__min_samples_leaf': 1, 'classifier__estimator__min_samples_split': 50, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': 10, 'classifier__estimator__min_samples_leaf': 1, 'classifier__estimator__min_samples_split': 2, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': 10, 'classifier__estimator__min_samples_leaf': 1, 'classifier__estimator__min_samples_split': 1, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': 7, 'classifier__estimator__min_samples_leaf': 10, 'classifier__estimator__min_samples_split': 100, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': 7, 'classifier__estimator__min_samples_leaf': 10, 'classifier__estimator__min_samples_split': 50, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': 7, 'classifier__estimator__min_samples_leaf': 10, 'classifier__estimator__min_samples_split': 2, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': 7, 'classifier__estimator__min_samples_leaf': 10, 'classifier__estimator__min_samples_split': 1, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': 7, 'classifier__estimator__min_samples_leaf': 5, 'classifier__estimator__min_samples_split': 100, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': 7, 'classifier__estimator__min_samples_leaf': 5, 'classifier__estimator__min_samples_split': 50, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': 7, 'classifier__estimator__min_samples_leaf': 5, 'classifier__estimator__min_samples_split': 2, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': 7, 'classifier__estimator__min_samples_leaf': 5, 'classifier__estimator__min_samples_split': 1, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': 7, 'classifier__estimator__min_samples_leaf': 1, 'classifier__estimator__min_samples_split': 100, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': 7, 'classifier__estimator__min_samples_leaf': 1, 'classifier__estimator__min_samples_split': 50, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': 7, 'classifier__estimator__min_samples_leaf': 1, 'classifier__estimator__min_samples_split': 2, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': 7, 'classifier__estimator__min_samples_leaf': 1, 'classifier__estimator__min_samples_split': 1, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': 4, 'classifier__estimator__min_samples_leaf': 10, 'classifier__estimator__min_samples_split': 100, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': 4, 'classifier__estimator__min_samples_leaf': 10, 'classifier__estimator__min_samples_split': 50, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': 4, 'classifier__estimator__min_samples_leaf': 10, 'classifier__estimator__min_samples_split': 2, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': 4, 'classifier__estimator__min_samples_leaf': 10, 'classifier__estimator__min_samples_split': 1, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': 4, 'classifier__estimator__min_samples_leaf': 5, 'classifier__estimator__min_samples_split': 100, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': 4, 'classifier__estimator__min_samples_leaf': 5, 'classifier__estimator__min_samples_split': 50, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': 4, 'classifier__estimator__min_samples_leaf': 5, 'classifier__estimator__min_samples_split': 2, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': 4, 'classifier__estimator__min_samples_leaf': 5, 'classifier__estimator__min_samples_split': 1, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': 4, 'classifier__estimator__min_samples_leaf': 1, 'classifier__estimator__min_samples_split': 100, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': 4, 'classifier__estimator__min_samples_leaf': 1, 'classifier__estimator__min_samples_split': 50, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': 4, 'classifier__estimator__min_samples_leaf': 1, 'classifier__estimator__min_samples_split': 2, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': 4, 'classifier__estimator__min_samples_leaf': 1, 'classifier__estimator__min_samples_split': 1, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': 1, 'classifier__estimator__min_samples_leaf': 10, 'classifier__estimator__min_samples_split': 100, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': 1, 'classifier__estimator__min_samples_leaf': 10, 'classifier__estimator__min_samples_split': 50, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': 1, 'classifier__estimator__min_samples_leaf': 10, 'classifier__estimator__min_samples_split': 2, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': 1, 'classifier__estimator__min_samples_leaf': 10, 'classifier__estimator__min_samples_split': 1, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': 1, 'classifier__estimator__min_samples_leaf': 5, 'classifier__estimator__min_samples_split': 100, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': 1, 'classifier__estimator__min_samples_leaf': 5, 'classifier__estimator__min_samples_split': 50, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': 1, 'classifier__estimator__min_samples_leaf': 5, 'classifier__estimator__min_samples_split': 2, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': 1, 'classifier__estimator__min_samples_leaf': 5, 'classifier__estimator__min_samples_split': 1, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': 1, 'classifier__estimator__min_samples_leaf': 1, 'classifier__estimator__min_samples_split': 100, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': 1, 'classifier__estimator__min_samples_leaf': 1, 'classifier__estimator__min_samples_split': 50, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': 1, 'classifier__estimator__min_samples_leaf': 1, 'classifier__estimator__min_samples_split': 2, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': 1, 'classifier__estimator__min_samples_leaf': 1, 'classifier__estimator__min_samples_split': 1, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': None, 'classifier__estimator__min_samples_leaf': 10, 'classifier__estimator__min_samples_split': 100, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': None, 'classifier__estimator__min_samples_leaf': 10, 'classifier__estimator__min_samples_split': 50, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': None, 'classifier__estimator__min_samples_leaf': 10, 'classifier__estimator__min_samples_split': 2, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': None, 'classifier__estimator__min_samples_leaf': 10, 'classifier__estimator__min_samples_split': 1, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': None, 'classifier__estimator__min_samples_leaf': 5, 'classifier__estimator__min_samples_split': 100, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': None, 'classifier__estimator__min_samples_leaf': 5, 'classifier__estimator__min_samples_split': 50, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': None, 'classifier__estimator__min_samples_leaf': 5, 'classifier__estimator__min_samples_split': 2, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': None, 'classifier__estimator__min_samples_leaf': 5, 'classifier__estimator__min_samples_split': 1, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': None, 'classifier__estimator__min_samples_leaf': 1, 'classifier__estimator__min_samples_split': 100, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': None, 'classifier__estimator__min_samples_leaf': 1, 'classifier__estimator__min_samples_split': 50, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': None, 'classifier__estimator__min_samples_leaf': 1, 'classifier__estimator__min_samples_split': 2, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': None, 'classifier__estimator__min_samples_leaf': 1, 'classifier__estimator__min_samples_split': 1, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': 10, 'classifier__estimator__min_samples_leaf': 10, 'classifier__estimator__min_samples_split': 100, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': 10, 'classifier__estimator__min_samples_leaf': 10, 'classifier__estimator__min_samples_split': 50, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': 10, 'classifier__estimator__min_samples_leaf': 10, 'classifier__estimator__min_samples_split': 2, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': 10, 'classifier__estimator__min_samples_leaf': 10, 'classifier__estimator__min_samples_split': 1, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': 10, 'classifier__estimator__min_samples_leaf': 5, 'classifier__estimator__min_samples_split': 100, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': 10, 'classifier__estimator__min_samples_leaf': 5, 'classifier__estimator__min_samples_split': 50, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': 10, 'classifier__estimator__min_samples_leaf': 5, 'classifier__estimator__min_samples_split': 2, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': 10, 'classifier__estimator__min_samples_leaf': 5, 'classifier__estimator__min_samples_split': 1, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': 10, 'classifier__estimator__min_samples_leaf': 1, 'classifier__estimator__min_samples_split': 100, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': 10, 'classifier__estimator__min_samples_leaf': 1, 'classifier__estimator__min_samples_split': 50, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': 10, 'classifier__estimator__min_samples_leaf': 1, 'classifier__estimator__min_samples_split': 2, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': 10, 'classifier__estimator__min_samples_leaf': 1, 'classifier__estimator__min_samples_split': 1, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': 7, 'classifier__estimator__min_samples_leaf': 10, 'classifier__estimator__min_samples_split': 100, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': 7, 'classifier__estimator__min_samples_leaf': 10, 'classifier__estimator__min_samples_split': 50, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': 7, 'classifier__estimator__min_samples_leaf': 10, 'classifier__estimator__min_samples_split': 2, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': 7, 'classifier__estimator__min_samples_leaf': 10, 'classifier__estimator__min_samples_split': 1, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': 7, 'classifier__estimator__min_samples_leaf': 5, 'classifier__estimator__min_samples_split': 100, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': 7, 'classifier__estimator__min_samples_leaf': 5, 'classifier__estimator__min_samples_split': 50, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': 7, 'classifier__estimator__min_samples_leaf': 5, 'classifier__estimator__min_samples_split': 2, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': 7, 'classifier__estimator__min_samples_leaf': 5, 'classifier__estimator__min_samples_split': 1, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': 7, 'classifier__estimator__min_samples_leaf': 1, 'classifier__estimator__min_samples_split': 100, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': 7, 'classifier__estimator__min_samples_leaf': 1, 'classifier__estimator__min_samples_split': 50, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': 7, 'classifier__estimator__min_samples_leaf': 1, 'classifier__estimator__min_samples_split': 2, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': 7, 'classifier__estimator__min_samples_leaf': 1, 'classifier__estimator__min_samples_split': 1, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': 4, 'classifier__estimator__min_samples_leaf': 10, 'classifier__estimator__min_samples_split': 100, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': 4, 'classifier__estimator__min_samples_leaf': 10, 'classifier__estimator__min_samples_split': 50, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': 4, 'classifier__estimator__min_samples_leaf': 10, 'classifier__estimator__min_samples_split': 2, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': 4, 'classifier__estimator__min_samples_leaf': 10, 'classifier__estimator__min_samples_split': 1, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': 4, 'classifier__estimator__min_samples_leaf': 5, 'classifier__estimator__min_samples_split': 100, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': 4, 'classifier__estimator__min_samples_leaf': 5, 'classifier__estimator__min_samples_split': 50, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': 4, 'classifier__estimator__min_samples_leaf': 5, 'classifier__estimator__min_samples_split': 2, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': 4, 'classifier__estimator__min_samples_leaf': 5, 'classifier__estimator__min_samples_split': 1, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': 4, 'classifier__estimator__min_samples_leaf': 1, 'classifier__estimator__min_samples_split': 100, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': 4, 'classifier__estimator__min_samples_leaf': 1, 'classifier__estimator__min_samples_split': 50, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': 4, 'classifier__estimator__min_samples_leaf': 1, 'classifier__estimator__min_samples_split': 2, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': 4, 'classifier__estimator__min_samples_leaf': 1, 'classifier__estimator__min_samples_split': 1, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': 1, 'classifier__estimator__min_samples_leaf': 10, 'classifier__estimator__min_samples_split': 100, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': 1, 'classifier__estimator__min_samples_leaf': 10, 'classifier__estimator__min_samples_split': 50, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': 1, 'classifier__estimator__min_samples_leaf': 10, 'classifier__estimator__min_samples_split': 2, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': 1, 'classifier__estimator__min_samples_leaf': 10, 'classifier__estimator__min_samples_split': 1, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': 1, 'classifier__estimator__min_samples_leaf': 5, 'classifier__estimator__min_samples_split': 100, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': 1, 'classifier__estimator__min_samples_leaf': 5, 'classifier__estimator__min_samples_split': 50, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': 1, 'classifier__estimator__min_samples_leaf': 5, 'classifier__estimator__min_samples_split': 2, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': 1, 'classifier__estimator__min_samples_leaf': 5, 'classifier__estimator__min_samples_split': 1, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': 1, 'classifier__estimator__min_samples_leaf': 1, 'classifier__estimator__min_samples_split': 100, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': 1, 'classifier__estimator__min_samples_leaf': 1, 'classifier__estimator__min_samples_split': 50, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': 1, 'classifier__estimator__min_samples_leaf': 1, 'classifier__estimator__min_samples_split': 2, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': 1, 'classifier__estimator__min_samples_leaf': 1, 'classifier__estimator__min_samples_split': 1, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': None, 'classifier__estimator__min_samples_leaf': 10, 'classifier__estimator__min_samples_split': 100, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': None, 'classifier__estimator__min_samples_leaf': 10, 'classifier__estimator__min_samples_split': 50, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': None, 'classifier__estimator__min_samples_leaf': 10, 'classifier__estimator__min_samples_split': 2, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': None, 'classifier__estimator__min_samples_leaf': 10, 'classifier__estimator__min_samples_split': 1, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': None, 'classifier__estimator__min_samples_leaf': 5, 'classifier__estimator__min_samples_split': 100, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': None, 'classifier__estimator__min_samples_leaf': 5, 'classifier__estimator__min_samples_split': 50, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': None, 'classifier__estimator__min_samples_leaf': 5, 'classifier__estimator__min_samples_split': 2, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': None, 'classifier__estimator__min_samples_leaf': 5, 'classifier__estimator__min_samples_split': 1, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': None, 'classifier__estimator__min_samples_leaf': 1, 'classifier__estimator__min_samples_split': 100, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': None, 'classifier__estimator__min_samples_leaf': 1, 'classifier__estimator__min_samples_split': 50, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': None, 'classifier__estimator__min_samples_leaf': 1, 'classifier__estimator__min_samples_split': 2, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': None, 'classifier__estimator__min_samples_leaf': 1, 'classifier__estimator__min_samples_split': 1, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': 10, 'classifier__estimator__min_samples_leaf': 10, 'classifier__estimator__min_samples_split': 100, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': 10, 'classifier__estimator__min_samples_leaf': 10, 'classifier__estimator__min_samples_split': 50, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': 10, 'classifier__estimator__min_samples_leaf': 10, 'classifier__estimator__min_samples_split': 2, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': 10, 'classifier__estimator__min_samples_leaf': 10, 'classifier__estimator__min_samples_split': 1, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': 10, 'classifier__estimator__min_samples_leaf': 5, 'classifier__estimator__min_samples_split': 100, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': 10, 'classifier__estimator__min_samples_leaf': 5, 'classifier__estimator__min_samples_split': 50, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': 10, 'classifier__estimator__min_samples_leaf': 5, 'classifier__estimator__min_samples_split': 2, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': 10, 'classifier__estimator__min_samples_leaf': 5, 'classifier__estimator__min_samples_split': 1, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': 10, 'classifier__estimator__min_samples_leaf': 1, 'classifier__estimator__min_samples_split': 100, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': 10, 'classifier__estimator__min_samples_leaf': 1, 'classifier__estimator__min_samples_split': 50, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': 10, 'classifier__estimator__min_samples_leaf': 1, 'classifier__estimator__min_samples_split': 2, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': 10, 'classifier__estimator__min_samples_leaf': 1, 'classifier__estimator__min_samples_split': 1, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': 7, 'classifier__estimator__min_samples_leaf': 10, 'classifier__estimator__min_samples_split': 100, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': 7, 'classifier__estimator__min_samples_leaf': 10, 'classifier__estimator__min_samples_split': 50, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': 7, 'classifier__estimator__min_samples_leaf': 10, 'classifier__estimator__min_samples_split': 2, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': 7, 'classifier__estimator__min_samples_leaf': 10, 'classifier__estimator__min_samples_split': 1, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': 7, 'classifier__estimator__min_samples_leaf': 5, 'classifier__estimator__min_samples_split': 100, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': 7, 'classifier__estimator__min_samples_leaf': 5, 'classifier__estimator__min_samples_split': 50, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': 7, 'classifier__estimator__min_samples_leaf': 5, 'classifier__estimator__min_samples_split': 2, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': 7, 'classifier__estimator__min_samples_leaf': 5, 'classifier__estimator__min_samples_split': 1, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': 7, 'classifier__estimator__min_samples_leaf': 1, 'classifier__estimator__min_samples_split': 100, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': 7, 'classifier__estimator__min_samples_leaf': 1, 'classifier__estimator__min_samples_split': 50, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': 7, 'classifier__estimator__min_samples_leaf': 1, 'classifier__estimator__min_samples_split': 2, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': 7, 'classifier__estimator__min_samples_leaf': 1, 'classifier__estimator__min_samples_split': 1, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': 4, 'classifier__estimator__min_samples_leaf': 10, 'classifier__estimator__min_samples_split': 100, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': 4, 'classifier__estimator__min_samples_leaf': 10, 'classifier__estimator__min_samples_split': 50, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': 4, 'classifier__estimator__min_samples_leaf': 10, 'classifier__estimator__min_samples_split': 2, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': 4, 'classifier__estimator__min_samples_leaf': 10, 'classifier__estimator__min_samples_split': 1, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': 4, 'classifier__estimator__min_samples_leaf': 5, 'classifier__estimator__min_samples_split': 100, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': 4, 'classifier__estimator__min_samples_leaf': 5, 'classifier__estimator__min_samples_split': 50, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': 4, 'classifier__estimator__min_samples_leaf': 5, 'classifier__estimator__min_samples_split': 2, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': 4, 'classifier__estimator__min_samples_leaf': 5, 'classifier__estimator__min_samples_split': 1, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': 4, 'classifier__estimator__min_samples_leaf': 1, 'classifier__estimator__min_samples_split': 100, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': 4, 'classifier__estimator__min_samples_leaf': 1, 'classifier__estimator__min_samples_split': 50, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': 4, 'classifier__estimator__min_samples_leaf': 1, 'classifier__estimator__min_samples_split': 2, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': 4, 'classifier__estimator__min_samples_leaf': 1, 'classifier__estimator__min_samples_split': 1, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': 1, 'classifier__estimator__min_samples_leaf': 10, 'classifier__estimator__min_samples_split': 100, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': 1, 'classifier__estimator__min_samples_leaf': 10, 'classifier__estimator__min_samples_split': 50, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': 1, 'classifier__estimator__min_samples_leaf': 10, 'classifier__estimator__min_samples_split': 2, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': 1, 'classifier__estimator__min_samples_leaf': 10, 'classifier__estimator__min_samples_split': 1, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': 1, 'classifier__estimator__min_samples_leaf': 5, 'classifier__estimator__min_samples_split': 100, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': 1, 'classifier__estimator__min_samples_leaf': 5, 'classifier__estimator__min_samples_split': 50, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': 1, 'classifier__estimator__min_samples_leaf': 5, 'classifier__estimator__min_samples_split': 2, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': 1, 'classifier__estimator__min_samples_leaf': 5, 'classifier__estimator__min_samples_split': 1, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': 1, 'classifier__estimator__min_samples_leaf': 1, 'classifier__estimator__min_samples_split': 100, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': 1, 'classifier__estimator__min_samples_leaf': 1, 'classifier__estimator__min_samples_split': 50, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': 1, 'classifier__estimator__min_samples_leaf': 1, 'classifier__estimator__min_samples_split': 2, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': 1, 'classifier__estimator__min_samples_leaf': 1, 'classifier__estimator__min_samples_split': 1, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': None, 'classifier__estimator__min_samples_leaf': 10, 'classifier__estimator__min_samples_split': 100, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': None, 'classifier__estimator__min_samples_leaf': 10, 'classifier__estimator__min_samples_split': 50, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': None, 'classifier__estimator__min_samples_leaf': 10, 'classifier__estimator__min_samples_split': 2, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': None, 'classifier__estimator__min_samples_leaf': 10, 'classifier__estimator__min_samples_split': 1, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': None, 'classifier__estimator__min_samples_leaf': 5, 'classifier__estimator__min_samples_split': 100, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': None, 'classifier__estimator__min_samples_leaf': 5, 'classifier__estimator__min_samples_split': 50, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': None, 'classifier__estimator__min_samples_leaf': 5, 'classifier__estimator__min_samples_split': 2, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': None, 'classifier__estimator__min_samples_leaf': 5, 'classifier__estimator__min_samples_split': 1, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': None, 'classifier__estimator__min_samples_leaf': 1, 'classifier__estimator__min_samples_split': 100, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': None, 'classifier__estimator__min_samples_leaf': 1, 'classifier__estimator__min_samples_split': 50, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': None, 'classifier__estimator__min_samples_leaf': 1, 'classifier__estimator__min_samples_split': 2, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': None, 'classifier__estimator__min_samples_leaf': 1, 'classifier__estimator__min_samples_split': 1, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': 10, 'classifier__estimator__min_samples_leaf': 10, 'classifier__estimator__min_samples_split': 100, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': 10, 'classifier__estimator__min_samples_leaf': 10, 'classifier__estimator__min_samples_split': 50, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': 10, 'classifier__estimator__min_samples_leaf': 10, 'classifier__estimator__min_samples_split': 2, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': 10, 'classifier__estimator__min_samples_leaf': 10, 'classifier__estimator__min_samples_split': 1, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': 10, 'classifier__estimator__min_samples_leaf': 5, 'classifier__estimator__min_samples_split': 100, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': 10, 'classifier__estimator__min_samples_leaf': 5, 'classifier__estimator__min_samples_split': 50, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': 10, 'classifier__estimator__min_samples_leaf': 5, 'classifier__estimator__min_samples_split': 2, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': 10, 'classifier__estimator__min_samples_leaf': 5, 'classifier__estimator__min_samples_split': 1, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': 10, 'classifier__estimator__min_samples_leaf': 1, 'classifier__estimator__min_samples_split': 100, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': 10, 'classifier__estimator__min_samples_leaf': 1, 'classifier__estimator__min_samples_split': 50, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': 10, 'classifier__estimator__min_samples_leaf': 1, 'classifier__estimator__min_samples_split': 2, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': 10, 'classifier__estimator__min_samples_leaf': 1, 'classifier__estimator__min_samples_split': 1, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': 7, 'classifier__estimator__min_samples_leaf': 10, 'classifier__estimator__min_samples_split': 100, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': 7, 'classifier__estimator__min_samples_leaf': 10, 'classifier__estimator__min_samples_split': 50, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': 7, 'classifier__estimator__min_samples_leaf': 10, 'classifier__estimator__min_samples_split': 2, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': 7, 'classifier__estimator__min_samples_leaf': 10, 'classifier__estimator__min_samples_split': 1, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': 7, 'classifier__estimator__min_samples_leaf': 5, 'classifier__estimator__min_samples_split': 100, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': 7, 'classifier__estimator__min_samples_leaf': 5, 'classifier__estimator__min_samples_split': 50, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': 7, 'classifier__estimator__min_samples_leaf': 5, 'classifier__estimator__min_samples_split': 2, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': 7, 'classifier__estimator__min_samples_leaf': 5, 'classifier__estimator__min_samples_split': 1, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': 7, 'classifier__estimator__min_samples_leaf': 1, 'classifier__estimator__min_samples_split': 100, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': 7, 'classifier__estimator__min_samples_leaf': 1, 'classifier__estimator__min_samples_split': 50, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': 7, 'classifier__estimator__min_samples_leaf': 1, 'classifier__estimator__min_samples_split': 2, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': 7, 'classifier__estimator__min_samples_leaf': 1, 'classifier__estimator__min_samples_split': 1, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': 4, 'classifier__estimator__min_samples_leaf': 10, 'classifier__estimator__min_samples_split': 100, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': 4, 'classifier__estimator__min_samples_leaf': 10, 'classifier__estimator__min_samples_split': 50, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': 4, 'classifier__estimator__min_samples_leaf': 10, 'classifier__estimator__min_samples_split': 2, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': 4, 'classifier__estimator__min_samples_leaf': 10, 'classifier__estimator__min_samples_split': 1, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': 4, 'classifier__estimator__min_samples_leaf': 5, 'classifier__estimator__min_samples_split': 100, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': 4, 'classifier__estimator__min_samples_leaf': 5, 'classifier__estimator__min_samples_split': 50, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': 4, 'classifier__estimator__min_samples_leaf': 5, 'classifier__estimator__min_samples_split': 2, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': 4, 'classifier__estimator__min_samples_leaf': 5, 'classifier__estimator__min_samples_split': 1, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': 4, 'classifier__estimator__min_samples_leaf': 1, 'classifier__estimator__min_samples_split': 100, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': 4, 'classifier__estimator__min_samples_leaf': 1, 'classifier__estimator__min_samples_split': 50, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': 4, 'classifier__estimator__min_samples_leaf': 1, 'classifier__estimator__min_samples_split': 2, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': 4, 'classifier__estimator__min_samples_leaf': 1, 'classifier__estimator__min_samples_split': 1, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': 1, 'classifier__estimator__min_samples_leaf': 10, 'classifier__estimator__min_samples_split': 100, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': 1, 'classifier__estimator__min_samples_leaf': 10, 'classifier__estimator__min_samples_split': 50, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': 1, 'classifier__estimator__min_samples_leaf': 10, 'classifier__estimator__min_samples_split': 2, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': 1, 'classifier__estimator__min_samples_leaf': 10, 'classifier__estimator__min_samples_split': 1, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': 1, 'classifier__estimator__min_samples_leaf': 5, 'classifier__estimator__min_samples_split': 100, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': 1, 'classifier__estimator__min_samples_leaf': 5, 'classifier__estimator__min_samples_split': 50, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': 1, 'classifier__estimator__min_samples_leaf': 5, 'classifier__estimator__min_samples_split': 2, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': 1, 'classifier__estimator__min_samples_leaf': 5, 'classifier__estimator__min_samples_split': 1, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': 1, 'classifier__estimator__min_samples_leaf': 1, 'classifier__estimator__min_samples_split': 100, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': 1, 'classifier__estimator__min_samples_leaf': 1, 'classifier__estimator__min_samples_split': 50, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': 1, 'classifier__estimator__min_samples_leaf': 1, 'classifier__estimator__min_samples_split': 2, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': DecisionTreeClassifier(), 'classifier__estimator__class_weight': 'balanced', 'classifier__estimator__criterion': 'gini', 'classifier__estimator__max_depth': 1, 'classifier__estimator__min_samples_leaf': 1, 'classifier__estimator__min_samples_split': 1, 'classifier__estimator__random_state': 42, 'classifier__estimator__splitter': 'best'}

Removing already executed params object from candidate_params: {'classifier__estimator': GaussianNB()}

/home/externo/rafaelrm/algoritmos/run_pipeline_target_categoria_26012023/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/sklearn/model_selection/_validation.py:378: FitFailedWarning: 
600 fits failed out of a total of 3810.
The score on these train-test partitions for these parameters will be set to nan.
If these failures are not expected, you can try to debug them by setting error_score='raise'.

Below are more details about the failures:
--------------------------------------------------------------------------------
600 fits failed with the following error:
Traceback (most recent call last):
  File "/home/rafael_marquesi/algoritmos/run_pipeline_target_categoria_26012023/precoce-ms-classification/sklearn_tuner/model_selection_tuner/_validation_tuner.py", line 178, in _fit_and_score_tuner
    estimator.fit(X_train, y_train, **fit_params)
  File "/home/rafael_marquesi/algoritmos/run_pipeline_target_categoria_26012023/precoce-ms-classification/.venv-precoce-ms/lib/python3.9/site-packages/sklearn/pipeline.py", line 382, in fit
    self._final_estimator.fit(Xt, y, **fit_params_last_step)
  File "/home/rafael_marquesi/algoritmos/run_pipeline_target_categoria_26012023/precoce-ms-classification/clf_switcher.py", line 20, in fit
    self.estimator.fit(x, y)
  File "/home/rafael_marquesi/algoritmos/run_pipeline_target_categoria_26012023/precoce-ms-classification/.venv-precoce-ms/lib/python3.9/site-packages/sklearn/tree/_classes.py", line 969, in fit
    super().fit(
  File "/home/rafael_marquesi/algoritmos/run_pipeline_target_categoria_26012023/precoce-ms-classification/.venv-precoce-ms/lib/python3.9/site-packages/sklearn/tree/_classes.py", line 265, in fit
    check_scalar(
  File "/home/rafael_marquesi/algoritmos/run_pipeline_target_categoria_26012023/precoce-ms-classification/.venv-precoce-ms/lib/python3.9/site-packages/sklearn/utils/validation.py", line 1480, in check_scalar
    raise ValueError(
ValueError: min_samples_split == 1, must be >= 2.

  warnings.warn(some_fits_failed_message, FitFailedWarning)
Fitting 10 folds for each of 5140 candidates, totalling 51400 fits
[CV 1/10; 1/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.0001, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(200, 100), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=adam
[CV 1/10; 1/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.0001, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(200, 100), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=adam;, score=0.387 total time=88.8min
[CV 2/10; 1/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.0001, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(200, 100), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=adam
[CV 2/10; 1/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.0001, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(200, 100), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=adam;, score=0.397 total time=116.5min
[CV 3/10; 1/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.0001, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(200, 100), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=adam
[CV 3/10; 1/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.0001, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(200, 100), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=adam;, score=0.402 total time=116.8min
[CV 4/10; 1/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.0001, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(200, 100), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=adam
[CV 4/10; 1/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.0001, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(200, 100), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=adam;, score=0.387 total time=66.5min
[CV 5/10; 1/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.0001, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(200, 100), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=adam
[CV 5/10; 1/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.0001, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(200, 100), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=adam;, score=0.396 total time=93.4min
[CV 6/10; 1/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.0001, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(200, 100), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=adam
[CV 6/10; 1/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.0001, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(200, 100), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=adam;, score=0.401 total time=102.0min
[CV 7/10; 1/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.0001, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(200, 100), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=adam
[CV 7/10; 1/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.0001, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(200, 100), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=adam;, score=0.393 total time=128.3min
[CV 8/10; 1/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.0001, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(200, 100), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=adam
[CV 8/10; 1/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.0001, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(200, 100), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=adam;, score=0.396 total time=93.5min
[CV 9/10; 1/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.0001, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(200, 100), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=adam
[CV 9/10; 1/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.0001, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(200, 100), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=adam;, score=0.393 total time=85.4min
[CV 10/10; 1/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.0001, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(200, 100), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=adam
[CV 10/10; 1/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.0001, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(200, 100), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=adam;, score=0.393 total time=97.1min
[CV 1/10; 2/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.0001, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(200, 100), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=sgd
[CV 1/10; 2/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.0001, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(200, 100), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=sgd;, score=0.196 total time=72.5min
[CV 2/10; 2/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.0001, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(200, 100), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=sgd
[CV 2/10; 2/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.0001, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(200, 100), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=sgd;, score=0.206 total time=76.6min
[CV 3/10; 2/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.0001, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(200, 100), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=sgd
[CV 3/10; 2/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.0001, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(200, 100), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=sgd;, score=0.190 total time=76.0min
[CV 4/10; 2/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.0001, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(200, 100), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=sgd
[CV 4/10; 2/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.0001, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(200, 100), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=sgd;, score=0.196 total time=61.1min
[CV 5/10; 2/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.0001, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(200, 100), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=sgd
[CV 5/10; 2/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.0001, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(200, 100), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=sgd;, score=0.212 total time=124.5min
[CV 6/10; 2/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.0001, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(200, 100), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=sgd
[CV 6/10; 2/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.0001, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(200, 100), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=sgd;, score=0.202 total time=62.0min
[CV 7/10; 2/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.0001, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(200, 100), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=sgd
[CV 7/10; 2/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.0001, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(200, 100), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=sgd;, score=0.196 total time=69.9min
[CV 8/10; 2/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.0001, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(200, 100), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=sgd
[CV 8/10; 2/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.0001, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(200, 100), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=sgd;, score=0.198 total time=77.7min
[CV 9/10; 2/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.0001, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(200, 100), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=sgd
[CV 9/10; 2/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.0001, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(200, 100), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=sgd;, score=0.197 total time=61.7min
[CV 10/10; 2/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.0001, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(200, 100), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=sgd
[CV 10/10; 2/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.0001, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(200, 100), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=sgd;, score=0.200 total time=58.0min
[CV 1/10; 3/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.0001, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(200, 100), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=adam
[CV 1/10; 3/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.0001, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(200, 100), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=adam;, score=0.394 total time=103.5min
[CV 2/10; 3/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.0001, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(200, 100), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=adam
[CV 2/10; 3/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.0001, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(200, 100), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=adam;, score=0.393 total time=95.4min
[CV 3/10; 3/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.0001, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(200, 100), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=adam
[CV 3/10; 3/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.0001, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(200, 100), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=adam;, score=0.396 total time=100.9min
[CV 4/10; 3/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.0001, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(200, 100), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=adam
[CV 4/10; 3/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.0001, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(200, 100), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=adam;, score=0.402 total time=93.4min
[CV 5/10; 3/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.0001, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(200, 100), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=adam
[CV 5/10; 3/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.0001, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(200, 100), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=adam;, score=0.387 total time=95.4min
[CV 6/10; 3/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.0001, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(200, 100), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=adam
[CV 6/10; 3/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.0001, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(200, 100), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=adam;, score=0.399 total time=88.3min
[CV 7/10; 3/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.0001, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(200, 100), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=adam
[CV 7/10; 3/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.0001, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(200, 100), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=adam;, score=0.398 total time=93.7min
[CV 8/10; 3/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.0001, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(200, 100), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=adam
[CV 8/10; 3/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.0001, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(200, 100), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=adam;, score=0.392 total time=91.2min
[CV 9/10; 3/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.0001, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(200, 100), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=adam
[CV 9/10; 3/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.0001, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(200, 100), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=adam;, score=0.387 total time=76.1min
[CV 10/10; 3/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.0001, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(200, 100), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=adam
[CV 10/10; 3/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.0001, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(200, 100), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=adam;, score=0.395 total time=112.5min
[CV 1/10; 4/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.0001, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(200, 100), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=sgd
[CV 1/10; 4/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.0001, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(200, 100), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=sgd;, score=0.215 total time=62.3min
[CV 2/10; 4/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.0001, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(200, 100), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=sgd
[CV 2/10; 4/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.0001, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(200, 100), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=sgd;, score=0.227 total time=98.0min
[CV 3/10; 4/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.0001, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(200, 100), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=sgd
[CV 3/10; 4/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.0001, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(200, 100), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=sgd;, score=0.239 total time=99.1min
[CV 4/10; 4/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.0001, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(200, 100), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=sgd
[CV 4/10; 4/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.0001, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(200, 100), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=sgd;, score=0.212 total time=65.0min
[CV 5/10; 4/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.0001, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(200, 100), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=sgd
[CV 5/10; 4/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.0001, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(200, 100), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=sgd;, score=0.218 total time=63.3min
[CV 6/10; 4/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.0001, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(200, 100), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=sgd
[CV 6/10; 4/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.0001, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(200, 100), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=sgd;, score=0.244 total time=135.4min
[CV 7/10; 4/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.0001, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(200, 100), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=sgd
[CV 7/10; 4/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.0001, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(200, 100), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=sgd;, score=0.226 total time=82.3min
[CV 8/10; 4/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.0001, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(200, 100), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=sgd
[CV 8/10; 4/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.0001, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(200, 100), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=sgd;, score=0.203 total time=52.5min
[CV 9/10; 4/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.0001, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(200, 100), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=sgd
[CV 9/10; 4/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.0001, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(200, 100), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=sgd;, score=0.222 total time=73.5min
[CV 10/10; 4/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.0001, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(200, 100), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=sgd
[CV 10/10; 4/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.0001, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(200, 100), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=sgd;, score=0.217 total time=81.7min
[CV 1/10; 5/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=adam
[CV 1/10; 5/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=adam;, score=0.183 total time= 7.2min
[CV 2/10; 5/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=adam
[CV 2/10; 5/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=adam;, score=0.195 total time=15.1min
[CV 3/10; 5/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=adam
[CV 3/10; 5/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=adam;, score=0.184 total time= 6.5min
[CV 4/10; 5/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=adam
[CV 4/10; 5/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=adam;, score=0.191 total time=10.2min
[CV 5/10; 5/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=adam
[CV 5/10; 5/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=adam;, score=0.189 total time= 8.2min
[CV 6/10; 5/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=adam
[CV 6/10; 5/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=adam;, score=0.202 total time=17.5min
[CV 7/10; 5/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=adam
[CV 7/10; 5/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=adam;, score=0.193 total time=15.7min
[CV 8/10; 5/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=adam
[CV 8/10; 5/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=adam;, score=0.184 total time= 6.9min
[CV 9/10; 5/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=adam
[CV 9/10; 5/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=adam;, score=0.196 total time= 7.3min
[CV 10/10; 5/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=adam
[CV 10/10; 5/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=adam;, score=0.198 total time= 7.6min
[CV 1/10; 6/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=sgd
[CV 1/10; 6/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=sgd;, score=0.086 total time= 4.7min
[CV 2/10; 6/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=sgd
[CV 2/10; 6/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=sgd;, score=0.086 total time= 5.5min
[CV 3/10; 6/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=sgd
[CV 3/10; 6/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=sgd;, score=0.086 total time= 5.4min
[CV 4/10; 6/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=sgd
[CV 4/10; 6/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=sgd;, score=0.086 total time= 5.3min
[CV 5/10; 6/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=sgd
[CV 5/10; 6/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=sgd;, score=0.086 total time= 5.4min
[CV 6/10; 6/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=sgd
[CV 6/10; 6/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=sgd;, score=0.086 total time= 5.4min
[CV 7/10; 6/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=sgd
[CV 7/10; 6/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=sgd;, score=0.086 total time= 5.6min
[CV 8/10; 6/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=sgd
/home/externo/rafaelrm/algoritmos/run_pipeline_target_categoria_26012023/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/joblib/externals/loky/process_executor.py:700: UserWarning: A worker stopped while some jobs were given to the executor. This can be caused by a too short worker timeout or by a memory leak.
  warnings.warn(
[CV 8/10; 6/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=sgd;, score=0.086 total time= 5.2min
[CV 9/10; 6/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=sgd
[CV 9/10; 6/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=sgd;, score=0.086 total time= 5.3min
[CV 10/10; 6/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=sgd
[CV 10/10; 6/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=sgd;, score=0.086 total time= 5.5min
[CV 1/10; 7/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=adam
[CV 1/10; 7/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=adam;, score=0.199 total time=33.4min
[CV 2/10; 7/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=adam
[CV 2/10; 7/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=adam;, score=0.200 total time=12.0min
[CV 3/10; 7/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=adam
[CV 3/10; 7/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=adam;, score=0.203 total time=24.8min
[CV 4/10; 7/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=adam
[CV 4/10; 7/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=adam;, score=0.193 total time= 6.2min
[CV 5/10; 7/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=adam
[CV 5/10; 7/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=adam;, score=0.193 total time= 7.8min
[CV 6/10; 7/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=adam
[CV 6/10; 7/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=adam;, score=0.193 total time=18.9min
[CV 7/10; 7/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=adam
[CV 7/10; 7/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=adam;, score=0.201 total time=37.7min
[CV 8/10; 7/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=adam
[CV 8/10; 7/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=adam;, score=0.192 total time= 9.2min
[CV 9/10; 7/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=adam
[CV 9/10; 7/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=adam;, score=0.196 total time=10.0min
[CV 10/10; 7/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=adam
[CV 10/10; 7/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=adam;, score=0.196 total time=12.8min
[CV 1/10; 8/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=sgd
/home/externo/rafaelrm/algoritmos/run_pipeline_target_categoria_26012023/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/joblib/externals/loky/process_executor.py:700: UserWarning: A worker stopped while some jobs were given to the executor. This can be caused by a too short worker timeout or by a memory leak.
  warnings.warn(
[CV 1/10; 8/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=sgd;, score=0.086 total time= 5.1min
[CV 2/10; 8/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=sgd
[CV 2/10; 8/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=sgd;, score=0.086 total time= 4.8min
[CV 3/10; 8/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=sgd
[CV 3/10; 8/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=sgd;, score=0.086 total time= 4.8min
[CV 4/10; 8/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=sgd
[CV 4/10; 8/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=sgd;, score=0.086 total time= 4.3min
[CV 5/10; 8/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=sgd
[CV 5/10; 8/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=sgd;, score=0.086 total time= 5.0min
[CV 6/10; 8/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=sgd
/home/externo/rafaelrm/algoritmos/run_pipeline_target_categoria_26012023/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/joblib/externals/loky/process_executor.py:700: UserWarning: A worker stopped while some jobs were given to the executor. This can be caused by a too short worker timeout or by a memory leak.
  warnings.warn(
[CV 6/10; 8/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=sgd;, score=0.086 total time= 5.3min
[CV 7/10; 8/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=sgd
[CV 7/10; 8/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=sgd;, score=0.086 total time= 4.5min
[CV 8/10; 8/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=sgd
[CV 8/10; 8/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=sgd;, score=0.086 total time= 5.2min
[CV 9/10; 8/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=sgd
/home/externo/rafaelrm/algoritmos/run_pipeline_target_categoria_26012023/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/joblib/externals/loky/process_executor.py:700: UserWarning: A worker stopped while some jobs were given to the executor. This can be caused by a too short worker timeout or by a memory leak.
  warnings.warn(
[CV 9/10; 8/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=sgd;, score=0.086 total time= 5.3min
[CV 10/10; 8/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=sgd
[CV 10/10; 8/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=sgd;, score=0.086 total time= 5.3min
[CV 1/10; 9/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=adam
[CV 1/10; 9/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=adam;, score=0.191 total time=10.4min
[CV 2/10; 9/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=adam
[CV 2/10; 9/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=adam;, score=0.188 total time= 8.2min
[CV 3/10; 9/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=adam
[CV 3/10; 9/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=adam;, score=0.204 total time=21.5min
[CV 4/10; 9/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=adam
[CV 4/10; 9/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=adam;, score=0.198 total time= 9.6min
[CV 5/10; 9/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=adam
[CV 5/10; 9/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=adam;, score=0.196 total time= 8.9min
[CV 6/10; 9/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=adam
[CV 6/10; 9/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=adam;, score=0.182 total time= 7.3min
[CV 7/10; 9/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=adam
[CV 7/10; 9/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=adam;, score=0.199 total time= 6.4min
[CV 8/10; 9/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=adam
[CV 8/10; 9/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=adam;, score=0.201 total time=16.1min
[CV 9/10; 9/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=adam
[CV 9/10; 9/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=adam;, score=0.200 total time= 6.9min
[CV 10/10; 9/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=adam
[CV 10/10; 9/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=adam;, score=0.205 total time=14.5min
[CV 1/10; 10/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=sgd
[CV 1/10; 10/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=sgd;, score=0.086 total time= 4.5min
[CV 2/10; 10/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=sgd
[CV 2/10; 10/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=sgd;, score=0.086 total time= 5.0min
[CV 3/10; 10/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=sgd
[CV 3/10; 10/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=sgd;, score=0.086 total time= 5.8min
[CV 4/10; 10/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=sgd
[CV 4/10; 10/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=sgd;, score=0.086 total time= 4.4min
[CV 5/10; 10/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=sgd
[CV 5/10; 10/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=sgd;, score=0.086 total time= 5.4min
[CV 6/10; 10/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=sgd
[CV 6/10; 10/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=sgd;, score=0.086 total time= 4.4min
[CV 7/10; 10/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=sgd
[CV 7/10; 10/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=sgd;, score=0.086 total time= 5.1min
[CV 8/10; 10/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=sgd
[CV 8/10; 10/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=sgd;, score=0.086 total time= 4.5min
[CV 9/10; 10/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=sgd
[CV 9/10; 10/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=sgd;, score=0.086 total time= 5.2min
[CV 10/10; 10/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=sgd
/home/externo/rafaelrm/algoritmos/run_pipeline_target_categoria_26012023/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/joblib/externals/loky/process_executor.py:700: UserWarning: A worker stopped while some jobs were given to the executor. This can be caused by a too short worker timeout or by a memory leak.
  warnings.warn(
[CV 10/10; 10/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=sgd;, score=0.086 total time= 5.3min
[CV 1/10; 11/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=adam
[CV 1/10; 11/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=adam;, score=0.204 total time=11.3min
[CV 2/10; 11/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=adam
[CV 2/10; 11/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=adam;, score=0.189 total time= 6.6min
[CV 3/10; 11/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=adam
[CV 3/10; 11/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=adam;, score=0.196 total time= 9.6min
[CV 4/10; 11/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=adam
[CV 4/10; 11/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=adam;, score=0.205 total time= 9.6min
[CV 5/10; 11/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=adam
[CV 5/10; 11/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=adam;, score=0.196 total time= 7.1min
[CV 6/10; 11/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=adam
[CV 6/10; 11/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=adam;, score=0.201 total time=29.1min
[CV 7/10; 11/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=adam
[CV 7/10; 11/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=adam;, score=0.192 total time=14.1min
[CV 8/10; 11/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=adam
[CV 8/10; 11/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=adam;, score=0.213 total time=23.1min
[CV 9/10; 11/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=adam
[CV 9/10; 11/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=adam;, score=0.193 total time= 9.2min
[CV 10/10; 11/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=adam
[CV 10/10; 11/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=adam;, score=0.214 total time=32.2min
[CV 1/10; 12/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=sgd
/home/externo/rafaelrm/algoritmos/run_pipeline_target_categoria_26012023/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/joblib/externals/loky/process_executor.py:700: UserWarning: A worker stopped while some jobs were given to the executor. This can be caused by a too short worker timeout or by a memory leak.
  warnings.warn(
[CV 1/10; 12/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=sgd;, score=0.086 total time= 4.9min
[CV 2/10; 12/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=sgd
/home/externo/rafaelrm/algoritmos/run_pipeline_target_categoria_26012023/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/joblib/externals/loky/process_executor.py:700: UserWarning: A worker stopped while some jobs were given to the executor. This can be caused by a too short worker timeout or by a memory leak.
  warnings.warn(
[CV 2/10; 12/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=sgd;, score=0.086 total time= 4.6min
[CV 3/10; 12/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=sgd
[CV 3/10; 12/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=sgd;, score=0.086 total time= 5.1min
[CV 4/10; 12/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=sgd
[CV 4/10; 12/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=sgd;, score=0.086 total time= 4.6min
[CV 5/10; 12/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=sgd
[CV 5/10; 12/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=sgd;, score=0.086 total time= 5.1min
[CV 6/10; 12/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=sgd
[CV 6/10; 12/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=sgd;, score=0.086 total time= 5.4min
[CV 7/10; 12/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=sgd
[CV 7/10; 12/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=sgd;, score=0.086 total time= 4.7min
[CV 8/10; 12/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=sgd
/home/externo/rafaelrm/algoritmos/run_pipeline_target_categoria_26012023/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/joblib/externals/loky/process_executor.py:700: UserWarning: A worker stopped while some jobs were given to the executor. This can be caused by a too short worker timeout or by a memory leak.
  warnings.warn(
[CV 8/10; 12/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=sgd;, score=0.086 total time= 5.3min
[CV 9/10; 12/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=sgd
[CV 9/10; 12/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=sgd;, score=0.086 total time= 4.7min
[CV 10/10; 12/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=sgd
[CV 10/10; 12/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=sgd;, score=0.086 total time= 5.6min
[CV 1/10; 13/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=adam
[CV 1/10; 13/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=adam;, score=0.205 total time=10.3min
[CV 2/10; 13/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=adam
[CV 2/10; 13/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=adam;, score=0.211 total time=15.3min
[CV 3/10; 13/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=adam
[CV 3/10; 13/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=adam;, score=0.195 total time=16.8min
[CV 4/10; 13/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=adam
[CV 4/10; 13/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=adam;, score=0.190 total time= 7.5min
[CV 5/10; 13/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=adam
[CV 5/10; 13/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=adam;, score=0.212 total time= 6.9min
[CV 6/10; 13/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=adam
[CV 6/10; 13/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=adam;, score=0.205 total time=14.3min
[CV 7/10; 13/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=adam
[CV 7/10; 13/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=adam;, score=0.209 total time=16.4min
[CV 8/10; 13/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=adam
[CV 8/10; 13/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=adam;, score=0.207 total time=10.8min
[CV 9/10; 13/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=adam
[CV 9/10; 13/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=adam;, score=0.201 total time=17.2min
[CV 10/10; 13/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=adam
[CV 10/10; 13/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=adam;, score=0.203 total time=21.3min
[CV 1/10; 14/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=sgd
[CV 1/10; 14/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=sgd;, score=0.086 total time= 5.5min
[CV 2/10; 14/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=sgd
[CV 2/10; 14/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=sgd;, score=0.086 total time= 5.4min
[CV 3/10; 14/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=sgd
[CV 3/10; 14/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=sgd;, score=0.086 total time= 4.8min
[CV 4/10; 14/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=sgd
[CV 4/10; 14/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=sgd;, score=0.086 total time= 4.7min
[CV 5/10; 14/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=sgd
[CV 5/10; 14/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=sgd;, score=0.086 total time= 5.3min
[CV 6/10; 14/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=sgd
[CV 6/10; 14/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=sgd;, score=0.086 total time= 4.8min
[CV 7/10; 14/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=sgd
[CV 7/10; 14/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=sgd;, score=0.086 total time= 5.4min
[CV 8/10; 14/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=sgd
[CV 8/10; 14/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=sgd;, score=0.086 total time= 4.7min
[CV 9/10; 14/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=sgd
[CV 9/10; 14/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=sgd;, score=0.086 total time= 5.0min
[CV 10/10; 14/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=sgd
[CV 10/10; 14/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=sgd;, score=0.086 total time= 4.7min
[CV 1/10; 15/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=adam
[CV 1/10; 15/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=adam;, score=0.197 total time=11.0min
[CV 2/10; 15/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=adam
[CV 2/10; 15/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=adam;, score=0.212 total time=16.8min
[CV 3/10; 15/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=adam
[CV 3/10; 15/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=adam;, score=0.207 total time=19.5min
[CV 4/10; 15/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=adam
[CV 4/10; 15/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=adam;, score=0.194 total time=16.9min
[CV 5/10; 15/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=adam
[CV 5/10; 15/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=adam;, score=0.202 total time=18.1min
[CV 6/10; 15/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=adam
[CV 6/10; 15/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=adam;, score=0.199 total time=13.2min
[CV 7/10; 15/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=adam
[CV 7/10; 15/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=adam;, score=0.201 total time=19.9min
[CV 8/10; 15/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=adam
[CV 8/10; 15/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=adam;, score=0.203 total time=15.1min
[CV 9/10; 15/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=adam
[CV 9/10; 15/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=adam;, score=0.209 total time=16.1min
[CV 10/10; 15/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=adam
[CV 10/10; 15/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=adam;, score=0.200 total time= 8.5min
[CV 1/10; 16/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=sgd
[CV 1/10; 16/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=sgd;, score=0.086 total time= 5.4min
[CV 2/10; 16/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=sgd
[CV 2/10; 16/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=sgd;, score=0.086 total time= 5.4min
[CV 3/10; 16/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=sgd
[CV 3/10; 16/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=sgd;, score=0.086 total time= 5.4min
[CV 4/10; 16/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=sgd
[CV 4/10; 16/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=sgd;, score=0.086 total time= 5.6min
[CV 5/10; 16/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=sgd
[CV 5/10; 16/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=sgd;, score=0.086 total time= 4.8min
[CV 6/10; 16/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=sgd
/home/externo/rafaelrm/algoritmos/run_pipeline_target_categoria_26012023/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/joblib/externals/loky/process_executor.py:700: UserWarning: A worker stopped while some jobs were given to the executor. This can be caused by a too short worker timeout or by a memory leak.
  warnings.warn(
[CV 6/10; 16/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=sgd;, score=0.086 total time= 5.2min
[CV 7/10; 16/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=sgd
/home/externo/rafaelrm/algoritmos/run_pipeline_target_categoria_26012023/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/joblib/externals/loky/process_executor.py:700: UserWarning: A worker stopped while some jobs were given to the executor. This can be caused by a too short worker timeout or by a memory leak.
  warnings.warn(
[CV 7/10; 16/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=sgd;, score=0.086 total time= 4.9min
[CV 8/10; 16/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=sgd
/home/externo/rafaelrm/algoritmos/run_pipeline_target_categoria_26012023/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/joblib/externals/loky/process_executor.py:700: UserWarning: A worker stopped while some jobs were given to the executor. This can be caused by a too short worker timeout or by a memory leak.
  warnings.warn(
/home/externo/rafaelrm/algoritmos/run_pipeline_target_categoria_26012023/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/joblib/externals/loky/process_executor.py:700: UserWarning: A worker stopped while some jobs were given to the executor. This can be caused by a too short worker timeout or by a memory leak.
  warnings.warn(
[CV 8/10; 16/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=sgd;, score=0.086 total time= 5.2min
[CV 9/10; 16/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=sgd
[CV 9/10; 16/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=sgd;, score=0.086 total time= 5.6min
[CV 10/10; 16/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=sgd
[CV 10/10; 16/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=sgd;, score=0.086 total time= 4.3min
[CV 1/10; 17/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=adam
[CV 1/10; 17/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=adam;, score=0.195 total time=11.0min
[CV 2/10; 17/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=adam
[CV 2/10; 17/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=adam;, score=0.200 total time=11.2min
[CV 3/10; 17/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=adam
[CV 3/10; 17/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=adam;, score=0.204 total time=14.5min
[CV 4/10; 17/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=adam
[CV 4/10; 17/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=adam;, score=0.206 total time=15.0min
[CV 5/10; 17/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=adam
[CV 5/10; 17/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=adam;, score=0.205 total time=17.6min
[CV 6/10; 17/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=adam
[CV 6/10; 17/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=adam;, score=0.214 total time=15.9min
[CV 7/10; 17/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=adam
[CV 7/10; 17/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=adam;, score=0.200 total time=18.2min
[CV 8/10; 17/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=adam
[CV 8/10; 17/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=adam;, score=0.204 total time=10.1min
[CV 9/10; 17/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=adam
[CV 9/10; 17/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=adam;, score=0.197 total time=12.0min
[CV 10/10; 17/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=adam
[CV 10/10; 17/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=adam;, score=0.200 total time=20.9min
[CV 1/10; 18/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=sgd
[CV 1/10; 18/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=sgd;, score=0.086 total time= 4.8min
[CV 2/10; 18/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=sgd
[CV 2/10; 18/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=sgd;, score=0.086 total time= 5.4min
[CV 3/10; 18/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=sgd
[CV 3/10; 18/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=sgd;, score=0.086 total time= 4.8min
[CV 4/10; 18/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=sgd
[CV 4/10; 18/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=sgd;, score=0.086 total time= 5.4min
[CV 5/10; 18/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=sgd
[CV 5/10; 18/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=sgd;, score=0.086 total time= 4.3min
[CV 6/10; 18/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=sgd
[CV 6/10; 18/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=sgd;, score=0.086 total time= 4.6min
[CV 7/10; 18/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=sgd
[CV 7/10; 18/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=sgd;, score=0.086 total time= 4.5min
[CV 8/10; 18/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=sgd
[CV 8/10; 18/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=sgd;, score=0.086 total time= 4.9min
[CV 9/10; 18/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=sgd
[CV 9/10; 18/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=sgd;, score=0.086 total time= 5.4min
[CV 10/10; 18/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=sgd
[CV 10/10; 18/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=sgd;, score=0.086 total time= 5.5min
[CV 1/10; 19/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=adam
[CV 1/10; 19/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=adam;, score=0.196 total time=11.7min
[CV 2/10; 19/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=adam
[CV 2/10; 19/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=adam;, score=0.201 total time=10.3min
[CV 3/10; 19/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=adam
[CV 3/10; 19/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=adam;, score=0.205 total time=12.1min
[CV 4/10; 19/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=adam
[CV 4/10; 19/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=adam;, score=0.207 total time=10.5min
[CV 5/10; 19/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=adam
[CV 5/10; 19/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=adam;, score=0.213 total time=15.1min
[CV 6/10; 19/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=adam
[CV 6/10; 19/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=adam;, score=0.205 total time=10.6min
[CV 7/10; 19/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=adam
[CV 7/10; 19/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=adam;, score=0.217 total time=14.9min
[CV 8/10; 19/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=adam
[CV 8/10; 19/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=adam;, score=0.209 total time= 9.4min
[CV 9/10; 19/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=adam
[CV 9/10; 19/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=adam;, score=0.210 total time=15.1min
[CV 10/10; 19/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=adam
[CV 10/10; 19/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=adam;, score=0.207 total time=16.2min
[CV 1/10; 20/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=sgd
[CV 1/10; 20/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=sgd;, score=0.086 total time= 4.6min
[CV 2/10; 20/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=sgd
[CV 2/10; 20/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=sgd;, score=0.162 total time= 8.0min
[CV 3/10; 20/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=sgd
[CV 3/10; 20/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=sgd;, score=0.157 total time= 9.9min
[CV 4/10; 20/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=sgd
[CV 4/10; 20/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=sgd;, score=0.159 total time=10.4min
[CV 5/10; 20/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=sgd
[CV 5/10; 20/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=sgd;, score=0.086 total time= 4.5min
[CV 6/10; 20/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=sgd
[CV 6/10; 20/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=sgd;, score=0.160 total time=13.7min
[CV 7/10; 20/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=sgd
[CV 7/10; 20/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=sgd;, score=0.163 total time= 9.7min
[CV 8/10; 20/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=sgd
[CV 8/10; 20/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=sgd;, score=0.161 total time=15.2min
[CV 9/10; 20/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=sgd
[CV 9/10; 20/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=sgd;, score=0.162 total time=10.7min
[CV 10/10; 20/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=sgd
[CV 10/10; 20/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=sgd;, score=0.160 total time=10.1min
[CV 1/10; 21/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=adam
[CV 1/10; 21/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=adam;, score=0.184 total time= 6.8min
[CV 2/10; 21/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=adam
[CV 2/10; 21/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=adam;, score=0.203 total time=17.4min
[CV 3/10; 21/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=adam
[CV 3/10; 21/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=adam;, score=0.190 total time= 8.1min
[CV 4/10; 21/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=adam
[CV 4/10; 21/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=adam;, score=0.198 total time=28.3min
[CV 5/10; 21/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=adam
[CV 5/10; 21/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=adam;, score=0.205 total time=25.8min
[CV 6/10; 21/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=adam
[CV 6/10; 21/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=adam;, score=0.199 total time=37.5min
[CV 7/10; 21/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=adam
[CV 7/10; 21/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=adam;, score=0.201 total time= 9.0min
[CV 8/10; 21/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=adam
[CV 8/10; 21/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=adam;, score=0.189 total time= 8.1min
[CV 9/10; 21/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=adam
[CV 9/10; 21/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=adam;, score=0.187 total time= 7.7min
[CV 10/10; 21/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=adam
[CV 10/10; 21/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=adam;, score=0.194 total time= 7.7min
[CV 1/10; 22/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=sgd
[CV 1/10; 22/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=sgd;, score=0.086 total time=17.5min
[CV 2/10; 22/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=sgd
[CV 2/10; 22/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=sgd;, score=0.086 total time=17.1min
[CV 3/10; 22/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=sgd
[CV 3/10; 22/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=sgd;, score=0.086 total time=17.3min
[CV 4/10; 22/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=sgd
[CV 4/10; 22/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=sgd;, score=0.086 total time=17.9min
[CV 5/10; 22/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=sgd
[CV 5/10; 22/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=sgd;, score=0.086 total time=18.4min
[CV 6/10; 22/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=sgd
[CV 6/10; 22/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=sgd;, score=0.086 total time=18.3min
[CV 7/10; 22/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=sgd
[CV 7/10; 22/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=sgd;, score=0.086 total time=19.7min
[CV 8/10; 22/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=sgd
[CV 8/10; 22/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=sgd;, score=0.086 total time=18.7min
[CV 9/10; 22/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=sgd
[CV 9/10; 22/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=sgd;, score=0.086 total time=18.0min
[CV 10/10; 22/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=sgd
[CV 10/10; 22/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=sgd;, score=0.086 total time=17.6min
[CV 1/10; 23/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=adam
[CV 1/10; 23/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=adam;, score=0.191 total time= 8.3min
[CV 2/10; 23/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=adam
[CV 2/10; 23/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=adam;, score=0.184 total time= 8.9min
[CV 3/10; 23/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=adam
[CV 3/10; 23/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=adam;, score=0.208 total time=33.2min
[CV 4/10; 23/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=adam
[CV 4/10; 23/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=adam;, score=0.188 total time= 9.3min
[CV 5/10; 23/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=adam
[CV 5/10; 23/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=adam;, score=0.210 total time=11.0min
[CV 6/10; 23/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=adam
[CV 6/10; 23/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=adam;, score=0.187 total time= 6.3min
[CV 7/10; 23/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=adam
[CV 7/10; 23/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=adam;, score=0.200 total time=19.3min
[CV 8/10; 23/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=adam
[CV 8/10; 23/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=adam;, score=0.195 total time= 9.3min
[CV 9/10; 23/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=adam
[CV 9/10; 23/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=adam;, score=0.204 total time=14.5min
[CV 10/10; 23/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=adam
[CV 10/10; 23/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=adam;, score=0.193 total time= 8.3min
[CV 1/10; 24/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=sgd
[CV 1/10; 24/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=sgd;, score=0.086 total time=16.8min
[CV 2/10; 24/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=sgd
[CV 2/10; 24/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=sgd;, score=0.086 total time=16.9min
[CV 3/10; 24/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=sgd
[CV 3/10; 24/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=sgd;, score=0.086 total time=17.0min
[CV 4/10; 24/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=sgd
[CV 4/10; 24/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=sgd;, score=0.086 total time=17.3min
[CV 5/10; 24/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=sgd
[CV 5/10; 24/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=sgd;, score=0.086 total time=17.1min
[CV 6/10; 24/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=sgd
[CV 6/10; 24/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=sgd;, score=0.086 total time=18.4min
[CV 7/10; 24/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=sgd
[CV 7/10; 24/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=sgd;, score=0.086 total time=17.0min
[CV 8/10; 24/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=sgd
[CV 8/10; 24/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=sgd;, score=0.086 total time=17.4min
[CV 9/10; 24/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=sgd
[CV 9/10; 24/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=sgd;, score=0.086 total time=19.1min
[CV 10/10; 24/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=sgd
[CV 10/10; 24/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=sgd;, score=0.086 total time=17.8min
[CV 1/10; 25/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=adam
[CV 1/10; 25/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=adam;, score=0.201 total time=34.6min
[CV 2/10; 25/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=adam
[CV 2/10; 25/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=adam;, score=0.200 total time=27.7min
[CV 3/10; 25/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=adam
[CV 3/10; 25/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=adam;, score=0.190 total time= 8.1min
[CV 4/10; 25/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=adam
[CV 4/10; 25/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=adam;, score=0.192 total time= 7.9min
[CV 5/10; 25/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=adam
[CV 5/10; 25/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=adam;, score=0.197 total time= 9.9min
[CV 6/10; 25/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=adam
[CV 6/10; 25/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=adam;, score=0.194 total time=14.3min
[CV 7/10; 25/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=adam
[CV 7/10; 25/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=adam;, score=0.196 total time=31.2min
[CV 8/10; 25/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=adam
[CV 8/10; 25/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=adam;, score=0.191 total time= 5.5min
[CV 9/10; 25/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=adam
[CV 9/10; 25/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=adam;, score=0.194 total time= 8.0min
[CV 10/10; 25/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=adam
[CV 10/10; 25/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=adam;, score=0.184 total time= 5.8min
[CV 1/10; 26/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=sgd
[CV 1/10; 26/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=sgd;, score=0.086 total time=17.4min
[CV 2/10; 26/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=sgd
[CV 2/10; 26/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=sgd;, score=0.086 total time=17.7min
[CV 3/10; 26/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=sgd
[CV 3/10; 26/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=sgd;, score=0.086 total time=18.3min
[CV 4/10; 26/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=sgd
[CV 4/10; 26/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=sgd;, score=0.086 total time=16.8min
[CV 5/10; 26/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=sgd
[CV 5/10; 26/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=sgd;, score=0.086 total time=18.3min
[CV 6/10; 26/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=sgd
[CV 6/10; 26/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=sgd;, score=0.086 total time=19.1min
[CV 7/10; 26/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=sgd
[CV 7/10; 26/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=sgd;, score=0.086 total time=18.8min
[CV 8/10; 26/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=sgd
[CV 8/10; 26/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=sgd;, score=0.086 total time=19.1min
[CV 9/10; 26/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=sgd
[CV 9/10; 26/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=sgd;, score=0.086 total time=17.7min
[CV 10/10; 26/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=sgd
[CV 10/10; 26/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=sgd;, score=0.086 total time=16.6min
[CV 1/10; 27/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=adam
[CV 1/10; 27/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=adam;, score=0.200 total time=10.2min
[CV 2/10; 27/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=adam
[CV 2/10; 27/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=adam;, score=0.203 total time=11.6min
[CV 3/10; 27/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=adam
[CV 3/10; 27/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=adam;, score=0.189 total time= 8.3min
[CV 4/10; 27/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=adam
[CV 4/10; 27/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=adam;, score=0.193 total time= 8.0min
[CV 5/10; 27/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=adam
[CV 5/10; 27/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=adam;, score=0.193 total time= 7.6min
[CV 6/10; 27/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=adam
[CV 6/10; 27/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=adam;, score=0.205 total time=32.0min
[CV 7/10; 27/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=adam
[CV 7/10; 27/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=adam;, score=0.207 total time=20.4min
[CV 8/10; 27/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=adam
[CV 8/10; 27/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=adam;, score=0.198 total time=21.5min
[CV 9/10; 27/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=adam
[CV 9/10; 27/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=adam;, score=0.195 total time=24.4min
[CV 10/10; 27/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=adam
[CV 10/10; 27/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=adam;, score=0.193 total time= 7.8min
[CV 1/10; 28/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=sgd
[CV 1/10; 28/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=sgd;, score=0.086 total time=18.9min
[CV 2/10; 28/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=sgd
[CV 2/10; 28/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=sgd;, score=0.086 total time=17.4min
[CV 3/10; 28/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=sgd
[CV 3/10; 28/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=sgd;, score=0.086 total time=18.9min
[CV 4/10; 28/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=sgd
[CV 4/10; 28/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=sgd;, score=0.086 total time=19.3min
[CV 5/10; 28/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=sgd
[CV 5/10; 28/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=sgd;, score=0.086 total time=17.4min
[CV 6/10; 28/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=sgd
[CV 6/10; 28/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=sgd;, score=0.086 total time=18.2min
[CV 7/10; 28/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=sgd
[CV 7/10; 28/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=sgd;, score=0.086 total time=18.6min
[CV 8/10; 28/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=sgd
[CV 8/10; 28/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=sgd;, score=0.086 total time=18.6min
[CV 9/10; 28/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=sgd
[CV 9/10; 28/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=sgd;, score=0.086 total time=18.2min
[CV 10/10; 28/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=sgd
[CV 10/10; 28/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=sgd;, score=0.086 total time=17.8min
[CV 1/10; 29/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=adam
[CV 1/10; 29/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=adam;, score=0.204 total time=14.6min
[CV 2/10; 29/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=adam
[CV 2/10; 29/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=adam;, score=0.199 total time=10.9min
[CV 3/10; 29/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=adam
[CV 3/10; 29/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=adam;, score=0.209 total time=17.0min
[CV 4/10; 29/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=adam
[CV 4/10; 29/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=adam;, score=0.198 total time=10.6min
[CV 5/10; 29/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=adam
[CV 5/10; 29/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=adam;, score=0.195 total time=18.3min
[CV 6/10; 29/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=adam
[CV 6/10; 29/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=adam;, score=0.197 total time=12.7min
[CV 7/10; 29/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=adam
[CV 7/10; 29/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=adam;, score=0.211 total time=16.8min
[CV 8/10; 29/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=adam
[CV 8/10; 29/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=adam;, score=0.211 total time=10.5min
[CV 9/10; 29/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=adam
[CV 9/10; 29/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=adam;, score=0.199 total time=32.2min
[CV 10/10; 29/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=adam
[CV 10/10; 29/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=adam;, score=0.205 total time=17.1min
[CV 1/10; 30/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=sgd
[CV 1/10; 30/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=sgd;, score=0.086 total time=29.2min
[CV 2/10; 30/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=sgd
[CV 2/10; 30/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=sgd;, score=0.086 total time=25.7min
[CV 3/10; 30/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=sgd
[CV 3/10; 30/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=sgd;, score=0.086 total time=25.5min
[CV 4/10; 30/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=sgd
[CV 4/10; 30/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=sgd;, score=0.086 total time=28.1min
[CV 5/10; 30/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=sgd
[CV 5/10; 30/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=sgd;, score=0.086 total time=26.9min
[CV 6/10; 30/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=sgd
[CV 6/10; 30/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=sgd;, score=0.086 total time=27.8min
[CV 7/10; 30/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=sgd
[CV 7/10; 30/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=sgd;, score=0.086 total time=27.1min
[CV 8/10; 30/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=sgd
[CV 8/10; 30/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=sgd;, score=0.086 total time=24.1min
[CV 9/10; 30/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=sgd
[CV 9/10; 30/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=sgd;, score=0.086 total time=26.3min
[CV 10/10; 30/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=sgd
[CV 10/10; 30/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=sgd;, score=0.086 total time=25.5min
[CV 1/10; 31/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=adam
[CV 1/10; 31/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=adam;, score=0.208 total time=17.1min
[CV 2/10; 31/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=adam
[CV 2/10; 31/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=adam;, score=0.194 total time=18.4min
[CV 3/10; 31/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=adam
[CV 3/10; 31/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=adam;, score=0.199 total time=11.9min
[CV 4/10; 31/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=adam
[CV 4/10; 31/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=adam;, score=0.207 total time= 8.7min
[CV 5/10; 31/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=adam
[CV 5/10; 31/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=adam;, score=0.206 total time=21.0min
[CV 6/10; 31/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=adam
[CV 6/10; 31/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=adam;, score=0.200 total time=12.9min
[CV 7/10; 31/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=adam
[CV 7/10; 31/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=adam;, score=0.195 total time=11.6min
[CV 8/10; 31/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=adam
[CV 8/10; 31/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=adam;, score=0.205 total time=14.7min
[CV 9/10; 31/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=adam
[CV 9/10; 31/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=adam;, score=0.205 total time=13.3min
[CV 10/10; 31/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=adam
[CV 10/10; 31/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=adam;, score=0.213 total time=12.7min
[CV 1/10; 32/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=sgd
[CV 1/10; 32/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=sgd;, score=0.086 total time=27.5min
[CV 2/10; 32/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=sgd
[CV 2/10; 32/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=sgd;, score=0.086 total time=24.7min
[CV 3/10; 32/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=sgd
[CV 3/10; 32/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=sgd;, score=0.086 total time=26.1min
[CV 4/10; 32/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=sgd
[CV 4/10; 32/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=sgd;, score=0.086 total time=25.3min
[CV 5/10; 32/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=sgd
[CV 5/10; 32/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=sgd;, score=0.086 total time=25.3min
[CV 6/10; 32/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=sgd
[CV 6/10; 32/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=sgd;, score=0.086 total time=26.8min
[CV 7/10; 32/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=sgd
[CV 7/10; 32/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=sgd;, score=0.086 total time=24.4min
[CV 8/10; 32/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=sgd
[CV 8/10; 32/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=sgd;, score=0.086 total time=27.5min
[CV 9/10; 32/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=sgd
[CV 9/10; 32/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=sgd;, score=0.086 total time=26.7min
[CV 10/10; 32/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=sgd
[CV 10/10; 32/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=sgd;, score=0.086 total time=26.1min
[CV 1/10; 33/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=adam
[CV 1/10; 33/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=adam;, score=0.204 total time=17.1min
[CV 2/10; 33/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=adam
[CV 2/10; 33/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=adam;, score=0.211 total time=10.0min
[CV 3/10; 33/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=adam
[CV 3/10; 33/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=adam;, score=0.203 total time=13.9min
[CV 4/10; 33/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=adam
[CV 4/10; 33/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=adam;, score=0.207 total time=13.1min
[CV 5/10; 33/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=adam
[CV 5/10; 33/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=adam;, score=0.210 total time=14.4min
[CV 6/10; 33/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=adam
[CV 6/10; 33/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=adam;, score=0.214 total time=13.5min
[CV 7/10; 33/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=adam
[CV 7/10; 33/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=adam;, score=0.197 total time=14.0min
[CV 8/10; 33/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=adam
[CV 8/10; 33/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=adam;, score=0.200 total time=14.2min
[CV 9/10; 33/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=adam
[CV 9/10; 33/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=adam;, score=0.201 total time=17.5min
[CV 10/10; 33/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=adam
[CV 10/10; 33/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=adam;, score=0.217 total time=15.9min
[CV 1/10; 34/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=sgd
[CV 1/10; 34/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=sgd;, score=0.086 total time=25.6min
[CV 2/10; 34/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=sgd
[CV 2/10; 34/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=sgd;, score=0.086 total time=26.3min
[CV 3/10; 34/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=sgd
[CV 3/10; 34/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=sgd;, score=0.086 total time=26.3min
[CV 4/10; 34/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=sgd
[CV 4/10; 34/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=sgd;, score=0.086 total time=27.5min
[CV 5/10; 34/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=sgd
[CV 5/10; 34/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=sgd;, score=0.086 total time=27.0min
[CV 6/10; 34/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=sgd
[CV 6/10; 34/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=sgd;, score=0.086 total time=28.1min
[CV 7/10; 34/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=sgd
[CV 7/10; 34/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=sgd;, score=0.086 total time=26.9min
[CV 8/10; 34/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=sgd
[CV 8/10; 34/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=sgd;, score=0.086 total time=27.6min
[CV 9/10; 34/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=sgd
[CV 9/10; 34/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=sgd;, score=0.086 total time=26.4min
[CV 10/10; 34/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=sgd
[CV 10/10; 34/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.6, classifier__estimator__solver=sgd;, score=0.086 total time=27.9min
[CV 1/10; 35/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=adam
[CV 1/10; 35/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=adam;, score=0.201 total time=10.8min
[CV 2/10; 35/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=adam
[CV 2/10; 35/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=adam;, score=0.198 total time= 8.9min
[CV 3/10; 35/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=adam
[CV 3/10; 35/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=adam;, score=0.207 total time=14.3min
[CV 4/10; 35/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=adam
[CV 4/10; 35/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=adam;, score=0.216 total time= 9.9min
[CV 5/10; 35/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=adam
[CV 5/10; 35/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=adam;, score=0.197 total time=15.6min
[CV 6/10; 35/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=adam
[CV 6/10; 35/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=adam;, score=0.215 total time=11.7min
[CV 7/10; 35/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=adam
[CV 7/10; 35/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=adam;, score=0.205 total time=14.6min
[CV 8/10; 35/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=adam
[CV 8/10; 35/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=adam;, score=0.199 total time=16.0min
[CV 9/10; 35/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=adam
[CV 9/10; 35/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=adam;, score=0.218 total time=13.1min
[CV 10/10; 35/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=adam
[CV 10/10; 35/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=adam;, score=0.214 total time=11.1min
[CV 1/10; 36/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=sgd
[CV 1/10; 36/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=sgd;, score=0.151 total time=31.7min
[CV 2/10; 36/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=sgd
[CV 2/10; 36/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=sgd;, score=0.159 total time=31.8min
[CV 3/10; 36/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=sgd
[CV 3/10; 36/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=sgd;, score=0.159 total time=24.2min
[CV 4/10; 36/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=sgd
[CV 4/10; 36/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=sgd;, score=0.166 total time=23.8min
[CV 5/10; 36/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=sgd
[CV 5/10; 36/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=sgd;, score=0.165 total time=24.4min
[CV 6/10; 36/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=sgd
[CV 6/10; 36/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=sgd;, score=0.159 total time=24.0min
[CV 7/10; 36/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=sgd
[CV 7/10; 36/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=sgd;, score=0.160 total time=24.5min
[CV 8/10; 36/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=sgd
[CV 8/10; 36/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=sgd;, score=0.148 total time=23.8min
[CV 9/10; 36/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=sgd
[CV 9/10; 36/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=sgd;, score=0.167 total time=23.6min
[CV 10/10; 36/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=sgd
[CV 10/10; 36/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.8999999999999999, classifier__estimator__solver=sgd;, score=0.162 total time=25.8min
[CV 1/10; 37/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(100,), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=adam
[CV 1/10; 37/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(100,), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=adam;, score=0.207 total time= 4.3min
[CV 2/10; 37/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(100,), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=adam
[CV 2/10; 37/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(100,), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=adam;, score=0.206 total time= 3.8min
[CV 3/10; 37/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(100,), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=adam
[CV 3/10; 37/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(100,), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=adam;, score=0.210 total time= 3.0min
[CV 4/10; 37/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(100,), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=adam
[CV 4/10; 37/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(100,), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=adam;, score=0.204 total time=10.3min
[CV 5/10; 37/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(100,), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=adam
[CV 5/10; 37/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(100,), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=adam;, score=0.213 total time= 6.1min
[CV 6/10; 37/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(100,), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=adam
[CV 6/10; 37/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(100,), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=adam;, score=0.211 total time= 9.1min
[CV 7/10; 37/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(100,), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=adam
[CV 7/10; 37/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(100,), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=adam;, score=0.220 total time= 6.4min
[CV 8/10; 37/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(100,), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=adam
[CV 8/10; 37/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(100,), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=adam;, score=0.221 total time= 8.1min
[CV 9/10; 37/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(100,), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=adam
[CV 9/10; 37/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(100,), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=adam;, score=0.220 total time= 8.5min
[CV 10/10; 37/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(100,), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=adam
[CV 10/10; 37/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(100,), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=adam;, score=0.225 total time= 4.3min
[CV 1/10; 38/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(100,), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=sgd
[CV 1/10; 38/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(100,), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=sgd;, score=0.086 total time= 1.8min
[CV 2/10; 38/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(100,), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=sgd
[CV 2/10; 38/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(100,), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=sgd;, score=0.086 total time= 1.7min
[CV 3/10; 38/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(100,), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=sgd
[CV 3/10; 38/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(100,), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=sgd;, score=0.086 total time= 1.7min
[CV 4/10; 38/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(100,), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=sgd
/home/externo/rafaelrm/algoritmos/run_pipeline_target_categoria_26012023/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/joblib/externals/loky/process_executor.py:700: UserWarning: A worker stopped while some jobs were given to the executor. This can be caused by a too short worker timeout or by a memory leak.
  warnings.warn(
[CV 4/10; 38/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(100,), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=sgd;, score=0.086 total time= 1.8min
[CV 5/10; 38/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(100,), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=sgd
[CV 5/10; 38/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(100,), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=sgd;, score=0.086 total time= 1.7min
[CV 6/10; 38/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(100,), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=sgd
[CV 6/10; 38/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(100,), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=sgd;, score=0.086 total time= 1.7min
[CV 7/10; 38/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(100,), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=sgd
/home/externo/rafaelrm/algoritmos/run_pipeline_target_categoria_26012023/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/joblib/externals/loky/process_executor.py:700: UserWarning: A worker stopped while some jobs were given to the executor. This can be caused by a too short worker timeout or by a memory leak.
  warnings.warn(
[CV 7/10; 38/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(100,), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=sgd;, score=0.086 total time= 1.8min
[CV 8/10; 38/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(100,), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=sgd
[CV 8/10; 38/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(100,), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=sgd;, score=0.086 total time= 1.7min
[CV 9/10; 38/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(100,), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=sgd
[CV 9/10; 38/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(100,), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=sgd;, score=0.086 total time= 1.7min
[CV 10/10; 38/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(100,), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=sgd
[CV 10/10; 38/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(100,), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__solver=sgd;, score=0.086 total time= 1.8min
[CV 1/10; 39/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(100,), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=adam
[CV 1/10; 39/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(100,), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=adam;, score=0.209 total time= 2.2min
[CV 2/10; 39/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(100,), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=adam
/home/externo/rafaelrm/algoritmos/run_pipeline_target_categoria_26012023/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/sklearn/neural_network/_multilayer_perceptron.py:709: UserWarning: Training interrupted by user.
  warnings.warn("Training interrupted by user.")
Exception ignored in: <function _releaseLock at 0x7fc88f998e50>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/logging/__init__.py", line 227, in _releaseLock
    def _releaseLock():
KeyboardInterrupt: 
exception calling callback for <Future at 0x7fc74f1cf9a0 state=finished returned list>
joblib.externals.loky.process_executor._RemoteTraceback: 
"""
Traceback (most recent call last):
  File "/home/externo/rafaelrm/algoritmos/run_pipeline_target_categoria_26012023/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/joblib/externals/loky/process_executor.py", line 391, in _process_worker
    call_item = call_queue.get(block=True, timeout=timeout)
  File "/usr/local/lib/python3.8/multiprocessing/queues.py", line 102, in get
    if not self._rlock.acquire(block, timeout):
KeyboardInterrupt
"""

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/usr/local/lib/python3.8/concurrent/futures/_base.py", line 412, in add_done_callback
    fn(self)
  File "/home/externo/rafaelrm/algoritmos/run_pipeline_target_categoria_26012023/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/joblib/parallel.py", line 385, in __call__
    self.parallel.dispatch_next()
  File "/home/externo/rafaelrm/algoritmos/run_pipeline_target_categoria_26012023/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/joblib/parallel.py", line 834, in dispatch_next
    if not self.dispatch_one_batch(self._original_iterator):
  File "/home/externo/rafaelrm/algoritmos/run_pipeline_target_categoria_26012023/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/joblib/parallel.py", line 901, in dispatch_one_batch
    self._dispatch(tasks)
  File "/home/externo/rafaelrm/algoritmos/run_pipeline_target_categoria_26012023/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/joblib/parallel.py", line 819, in _dispatch
    job = self._backend.apply_async(batch, callback=cb)
  File "/home/externo/rafaelrm/algoritmos/run_pipeline_target_categoria_26012023/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/joblib/_parallel_backends.py", line 556, in apply_async
    future = self._workers.submit(SafeFunction(func))
  File "/home/externo/rafaelrm/algoritmos/run_pipeline_target_categoria_26012023/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/joblib/externals/loky/reusable_executor.py", line 176, in submit
    return super().submit(fn, *args, **kwargs)
  File "/home/externo/rafaelrm/algoritmos/run_pipeline_target_categoria_26012023/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/joblib/externals/loky/process_executor.py", line 1129, in submit
    raise self._flags.broken
joblib.externals.loky.process_executor.BrokenProcessPool: A task has failed to un-serialize. Please ensure that the arguments of the function are all picklable.
/home/externo/rafaelrm/algoritmos/run_pipeline_target_categoria_26012023/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/sklearn/model_selection/_validation.py:776: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: 
joblib.externals.loky.process_executor._RemoteTraceback: 
"""
Traceback (most recent call last):
  File "/home/externo/rafaelrm/algoritmos/run_pipeline_target_categoria_26012023/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/joblib/externals/loky/process_executor.py", line 391, in _process_worker
    call_item = call_queue.get(block=True, timeout=timeout)
  File "/usr/local/lib/python3.8/multiprocessing/queues.py", line 102, in get
    if not self._rlock.acquire(block, timeout):
KeyboardInterrupt
"""

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/externo/rafaelrm/algoritmos/run_pipeline_target_categoria_26012023/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/sklearn/model_selection/_validation.py", line 767, in _score
    scores = scorer(estimator, X_test, y_test)
  File "/home/externo/rafaelrm/algoritmos/run_pipeline_target_categoria_26012023/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/sklearn/metrics/_scorer.py", line 219, in __call__
    return self._score(
  File "/home/externo/rafaelrm/algoritmos/run_pipeline_target_categoria_26012023/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/sklearn/metrics/_scorer.py", line 261, in _score
    y_pred = method_caller(estimator, "predict", X)
  File "/home/externo/rafaelrm/algoritmos/run_pipeline_target_categoria_26012023/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/sklearn/metrics/_scorer.py", line 71, in _cached_call
    return getattr(estimator, method)(*args, **kwargs)
  File "/home/externo/rafaelrm/algoritmos/run_pipeline_target_categoria_26012023/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/sklearn/pipeline.py", line 457, in predict
    Xt = transform.transform(Xt)
  File "/home/externo/rafaelrm/algoritmos/run_pipeline_target_categoria_26012023/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/sklearn/compose/_column_transformer.py", line 746, in transform
    Xs = self._fit_transform(
  File "/home/externo/rafaelrm/algoritmos/run_pipeline_target_categoria_26012023/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/sklearn/compose/_column_transformer.py", line 604, in _fit_transform
    return Parallel(n_jobs=self.n_jobs)(
  File "/home/externo/rafaelrm/algoritmos/run_pipeline_target_categoria_26012023/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/joblib/parallel.py", line 1088, in __call__
    while self.dispatch_one_batch(iterator):
  File "/home/externo/rafaelrm/algoritmos/run_pipeline_target_categoria_26012023/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/joblib/parallel.py", line 901, in dispatch_one_batch
    self._dispatch(tasks)
  File "/home/externo/rafaelrm/algoritmos/run_pipeline_target_categoria_26012023/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/joblib/parallel.py", line 819, in _dispatch
    job = self._backend.apply_async(batch, callback=cb)
  File "/home/externo/rafaelrm/algoritmos/run_pipeline_target_categoria_26012023/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/joblib/_parallel_backends.py", line 556, in apply_async
    future = self._workers.submit(SafeFunction(func))
  File "/home/externo/rafaelrm/algoritmos/run_pipeline_target_categoria_26012023/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/joblib/externals/loky/reusable_executor.py", line 176, in submit
    return super().submit(fn, *args, **kwargs)
  File "/home/externo/rafaelrm/algoritmos/run_pipeline_target_categoria_26012023/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/joblib/externals/loky/process_executor.py", line 1129, in submit
    raise self._flags.broken
  File "/usr/local/lib/python3.8/concurrent/futures/_base.py", line 412, in add_done_callback
    fn(self)
  File "/home/externo/rafaelrm/algoritmos/run_pipeline_target_categoria_26012023/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/joblib/parallel.py", line 385, in __call__
    self.parallel.dispatch_next()
  File "/home/externo/rafaelrm/algoritmos/run_pipeline_target_categoria_26012023/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/joblib/parallel.py", line 834, in dispatch_next
    if not self.dispatch_one_batch(self._original_iterator):
  File "/home/externo/rafaelrm/algoritmos/run_pipeline_target_categoria_26012023/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/joblib/parallel.py", line 901, in dispatch_one_batch
    self._dispatch(tasks)
  File "/home/externo/rafaelrm/algoritmos/run_pipeline_target_categoria_26012023/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/joblib/parallel.py", line 819, in _dispatch
    job = self._backend.apply_async(batch, callback=cb)
  File "/home/externo/rafaelrm/algoritmos/run_pipeline_target_categoria_26012023/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/joblib/_parallel_backends.py", line 556, in apply_async
    future = self._workers.submit(SafeFunction(func))
  File "/home/externo/rafaelrm/algoritmos/run_pipeline_target_categoria_26012023/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/joblib/externals/loky/reusable_executor.py", line 176, in submit
    return super().submit(fn, *args, **kwargs)
  File "/home/externo/rafaelrm/algoritmos/run_pipeline_target_categoria_26012023/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/joblib/externals/loky/process_executor.py", line 1129, in submit
    raise self._flags.broken
joblib.externals.loky.process_executor.BrokenProcessPool: A task has failed to un-serialize. Please ensure that the arguments of the function are all picklable.

  warnings.warn(
[CV 2/10; 39/5140] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(100,), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=adam;, score=nan total time= 7.9min
[CV 3/10; 39/5140] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=logistic, classifier__estimator__alpha=0.05, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(100,), classifier__estimator__learning_rate=constant, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.3, classifier__estimator__solver=adam
Traceback (most recent call last):
  File "pipeline_target_categoria_26012023.py", line 475, in <module>
    pattern_extraction.run_grid_search(
  File "/home/externo/rafaelrm/algoritmos/run_pipeline_target_categoria_26012023/precoce-ms-classification/utils.py", line 413, in timeit_wrapper
    result = func(*args, **kwargs)
  File "/home/externo/rafaelrm/algoritmos/run_pipeline_target_categoria_26012023/precoce-ms-classification/pattern_extraction.py", line 102, in run_grid_search
    grid_search.fit(x_train, y_train)
  File "/home/externo/rafaelrm/algoritmos/run_pipeline_target_categoria_26012023/precoce-ms-classification/sklearn_tuner/model_selection_tuner/_search_tuner.py", line 266, in fit
    self._run_search(evaluate_candidates)
  File "/home/externo/rafaelrm/algoritmos/run_pipeline_target_categoria_26012023/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/sklearn/model_selection/_search.py", line 1375, in _run_search
    evaluate_candidates(ParameterGrid(self.param_grid))
  File "/home/externo/rafaelrm/algoritmos/run_pipeline_target_categoria_26012023/precoce-ms-classification/sklearn_tuner/model_selection_tuner/_search_tuner.py", line 211, in evaluate_candidates
    out = parallel(
  File "/home/externo/rafaelrm/algoritmos/run_pipeline_target_categoria_26012023/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/joblib/parallel.py", line 1088, in __call__
    while self.dispatch_one_batch(iterator):
  File "/home/externo/rafaelrm/algoritmos/run_pipeline_target_categoria_26012023/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/joblib/parallel.py", line 901, in dispatch_one_batch
    self._dispatch(tasks)
  File "/home/externo/rafaelrm/algoritmos/run_pipeline_target_categoria_26012023/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/joblib/parallel.py", line 819, in _dispatch
    job = self._backend.apply_async(batch, callback=cb)
  File "/home/externo/rafaelrm/algoritmos/run_pipeline_target_categoria_26012023/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/joblib/_parallel_backends.py", line 208, in apply_async
    result = ImmediateResult(func)
  File "/home/externo/rafaelrm/algoritmos/run_pipeline_target_categoria_26012023/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/joblib/_parallel_backends.py", line 597, in __init__
    self.results = batch()
  File "/home/externo/rafaelrm/algoritmos/run_pipeline_target_categoria_26012023/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/joblib/parallel.py", line 288, in __call__
    return [func(*args, **kwargs)
  File "/home/externo/rafaelrm/algoritmos/run_pipeline_target_categoria_26012023/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/joblib/parallel.py", line 288, in <listcomp>
    return [func(*args, **kwargs)
  File "/home/externo/rafaelrm/algoritmos/run_pipeline_target_categoria_26012023/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/sklearn/utils/fixes.py", line 117, in __call__
    return self.function(*args, **kwargs)
  File "/home/externo/rafaelrm/algoritmos/run_pipeline_target_categoria_26012023/precoce-ms-classification/sklearn_tuner/model_selection_tuner/_validation_tuner.py", line 187, in _fit_and_score_tuner
    estimator.fit(X_train, y_train, **fit_params)
  File "/home/externo/rafaelrm/algoritmos/run_pipeline_target_categoria_26012023/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/sklearn/pipeline.py", line 378, in fit
    Xt = self._fit(X, y, **fit_params_steps)
  File "/home/externo/rafaelrm/algoritmos/run_pipeline_target_categoria_26012023/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/sklearn/pipeline.py", line 336, in _fit
    X, fitted_transformer = fit_transform_one_cached(
  File "/home/externo/rafaelrm/algoritmos/run_pipeline_target_categoria_26012023/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/joblib/memory.py", line 349, in __call__
    return self.func(*args, **kwargs)
  File "/home/externo/rafaelrm/algoritmos/run_pipeline_target_categoria_26012023/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/sklearn/pipeline.py", line 870, in _fit_transform_one
    res = transformer.fit_transform(X, y, **fit_params)
  File "/home/externo/rafaelrm/algoritmos/run_pipeline_target_categoria_26012023/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/sklearn/compose/_column_transformer.py", line 673, in fit_transform
    result = self._fit_transform(X, y, _fit_transform_one)
  File "/home/externo/rafaelrm/algoritmos/run_pipeline_target_categoria_26012023/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/sklearn/compose/_column_transformer.py", line 604, in _fit_transform
    return Parallel(n_jobs=self.n_jobs)(
  File "/home/externo/rafaelrm/algoritmos/run_pipeline_target_categoria_26012023/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/joblib/parallel.py", line 1008, in __call__
    n_jobs = self._initialize_backend()
  File "/home/externo/rafaelrm/algoritmos/run_pipeline_target_categoria_26012023/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/joblib/parallel.py", line 775, in _initialize_backend
    n_jobs = self._backend.configure(n_jobs=self.n_jobs, parallel=self,
  File "/home/externo/rafaelrm/algoritmos/run_pipeline_target_categoria_26012023/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/joblib/_parallel_backends.py", line 506, in configure
    self._workers = get_memmapping_executor(
  File "/home/externo/rafaelrm/algoritmos/run_pipeline_target_categoria_26012023/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/joblib/executor.py", line 20, in get_memmapping_executor
    return MemmappingExecutor.get_memmapping_executor(n_jobs, **kwargs)
  File "/home/externo/rafaelrm/algoritmos/run_pipeline_target_categoria_26012023/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/joblib/executor.py", line 52, in get_memmapping_executor
    _executor, executor_is_reused = super().get_reusable_executor(
  File "/home/externo/rafaelrm/algoritmos/run_pipeline_target_categoria_26012023/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/joblib/externals/loky/reusable_executor.py", line 159, in get_reusable_executor
    executor.shutdown(wait=True, kill_workers=kill_workers)
  File "/home/externo/rafaelrm/algoritmos/run_pipeline_target_categoria_26012023/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/joblib/externals/loky/process_executor.py", line 1199, in shutdown
    executor_manager_thread.join()
  File "/usr/local/lib/python3.8/threading.py", line 1011, in join
    self._wait_for_tstate_lock()
  File "/usr/local/lib/python3.8/threading.py", line 1027, in _wait_for_tstate_lock
    elif lock.acquire(block, timeout):
KeyboardInterrupt
