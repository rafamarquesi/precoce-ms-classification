
*****INICIO LOAD DATA******

*****INICIO PRINT INFOS******
Número total de linhas do DataFrame: 63072
Número de colunas: 112
Informações do DataFrame:
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 63072 entries, 0 to 63071
Data columns (total 112 columns):
 #    Column                            Dtype         
---   ------                            -----         
 0    ID_ANIMAL                         uint32        
 1    EstabelecimentoMunicipio          category      
 2    DataAbate                         datetime64[ns]
 3    Frigorifico_ID                    uint8         
 4    Frigorifico_CNPJ                  uint64        
 5    Frigorifico_RazaoSocial           category      
 6    Municipio_Frigorifico             category      
 7    Tipificacao                       category      
 8    Maturidade                        category      
 9    Acabamento                        category      
 10   Peso                              float32       
 11   EstabelecimentoIdentificador      uint16        
 12   Data_homol                        datetime64[ns]
 13   Questionario_ID                   uint16        
 14   QuestionarioClassificacaoEstabel  uint8         
 15   FERTIIRRIGACAO                    uint8         
 16   ILP                               uint8         
 17   IFP                               uint8         
 18   ILPF                              uint8         
 19   CONCEN_VOLUM                      UInt8         
 20   CREEPFEEDING                      UInt8         
 21   FORN_ESTRAT_SILAGEM               UInt8         
 22   PROTEICO                          UInt8         
 23   PROTEICO_ENERGETICO               UInt8         
 24   RACAO_BAL_CONS_INFERIOR           UInt8         
 25   SAL_MINERAL                       UInt8         
 26   SALMINERAL_UREIA                  UInt8         
 27   RACAOO_BAL_CONSUMO_IG             UInt8         
 28   GRAO_INTEIRO                      UInt8         
 29   ALTO_CONCENTR_VOLUM               UInt8         
 30   ALTO_CONCENTRADO                  UInt8         
 31   QuestionarioPossuiOutrosIncentiv  uint8         
 32   QuestionarioFabricaRacao          uint8         
 33   area so confinamento              UInt8         
 34   regua de manejo                   UInt8         
 35   boa cobertura vegetal, com baixa  UInt8         
 36   erosaoo laminar ou em sulco igua  UInt8         
 37   identificacao individual          UInt8         
 38   rastreamento SISBOV               UInt8         
 39   Lista Trace                       UInt8         
 40   BPA                               UInt8         
 41   participa de aliancas mercadolog  UInt8         
 42   QuestionarioPraticaRecuperacaoPa  uint8         
 43   Confinamento                      UInt8         
 44   Suplementacao_a_campo             UInt8         
 45   SemiConfinamento                  UInt8         
 46   dif_datas                         uint16        
 47   DataAbate_6m_ANT                  datetime64[ns]
 48   data_homol_select                 datetime64[ns]
 49   data12m                           datetime64[ns]
 50   data6m                            datetime64[ns]
 51   data3m                            datetime64[ns]
 52   data1m                            datetime64[ns]
 53   data7d                            datetime64[ns]
 54   tot7d_Chuva                       float32       
 55   med7d_TempInst                    float32       
 56   med7d_TempMin                     float32       
 57   med7d_UmidInst                    float32       
 58   med7d_formITUinst                 float32       
 59   med7d_formITUmax                  float32       
 60   med7d_NDVI                        float32       
 61   med7d_EVI                         float32       
 62   med7d_preR_soja                   float32       
 63   med7d_preR_milho                  float32       
 64   med7d_preR_boi                    float32       
 65   tot1m_Chuva                       float32       
 66   med1m_TempInst                    float32       
 67   med1m_UmidInst                    float32       
 68   med1m_formITUinst                 float32       
 69   med1m_NDVI                        float32       
 70   med1m_EVI                         float32       
 71   med1m_preR_soja                   float32       
 72   med1m_preR_milho                  float32       
 73   med1m_preR_boi                    float32       
 74   tot3m_Chuva                       float32       
 75   med3m_TempInst                    float32       
 76   med3m_UmidInst                    float32       
 77   med3m_formITUinst                 float32       
 78   med3m_formITUmax                  float32       
 79   med3m_NDVI                        float32       
 80   med3m_EVI                         float32       
 81   med3m_preR_soja                   float32       
 82   med3m_preR_milho                  float32       
 83   med3m_preR_boi                    float32       
 84   tot6m_Chuva                       float32       
 85   med6m_TempInst                    float32       
 86   med6m_UmidInst                    float32       
 87   med6m_formITUinst                 float32       
 88   med6m_NDVI                        float32       
 89   med6m_EVI                         float32       
 90   med6m_preR_soja                   float32       
 91   med6m_preR_milho                  float32       
 92   med6m_preR_boi                    float32       
 93   tot12m_Chuva                      float32       
 94   med12m_TempInst                   float32       
 95   med12m_TempMin                    float32       
 96   med12m_UmidInst                   float32       
 97   med12m_formITUinst                float32       
 98   med12m_NDVI                       float32       
 99   med12m_EVI                        float32       
 100  med12m_preR_soja                  float32       
 101  med12m_preR_milho                 float32       
 102  med12m_preR_boi                   float32       
 103  cnt7d_CL_ITUinst                  float32       
 104  cnt1m_CL_ITUinst                  float32       
 105  cnt3m_CL_ITUinst                  float32       
 106  cnt6m_CL_ITUinst                  float32       
 107  cnt12m_CL_ITUinst                 float32       
 108  ANO                               uint16        
 109  CATEGORIA                         category      
 110  classificacao                     category      
 111  Motivo                            category      
dtypes: UInt8(24), category(9), datetime64[ns](9), float32(55), uint16(4), uint32(1), uint64(1), uint8(9)
memory usage: 22.7 MB
*****FIM PRINT INFOS*********
Function informations Took 0:00:00.017299

*****INICIO DELETE COLUNAS******
Coluna EstabelecimentoMunicipio excluída.
Coluna Frigorifico_ID excluída.
Coluna Frigorifico_CNPJ excluída.
Coluna Frigorifico_RazaoSocial excluída.
Coluna Municipio_Frigorifico excluída.
Coluna Maturidade excluída.
Coluna Acabamento excluída.
Coluna EstabelecimentoIdentificador excluída.
Coluna Questionario_ID excluída.
Coluna FERTIIRRIGACAO excluída.
Coluna CONCEN_VOLUM excluída.
Coluna CREEPFEEDING excluída.
Coluna FORN_ESTRAT_SILAGEM excluída.
Coluna PROTEICO excluída.
Coluna PROTEICO_ENERGETICO excluída.
Coluna RACAO_BAL_CONS_INFERIOR excluída.
Coluna SAL_MINERAL excluída.
Coluna SALMINERAL_UREIA excluída.
Coluna RACAOO_BAL_CONSUMO_IG excluída.
Coluna GRAO_INTEIRO excluída.
Coluna ALTO_CONCENTR_VOLUM excluída.
Coluna ALTO_CONCENTRADO excluída.
Coluna area so confinamento excluída.
Coluna boa cobertura vegetal, com baixa excluída.
Coluna erosaoo laminar ou em sulco igua excluída.
Coluna Lista Trace excluída.
Coluna BPA excluída.
Coluna dif_datas excluída.
Coluna tot7d_Chuva excluída.
Coluna med7d_TempInst excluída.
Coluna med7d_TempMin excluída.
Coluna med7d_UmidInst excluída.
Coluna med7d_formITUinst excluída.
Coluna med7d_formITUmax excluída.
Coluna med7d_NDVI excluída.
Coluna med7d_EVI excluída.
Coluna med7d_preR_soja excluída.
Coluna med7d_preR_milho excluída.
Coluna med7d_preR_boi excluída.
Coluna tot1m_Chuva excluída.
Coluna med1m_TempInst excluída.
Coluna med1m_UmidInst excluída.
Coluna med1m_formITUinst excluída.
Coluna med1m_NDVI excluída.
Coluna med1m_EVI excluída.
Coluna med1m_preR_soja excluída.
Coluna med1m_preR_milho excluída.
Coluna med1m_preR_boi excluída.
Coluna med3m_TempInst excluída.
Coluna med3m_UmidInst excluída.
Coluna med3m_formITUmax excluída.
Coluna med3m_EVI excluída.
Coluna med3m_preR_soja excluída.
Coluna tot6m_Chuva excluída.
Coluna med6m_TempInst excluída.
Coluna med6m_UmidInst excluída.
Coluna med6m_formITUinst excluída.
Coluna med6m_NDVI excluída.
Coluna med6m_EVI excluída.
Coluna med6m_preR_soja excluída.
Coluna med6m_preR_milho excluída.
Coluna med6m_preR_boi excluída.
Coluna tot12m_Chuva excluída.
Coluna med12m_TempInst excluída.
Coluna med12m_TempMin excluída.
Coluna med12m_UmidInst excluída.
Coluna med12m_formITUinst excluída.
Coluna med12m_NDVI excluída.
Coluna med12m_EVI excluída.
Coluna med12m_preR_soja excluída.
Coluna med12m_preR_milho excluída.
Coluna med12m_preR_boi excluída.
Coluna cnt7d_CL_ITUinst excluída.
Coluna cnt1m_CL_ITUinst excluída.
Coluna cnt3m_CL_ITUinst excluída.
Coluna cnt6m_CL_ITUinst excluída.
Coluna cnt12m_CL_ITUinst excluída.
Coluna ANO excluída.
Coluna Motivo excluída.
Coluna DataAbate excluída.
Coluna Data_homol excluída.
Coluna DataAbate_6m_ANT excluída.
Coluna data_homol_select excluída.
Coluna data12m excluída.
Coluna data6m excluída.
Coluna data3m excluída.
Coluna data1m excluída.
Coluna data7d excluída.
Coluna classificacao excluída.
*****FIM DELETE COLUNAS*********

*****INICIO PRINT INFOS******
Número total de linhas do DataFrame: 63072
Número de colunas: 23
Informações do DataFrame:
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 63072 entries, 0 to 63071
Data columns (total 23 columns):
 #   Column                            Non-Null Count  Dtype   
---  ------                            --------------  -----   
 0   ID_ANIMAL                         63072 non-null  uint32  
 1   Tipificacao                       63072 non-null  category
 2   Peso                              63072 non-null  float32 
 3   QuestionarioClassificacaoEstabel  63072 non-null  uint8   
 4   ILP                               63072 non-null  uint8   
 5   IFP                               63072 non-null  uint8   
 6   ILPF                              63072 non-null  uint8   
 7   QuestionarioPossuiOutrosIncentiv  63072 non-null  uint8   
 8   QuestionarioFabricaRacao          63072 non-null  uint8   
 9   regua de manejo                   63062 non-null  UInt8   
 10  identificacao individual          63062 non-null  UInt8   
 11  rastreamento SISBOV               63050 non-null  UInt8   
 12  participa de aliancas mercadolog  63062 non-null  UInt8   
 13  QuestionarioPraticaRecuperacaoPa  63072 non-null  uint8   
 14  Confinamento                      63062 non-null  UInt8   
 15  Suplementacao_a_campo             63062 non-null  UInt8   
 16  SemiConfinamento                  63062 non-null  UInt8   
 17  tot3m_Chuva                       61719 non-null  float32 
 18  med3m_formITUinst                 63063 non-null  float32 
 19  med3m_NDVI                        60906 non-null  float32 
 20  med3m_preR_milho                  63063 non-null  float32 
 21  med3m_preR_boi                    63063 non-null  float32 
 22  CATEGORIA                         63072 non-null  category
dtypes: UInt8(7), category(2), float32(6), uint32(1), uint8(7)
memory usage: 3.1 MB
*****FIM PRINT INFOS*********
Function informations Took 0:00:00.011761

*****FIM LOAD DATA******
Function load_data Took 0:00:39.658499

*****INICIO SHOW SETTINGS******
os = <module 'os' from '/usr/lib/python3.8/os.py'>
pd = <module 'pandas' from '/mnt/Dados/Mestrado_Computacao_Aplicada_UFMS/documentos_dissertacao/algoritmos/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/pandas/__init__.py'>
torch = <module 'torch' from '/mnt/Dados/Mestrado_Computacao_Aplicada_UFMS/documentos_dissertacao/algoritmos/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/torch/__init__.py'>
PANDAS_MAX_ROWS = 5000
random_seed = 42
n_jobs = 1
dataset_folder_path = /mnt/Dados/Mestrado_Computacao_Aplicada_UFMS/documentos_dissertacao/base_dados/
csv_path = /mnt/Dados/Mestrado_Computacao_Aplicada_UFMS/documentos_dissertacao/base_dados/TAB_MODELAGEM_RAFAEL_2020_1-2.0-percentage-sampling.csv
number_csv_lines = None
dtype_dict = {'ID_ANIMAL': 'uint32', 'EstabelecimentoMunicipio': 'category', 'Frigorifico_ID': 'uint8', 'Frigorifico_CNPJ': 'uint64', 'Frigorifico_RazaoSocial': 'category', 'Municipio_Frigorifico': 'category', 'Tipificacao': 'category', 'Maturidade': 'category', 'Acabamento': 'category', 'Peso': 'float32', 'EstabelecimentoIdentificador': 'uint16', 'Questionario_ID': 'uint16', 'QuestionarioClassificacaoEstabel': 'uint8', 'FERTIIRRIGACAO': 'uint8', 'ILP': 'uint8', 'IFP': 'uint8', 'ILPF': 'uint8', 'CONCEN_VOLUM': 'UInt8', 'CREEPFEEDING': 'UInt8', 'FORN_ESTRAT_SILAGEM': 'UInt8', 'PROTEICO': 'UInt8', 'PROTEICO_ENERGETICO': 'UInt8', 'RACAO_BAL_CONS_INFERIOR': 'UInt8', 'SAL_MINERAL': 'UInt8', 'SALMINERAL_UREIA': 'UInt8', 'RACAOO_BAL_CONSUMO_IG': 'UInt8', 'GRAO_INTEIRO': 'UInt8', 'ALTO_CONCENTR_VOLUM': 'UInt8', 'ALTO_CONCENTRADO': 'UInt8', 'QuestionarioPossuiOutrosIncentiv': 'uint8', 'QuestionarioFabricaRacao': 'uint8', 'area so confinamento': 'UInt8', 'regua de manejo': 'UInt8', 'boa cobertura vegetal, com baixa': 'UInt8', 'erosaoo laminar ou em sulco igua': 'UInt8', 'identificacao individual': 'UInt8', 'rastreamento SISBOV': 'UInt8', 'Lista Trace': 'UInt8', 'BPA': 'UInt8', 'participa de aliancas mercadolog': 'UInt8', 'QuestionarioPraticaRecuperacaoPa': 'uint8', 'Confinamento': 'UInt8', 'Suplementacao_a_campo': 'UInt8', 'SemiConfinamento': 'UInt8', 'dif_datas': 'uint16', 'tot7d_Chuva': 'float32', 'med7d_TempInst': 'float32', 'med7d_TempMin': 'float32', 'med7d_UmidInst': 'float32', 'med7d_formITUinst': 'float32', 'med7d_formITUmax': 'float32', 'med7d_NDVI': 'float32', 'med7d_EVI': 'float32', 'med7d_preR_soja': 'float32', 'med7d_preR_milho': 'float32', 'med7d_preR_boi': 'float32', 'tot1m_Chuva': 'float32', 'med1m_TempInst': 'float32', 'med1m_UmidInst': 'float32', 'med1m_formITUinst': 'float32', 'med1m_NDVI': 'float32', 'med1m_EVI': 'float32', 'med1m_preR_soja': 'float32', 'med1m_preR_milho': 'float32', 'med1m_preR_boi': 'float32', 'tot3m_Chuva': 'float32', 'med3m_TempInst': 'float32', 'med3m_UmidInst': 'float32', 'med3m_formITUinst': 'float32', 'med3m_formITUmax': 'float32', 'med3m_NDVI': 'float32', 'med3m_EVI': 'float32', 'med3m_preR_soja': 'float32', 'med3m_preR_milho': 'float32', 'med3m_preR_boi': 'float32', 'tot6m_Chuva': 'float32', 'med6m_TempInst': 'float32', 'med6m_UmidInst': 'float32', 'med6m_formITUinst': 'float32', 'med6m_NDVI': 'float32', 'med6m_EVI': 'float32', 'med6m_preR_soja': 'float32', 'med6m_preR_milho': 'float32', 'med6m_preR_boi': 'float32', 'tot12m_Chuva': 'float32', 'med12m_TempInst': 'float32', 'med12m_TempMin': 'float32', 'med12m_UmidInst': 'float32', 'med12m_formITUinst': 'float32', 'med12m_NDVI': 'float32', 'med12m_EVI': 'float32', 'med12m_preR_soja': 'float32', 'med12m_preR_milho': 'float32', 'med12m_preR_boi': 'float32', 'cnt7d_CL_ITUinst': 'float32', 'cnt1m_CL_ITUinst': 'float32', 'cnt3m_CL_ITUinst': 'float32', 'cnt6m_CL_ITUinst': 'float32', 'cnt12m_CL_ITUinst': 'float32', 'ANO': 'uint16', 'CATEGORIA': 'category', 'classificacao': 'category', 'Motivo': 'category', 'QTD_ANIMAIS_LOTE': 'uint16', 'PESO_MEDIO_LOTE': 'float32', 'CATEGORIA_BINARIA': 'category'}
parse_dates = ['DataAbate', 'Data_homol', 'DataAbate_6m_ANT', 'data_homol_select', 'data12m', 'data6m', 'data3m', 'data1m', 'data7d']
delete_columns_names_on_load_data = ['EstabelecimentoMunicipio', 'Frigorifico_ID', 'Frigorifico_CNPJ', 'Frigorifico_RazaoSocial', 'Municipio_Frigorifico', 'Maturidade', 'Acabamento', 'EstabelecimentoIdentificador', 'Questionario_ID', 'FERTIIRRIGACAO', 'CONCEN_VOLUM', 'CREEPFEEDING', 'FORN_ESTRAT_SILAGEM', 'PROTEICO', 'PROTEICO_ENERGETICO', 'RACAO_BAL_CONS_INFERIOR', 'SAL_MINERAL', 'SALMINERAL_UREIA', 'RACAOO_BAL_CONSUMO_IG', 'GRAO_INTEIRO', 'ALTO_CONCENTR_VOLUM', 'ALTO_CONCENTRADO', 'area so confinamento', 'boa cobertura vegetal, com baixa', 'erosaoo laminar ou em sulco igua', 'Lista Trace', 'BPA', 'dif_datas', 'tot7d_Chuva', 'med7d_TempInst', 'med7d_TempMin', 'med7d_UmidInst', 'med7d_formITUinst', 'med7d_formITUmax', 'med7d_NDVI', 'med7d_EVI', 'med7d_preR_soja', 'med7d_preR_milho', 'med7d_preR_boi', 'tot1m_Chuva', 'med1m_TempInst', 'med1m_UmidInst', 'med1m_formITUinst', 'med1m_NDVI', 'med1m_EVI', 'med1m_preR_soja', 'med1m_preR_milho', 'med1m_preR_boi', 'med3m_TempInst', 'med3m_UmidInst', 'med3m_formITUmax', 'med3m_EVI', 'med3m_preR_soja', 'tot6m_Chuva', 'med6m_TempInst', 'med6m_UmidInst', 'med6m_formITUinst', 'med6m_NDVI', 'med6m_EVI', 'med6m_preR_soja', 'med6m_preR_milho', 'med6m_preR_boi', 'tot12m_Chuva', 'med12m_TempInst', 'med12m_TempMin', 'med12m_UmidInst', 'med12m_formITUinst', 'med12m_NDVI', 'med12m_EVI', 'med12m_preR_soja', 'med12m_preR_milho', 'med12m_preR_boi', 'cnt7d_CL_ITUinst', 'cnt1m_CL_ITUinst', 'cnt3m_CL_ITUinst', 'cnt6m_CL_ITUinst', 'cnt12m_CL_ITUinst', 'ANO', 'Motivo', 'DataAbate', 'Data_homol', 'DataAbate_6m_ANT', 'data_homol_select', 'data12m', 'data6m', 'data3m', 'data1m', 'data7d', 'classificacao']
PATH_SAVE_PLOTS = ./plots
PATH_SAVE_ESTIMATORS_REPR = ./runs/estimators_repr
PATH_SAVE_BEST_ESTIMATORS = ./runs/best_estimators
PATH_SAVE_RESULTS = ./runs/results
PATH_SAVE_LOGS = ./logs
PATH_SAVE_ENCODERS_SCALERS = ./runs/encoders_scalers
ordinal_encoder_columns_names = {'QuestionarioClassificacaoEstabel': ['0', '21', '26', '30']}
columns_ordinal_encoded = {}
label_encoder_columns_names = ['CATEGORIA']
columns_label_encoded = {}
one_hot_encoder_columns_names = ['Tipificacao']
columns_one_hot_encoded = {}
min_max_scaler_columns_names = ['Peso', 'tot3m_Chuva', 'med3m_formITUinst', 'med3m_NDVI', 'med3m_preR_milho', 'med3m_preR_boi']
columns_min_max_scaled = {}
columns_label_binarized = {}
simple_imputer_columns_names = []
columns_names_drop_feature_by_correlation = ['med3m_formITUinst', 'med3m_preR_boi', 'CATEGORIA']
class_column = CATEGORIA
classifiers = {}
models_results = {}
device_name = cpu
use_embeddings = True
use_cat_emb_dim = True
threshold_categorical_features = 150
num_workers = 4
eval_metric = ['balanced_accuracy', 'logloss', <class 'pytorch_tabnet_tuner.tab_model_tuner.F1ScoreMacro'>]
augmentations = None
weights = 0
batch_size = 1024
virtual_batch_size = 128
run_grid_search_cv_tuner = True
save_results_during_run = True
new_run = True
PATH_OBJECTS_PERSISTED_RESULTS_RUNS = ./runs/objects_persisted_results_runs
PARAMETERS_PERSIST_FILENAME = ./runs/objects_persisted_results_runs/parameters_persist
RESULTS_PERSIST_FILENAME = ./runs/objects_persisted_results_runs/results_persist
SPLIT_PERSIST_FILENAME = ./runs/objects_persisted_results_runs/split_persist
tree_method = hist
objective = multi:softmax
*****FIM SHOW SETTINGS******


*****INICIO DELETE DUPLICATE ROWS BY ATTRIBUTE******
Nenhuma linha duplicada encontrada para o atributo ID_ANIMAL.
*****FIM DELETE DUPLICATE ROWS BY ATTRIBUTE*********
Function delete_duplicate_rows_by_attribute Took 0:00:00.012134

*****INICIO DELETE COLUNAS******
Coluna ID_ANIMAL excluída.
*****FIM DELETE COLUNAS*********

*****INICIO DELETE NAN ROWS******
Linhas com valores NaN encontradas.
*****FIM DELETE NAN ROWS*********
Function delete_nan_rows Took 0:00:00.021576


*****INICIO DELETE COLUMNS WITH SINGLE VALUE******
>>> Nenhuma coluna com valor único encontrada.
*****FIM DELETE COLUMNS WITH SINGLE VALUE*********
Function delete_columns_with_single_value Took 0:00:00.019505


*****INICIO LABEL ENCODER******
*****FIM LABEL ENCODER*********
Function label_encoder_columns Took 0:00:00.014971

Object saved in file: ./runs/encoders_scalers/target_encoded-15-04-2023_10:05:06.joblib

*****INICIO RELATÓRIO DISTRIBUIÇÃO DE CLASSES******
Distribuição da classe 0: 35%
Distribuição da classe 1: 21%
Distribuição da classe 2: 16%
Distribuição da classe 3: 8%
Distribuição da classe 4: 4%
Distribuição da classe 5: 17%
*****FIM RELATÓRIO DISTRIBUIÇÃO DE CLASSES******
Function class_distribution Took 0:00:00.002071

/mnt/Dados/Mestrado_Computacao_Aplicada_UFMS/documentos_dissertacao/algoritmos/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/pytorch_tabnet/abstract_model.py:75: UserWarning: Device used : cpu
  warnings.warn(f"Device used : {self.device}")
Number of folds for cross validation: 5
Scoring strategy for grid search: f1_macro
Test Size: 0.2

x_train shape: (47635, 21)
y_train shape: (47635,)
x_test shape: (11909, 21)
y_test shape: (11909,)
Removing all files in directory: ./runs/objects_persisted_results_runs
Do you want to continue? (y/n): 
All files in directory ./runs/objects_persisted_results_runs were removed.
Fitting 5 folds for each of 7 candidates, totalling 35 fits
[CV 1/5; 1/7] START classifier__estimator=GaussianNB()..........................
[CV 1/5; 1/7] END classifier__estimator=GaussianNB();, score=0.232 total time=   1.6s
[CV 2/5; 1/7] START classifier__estimator=GaussianNB()..........................
[CV 2/5; 1/7] END classifier__estimator=GaussianNB();, score=0.231 total time=   0.1s
[CV 3/5; 1/7] START classifier__estimator=GaussianNB()..........................
[CV 3/5; 1/7] END classifier__estimator=GaussianNB();, score=0.225 total time=   0.1s
[CV 4/5; 1/7] START classifier__estimator=GaussianNB()..........................
[CV 4/5; 1/7] END classifier__estimator=GaussianNB();, score=0.231 total time=   0.1s
[CV 5/5; 1/7] START classifier__estimator=GaussianNB()..........................
[CV 5/5; 1/7] END classifier__estimator=GaussianNB();, score=0.228 total time=   0.1s
[CV 1/5; 2/7] START classifier__estimator=DecisionTreeClassifier(), classifier__estimator__class_weight=None, classifier__estimator__criterion=gini, classifier__estimator__max_depth=None, classifier__estimator__min_samples_leaf=10, classifier__estimator__min_samples_split=100, classifier__estimator__random_state=42, classifier__estimator__splitter=best
[CV 1/5; 2/7] END classifier__estimator=DecisionTreeClassifier(), classifier__estimator__class_weight=None, classifier__estimator__criterion=gini, classifier__estimator__max_depth=None, classifier__estimator__min_samples_leaf=10, classifier__estimator__min_samples_split=100, classifier__estimator__random_state=42, classifier__estimator__splitter=best;, score=0.321 total time=   0.5s
[CV 2/5; 2/7] START classifier__estimator=DecisionTreeClassifier(), classifier__estimator__class_weight=None, classifier__estimator__criterion=gini, classifier__estimator__max_depth=None, classifier__estimator__min_samples_leaf=10, classifier__estimator__min_samples_split=100, classifier__estimator__random_state=42, classifier__estimator__splitter=best
[CV 2/5; 2/7] END classifier__estimator=DecisionTreeClassifier(), classifier__estimator__class_weight=None, classifier__estimator__criterion=gini, classifier__estimator__max_depth=None, classifier__estimator__min_samples_leaf=10, classifier__estimator__min_samples_split=100, classifier__estimator__random_state=42, classifier__estimator__splitter=best;, score=0.315 total time=   0.4s
[CV 3/5; 2/7] START classifier__estimator=DecisionTreeClassifier(), classifier__estimator__class_weight=None, classifier__estimator__criterion=gini, classifier__estimator__max_depth=None, classifier__estimator__min_samples_leaf=10, classifier__estimator__min_samples_split=100, classifier__estimator__random_state=42, classifier__estimator__splitter=best
[CV 3/5; 2/7] END classifier__estimator=DecisionTreeClassifier(), classifier__estimator__class_weight=None, classifier__estimator__criterion=gini, classifier__estimator__max_depth=None, classifier__estimator__min_samples_leaf=10, classifier__estimator__min_samples_split=100, classifier__estimator__random_state=42, classifier__estimator__splitter=best;, score=0.328 total time=   0.4s
[CV 4/5; 2/7] START classifier__estimator=DecisionTreeClassifier(), classifier__estimator__class_weight=None, classifier__estimator__criterion=gini, classifier__estimator__max_depth=None, classifier__estimator__min_samples_leaf=10, classifier__estimator__min_samples_split=100, classifier__estimator__random_state=42, classifier__estimator__splitter=best
[CV 4/5; 2/7] END classifier__estimator=DecisionTreeClassifier(), classifier__estimator__class_weight=None, classifier__estimator__criterion=gini, classifier__estimator__max_depth=None, classifier__estimator__min_samples_leaf=10, classifier__estimator__min_samples_split=100, classifier__estimator__random_state=42, classifier__estimator__splitter=best;, score=0.320 total time=   0.4s
[CV 5/5; 2/7] START classifier__estimator=DecisionTreeClassifier(), classifier__estimator__class_weight=None, classifier__estimator__criterion=gini, classifier__estimator__max_depth=None, classifier__estimator__min_samples_leaf=10, classifier__estimator__min_samples_split=100, classifier__estimator__random_state=42, classifier__estimator__splitter=best
[CV 5/5; 2/7] END classifier__estimator=DecisionTreeClassifier(), classifier__estimator__class_weight=None, classifier__estimator__criterion=gini, classifier__estimator__max_depth=None, classifier__estimator__min_samples_leaf=10, classifier__estimator__min_samples_split=100, classifier__estimator__random_state=42, classifier__estimator__splitter=best;, score=0.315 total time=   0.5s
[CV 1/5; 3/7] START classifier__estimator=LinearSVC(), classifier__estimator__C=0.001, classifier__estimator__class_weight=None, classifier__estimator__dual=False, classifier__estimator__max_iter=10000, classifier__estimator__penalty=l2, classifier__estimator__random_state=42
[CV 1/5; 3/7] END classifier__estimator=LinearSVC(), classifier__estimator__C=0.001, classifier__estimator__class_weight=None, classifier__estimator__dual=False, classifier__estimator__max_iter=10000, classifier__estimator__penalty=l2, classifier__estimator__random_state=42;, score=0.144 total time=   1.4s
[CV 2/5; 3/7] START classifier__estimator=LinearSVC(), classifier__estimator__C=0.001, classifier__estimator__class_weight=None, classifier__estimator__dual=False, classifier__estimator__max_iter=10000, classifier__estimator__penalty=l2, classifier__estimator__random_state=42
[CV 2/5; 3/7] END classifier__estimator=LinearSVC(), classifier__estimator__C=0.001, classifier__estimator__class_weight=None, classifier__estimator__dual=False, classifier__estimator__max_iter=10000, classifier__estimator__penalty=l2, classifier__estimator__random_state=42;, score=0.142 total time=   1.3s
[CV 3/5; 3/7] START classifier__estimator=LinearSVC(), classifier__estimator__C=0.001, classifier__estimator__class_weight=None, classifier__estimator__dual=False, classifier__estimator__max_iter=10000, classifier__estimator__penalty=l2, classifier__estimator__random_state=42
[CV 3/5; 3/7] END classifier__estimator=LinearSVC(), classifier__estimator__C=0.001, classifier__estimator__class_weight=None, classifier__estimator__dual=False, classifier__estimator__max_iter=10000, classifier__estimator__penalty=l2, classifier__estimator__random_state=42;, score=0.141 total time=   1.3s
[CV 4/5; 3/7] START classifier__estimator=LinearSVC(), classifier__estimator__C=0.001, classifier__estimator__class_weight=None, classifier__estimator__dual=False, classifier__estimator__max_iter=10000, classifier__estimator__penalty=l2, classifier__estimator__random_state=42
[CV 4/5; 3/7] END classifier__estimator=LinearSVC(), classifier__estimator__C=0.001, classifier__estimator__class_weight=None, classifier__estimator__dual=False, classifier__estimator__max_iter=10000, classifier__estimator__penalty=l2, classifier__estimator__random_state=42;, score=0.147 total time=   1.4s
[CV 5/5; 3/7] START classifier__estimator=LinearSVC(), classifier__estimator__C=0.001, classifier__estimator__class_weight=None, classifier__estimator__dual=False, classifier__estimator__max_iter=10000, classifier__estimator__penalty=l2, classifier__estimator__random_state=42
[CV 5/5; 3/7] END classifier__estimator=LinearSVC(), classifier__estimator__C=0.001, classifier__estimator__class_weight=None, classifier__estimator__dual=False, classifier__estimator__max_iter=10000, classifier__estimator__penalty=l2, classifier__estimator__random_state=42;, score=0.144 total time=   1.4s
[CV 1/5; 4/7] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=relu, classifier__estimator__alpha=0.0001, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__random_state=42, classifier__estimator__solver=adam
[CV 1/5; 4/7] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=relu, classifier__estimator__alpha=0.0001, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__random_state=42, classifier__estimator__solver=adam;, score=0.223 total time=  13.1s
[CV 2/5; 4/7] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=relu, classifier__estimator__alpha=0.0001, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__random_state=42, classifier__estimator__solver=adam
[CV 2/5; 4/7] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=relu, classifier__estimator__alpha=0.0001, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__random_state=42, classifier__estimator__solver=adam;, score=0.229 total time=  14.1s
[CV 3/5; 4/7] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=relu, classifier__estimator__alpha=0.0001, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__random_state=42, classifier__estimator__solver=adam
[CV 3/5; 4/7] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=relu, classifier__estimator__alpha=0.0001, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__random_state=42, classifier__estimator__solver=adam;, score=0.227 total time=  13.4s
[CV 4/5; 4/7] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=relu, classifier__estimator__alpha=0.0001, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__random_state=42, classifier__estimator__solver=adam
[CV 4/5; 4/7] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=relu, classifier__estimator__alpha=0.0001, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__random_state=42, classifier__estimator__solver=adam;, score=0.215 total time=  21.1s
[CV 5/5; 4/7] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=relu, classifier__estimator__alpha=0.0001, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__random_state=42, classifier__estimator__solver=adam
[CV 5/5; 4/7] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=relu, classifier__estimator__alpha=0.0001, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__random_state=42, classifier__estimator__solver=adam;, score=0.222 total time=  16.2s
[CV 1/5; 5/7] START classifier__estimator=RandomForestClassifier(), classifier__estimator__class_weight=None, classifier__estimator__criterion=entropy, classifier__estimator__max_depth=None, classifier__estimator__max_features=0.75, classifier__estimator__n_estimators=1000, classifier__estimator__n_jobs=-1, classifier__estimator__random_state=42
[CV 1/5; 5/7] END classifier__estimator=RandomForestClassifier(), classifier__estimator__class_weight=None, classifier__estimator__criterion=entropy, classifier__estimator__max_depth=None, classifier__estimator__max_features=0.75, classifier__estimator__n_estimators=1000, classifier__estimator__n_jobs=-1, classifier__estimator__random_state=42;, score=0.353 total time= 2.2min
[CV 2/5; 5/7] START classifier__estimator=RandomForestClassifier(), classifier__estimator__class_weight=None, classifier__estimator__criterion=entropy, classifier__estimator__max_depth=None, classifier__estimator__max_features=0.75, classifier__estimator__n_estimators=1000, classifier__estimator__n_jobs=-1, classifier__estimator__random_state=42
[CV 2/5; 5/7] END classifier__estimator=RandomForestClassifier(), classifier__estimator__class_weight=None, classifier__estimator__criterion=entropy, classifier__estimator__max_depth=None, classifier__estimator__max_features=0.75, classifier__estimator__n_estimators=1000, classifier__estimator__n_jobs=-1, classifier__estimator__random_state=42;, score=0.349 total time= 2.2min
[CV 3/5; 5/7] START classifier__estimator=RandomForestClassifier(), classifier__estimator__class_weight=None, classifier__estimator__criterion=entropy, classifier__estimator__max_depth=None, classifier__estimator__max_features=0.75, classifier__estimator__n_estimators=1000, classifier__estimator__n_jobs=-1, classifier__estimator__random_state=42
[CV 3/5; 5/7] END classifier__estimator=RandomForestClassifier(), classifier__estimator__class_weight=None, classifier__estimator__criterion=entropy, classifier__estimator__max_depth=None, classifier__estimator__max_features=0.75, classifier__estimator__n_estimators=1000, classifier__estimator__n_jobs=-1, classifier__estimator__random_state=42;, score=0.359 total time= 2.2min
[CV 4/5; 5/7] START classifier__estimator=RandomForestClassifier(), classifier__estimator__class_weight=None, classifier__estimator__criterion=entropy, classifier__estimator__max_depth=None, classifier__estimator__max_features=0.75, classifier__estimator__n_estimators=1000, classifier__estimator__n_jobs=-1, classifier__estimator__random_state=42
[CV 4/5; 5/7] END classifier__estimator=RandomForestClassifier(), classifier__estimator__class_weight=None, classifier__estimator__criterion=entropy, classifier__estimator__max_depth=None, classifier__estimator__max_features=0.75, classifier__estimator__n_estimators=1000, classifier__estimator__n_jobs=-1, classifier__estimator__random_state=42;, score=0.355 total time= 2.2min
[CV 5/5; 5/7] START classifier__estimator=RandomForestClassifier(), classifier__estimator__class_weight=None, classifier__estimator__criterion=entropy, classifier__estimator__max_depth=None, classifier__estimator__max_features=0.75, classifier__estimator__n_estimators=1000, classifier__estimator__n_jobs=-1, classifier__estimator__random_state=42
[CV 5/5; 5/7] END classifier__estimator=RandomForestClassifier(), classifier__estimator__class_weight=None, classifier__estimator__criterion=entropy, classifier__estimator__max_depth=None, classifier__estimator__max_features=0.75, classifier__estimator__n_estimators=1000, classifier__estimator__n_jobs=-1, classifier__estimator__random_state=42;, score=0.361 total time= 2.2min
[CV 1/5; 6/7] START classifier__estimator=XGBClassifier(base_score=None, booster=None, callbacks=None,
              colsample_bylevel=None, colsample_bynode=None,
              colsample_bytree=None, early_stopping_rounds=None,
              enable_categorical=False, eval_metric=None, gamma=None,
              gpu_id=None, grow_policy=None, importance_type=None,
              interaction_constraints=None, learning_rate=None, max_bin=None,
              max_cat_to_onehot=None, max_delta_step=None, max_depth=None,
              max_leaves=None, min_child_weight=None, missing=nan,
              monotone_constraints=None, n_estimators=100, n_jobs=None,
              num_parallel_tree=None, predictor=None, random_state=None,
              reg_alpha=None, reg_lambda=None, ...), classifier__estimator__colsample_bytree=0.75, classifier__estimator__gamma=0.05, classifier__estimator__learning_rate=0.01, classifier__estimator__max_delta_step=1.0, classifier__estimator__max_depth=None, classifier__estimator__n_estimators=1000, classifier__estimator__n_jobs=-1, classifier__estimator__num_class=6, classifier__estimator__objective=multi:softmax, classifier__estimator__random_state=42, classifier__estimator__reg_alpha=0, classifier__estimator__reg_lambda=0.01, classifier__estimator__subsample=0.75, classifier__estimator__tree_method=hist
[CV 1/5; 6/7] END classifier__estimator=XGBClassifier(base_score=None, booster=None, callbacks=None,
              colsample_bylevel=None, colsample_bynode=None,
              colsample_bytree=None, early_stopping_rounds=None,
              enable_categorical=False, eval_metric=None, gamma=None,
              gpu_id=None, grow_policy=None, importance_type=None,
              interaction_constraints=None, learning_rate=None, max_bin=None,
              max_cat_to_onehot=None, max_delta_step=None, max_depth=None,
              max_leaves=None, min_child_weight=None, missing=nan,
              monotone_constraints=None, n_estimators=100, n_jobs=None,
              num_parallel_tree=None, predictor=None, random_state=None,
              reg_alpha=None, reg_lambda=None, ...), classifier__estimator__colsample_bytree=0.75, classifier__estimator__gamma=0.05, classifier__estimator__learning_rate=0.01, classifier__estimator__max_delta_step=1.0, classifier__estimator__max_depth=None, classifier__estimator__n_estimators=1000, classifier__estimator__n_jobs=-1, classifier__estimator__num_class=6, classifier__estimator__objective=multi:softmax, classifier__estimator__random_state=42, classifier__estimator__reg_alpha=0, classifier__estimator__reg_lambda=0.01, classifier__estimator__subsample=0.75, classifier__estimator__tree_method=hist;, score=0.325 total time=  31.9s
[CV 2/5; 6/7] START classifier__estimator=XGBClassifier(base_score=None, booster=None, callbacks=None,
              colsample_bylevel=None, colsample_bynode=None,
              colsample_bytree=None, early_stopping_rounds=None,
              enable_categorical=False, eval_metric=None, gamma=None,
              gpu_id=None, grow_policy=None, importance_type=None,
              interaction_constraints=None, learning_rate=None, max_bin=None,
              max_cat_to_onehot=None, max_delta_step=None, max_depth=None,
              max_leaves=None, min_child_weight=None, missing=nan,
              monotone_constraints=None, n_estimators=100, n_jobs=None,
              num_parallel_tree=None, predictor=None, random_state=None,
              reg_alpha=None, reg_lambda=None, ...), classifier__estimator__colsample_bytree=0.75, classifier__estimator__gamma=0.05, classifier__estimator__learning_rate=0.01, classifier__estimator__max_delta_step=1.0, classifier__estimator__max_depth=None, classifier__estimator__n_estimators=1000, classifier__estimator__n_jobs=-1, classifier__estimator__num_class=6, classifier__estimator__objective=multi:softmax, classifier__estimator__random_state=42, classifier__estimator__reg_alpha=0, classifier__estimator__reg_lambda=0.01, classifier__estimator__subsample=0.75, classifier__estimator__tree_method=hist
[CV 2/5; 6/7] END classifier__estimator=XGBClassifier(base_score=None, booster=None, callbacks=None,
              colsample_bylevel=None, colsample_bynode=None,
              colsample_bytree=None, early_stopping_rounds=None,
              enable_categorical=False, eval_metric=None, gamma=None,
              gpu_id=None, grow_policy=None, importance_type=None,
              interaction_constraints=None, learning_rate=None, max_bin=None,
              max_cat_to_onehot=None, max_delta_step=None, max_depth=None,
              max_leaves=None, min_child_weight=None, missing=nan,
              monotone_constraints=None, n_estimators=100, n_jobs=None,
              num_parallel_tree=None, predictor=None, random_state=None,
              reg_alpha=None, reg_lambda=None, ...), classifier__estimator__colsample_bytree=0.75, classifier__estimator__gamma=0.05, classifier__estimator__learning_rate=0.01, classifier__estimator__max_delta_step=1.0, classifier__estimator__max_depth=None, classifier__estimator__n_estimators=1000, classifier__estimator__n_jobs=-1, classifier__estimator__num_class=6, classifier__estimator__objective=multi:softmax, classifier__estimator__random_state=42, classifier__estimator__reg_alpha=0, classifier__estimator__reg_lambda=0.01, classifier__estimator__subsample=0.75, classifier__estimator__tree_method=hist;, score=0.321 total time=  26.7s
[CV 3/5; 6/7] START classifier__estimator=XGBClassifier(base_score=None, booster=None, callbacks=None,
              colsample_bylevel=None, colsample_bynode=None,
              colsample_bytree=None, early_stopping_rounds=None,
              enable_categorical=False, eval_metric=None, gamma=None,
              gpu_id=None, grow_policy=None, importance_type=None,
              interaction_constraints=None, learning_rate=None, max_bin=None,
              max_cat_to_onehot=None, max_delta_step=None, max_depth=None,
              max_leaves=None, min_child_weight=None, missing=nan,
              monotone_constraints=None, n_estimators=100, n_jobs=None,
              num_parallel_tree=None, predictor=None, random_state=None,
              reg_alpha=None, reg_lambda=None, ...), classifier__estimator__colsample_bytree=0.75, classifier__estimator__gamma=0.05, classifier__estimator__learning_rate=0.01, classifier__estimator__max_delta_step=1.0, classifier__estimator__max_depth=None, classifier__estimator__n_estimators=1000, classifier__estimator__n_jobs=-1, classifier__estimator__num_class=6, classifier__estimator__objective=multi:softmax, classifier__estimator__random_state=42, classifier__estimator__reg_alpha=0, classifier__estimator__reg_lambda=0.01, classifier__estimator__subsample=0.75, classifier__estimator__tree_method=hist
[CV 3/5; 6/7] END classifier__estimator=XGBClassifier(base_score=None, booster=None, callbacks=None,
              colsample_bylevel=None, colsample_bynode=None,
              colsample_bytree=None, early_stopping_rounds=None,
              enable_categorical=False, eval_metric=None, gamma=None,
              gpu_id=None, grow_policy=None, importance_type=None,
              interaction_constraints=None, learning_rate=None, max_bin=None,
              max_cat_to_onehot=None, max_delta_step=None, max_depth=None,
              max_leaves=None, min_child_weight=None, missing=nan,
              monotone_constraints=None, n_estimators=100, n_jobs=None,
              num_parallel_tree=None, predictor=None, random_state=None,
              reg_alpha=None, reg_lambda=None, ...), classifier__estimator__colsample_bytree=0.75, classifier__estimator__gamma=0.05, classifier__estimator__learning_rate=0.01, classifier__estimator__max_delta_step=1.0, classifier__estimator__max_depth=None, classifier__estimator__n_estimators=1000, classifier__estimator__n_jobs=-1, classifier__estimator__num_class=6, classifier__estimator__objective=multi:softmax, classifier__estimator__random_state=42, classifier__estimator__reg_alpha=0, classifier__estimator__reg_lambda=0.01, classifier__estimator__subsample=0.75, classifier__estimator__tree_method=hist;, score=0.333 total time=  27.3s
[CV 4/5; 6/7] START classifier__estimator=XGBClassifier(base_score=None, booster=None, callbacks=None,
              colsample_bylevel=None, colsample_bynode=None,
              colsample_bytree=None, early_stopping_rounds=None,
              enable_categorical=False, eval_metric=None, gamma=None,
              gpu_id=None, grow_policy=None, importance_type=None,
              interaction_constraints=None, learning_rate=None, max_bin=None,
              max_cat_to_onehot=None, max_delta_step=None, max_depth=None,
              max_leaves=None, min_child_weight=None, missing=nan,
              monotone_constraints=None, n_estimators=100, n_jobs=None,
              num_parallel_tree=None, predictor=None, random_state=None,
              reg_alpha=None, reg_lambda=None, ...), classifier__estimator__colsample_bytree=0.75, classifier__estimator__gamma=0.05, classifier__estimator__learning_rate=0.01, classifier__estimator__max_delta_step=1.0, classifier__estimator__max_depth=None, classifier__estimator__n_estimators=1000, classifier__estimator__n_jobs=-1, classifier__estimator__num_class=6, classifier__estimator__objective=multi:softmax, classifier__estimator__random_state=42, classifier__estimator__reg_alpha=0, classifier__estimator__reg_lambda=0.01, classifier__estimator__subsample=0.75, classifier__estimator__tree_method=hist
[CV 4/5; 6/7] END classifier__estimator=XGBClassifier(base_score=None, booster=None, callbacks=None,
              colsample_bylevel=None, colsample_bynode=None,
              colsample_bytree=None, early_stopping_rounds=None,
              enable_categorical=False, eval_metric=None, gamma=None,
              gpu_id=None, grow_policy=None, importance_type=None,
              interaction_constraints=None, learning_rate=None, max_bin=None,
              max_cat_to_onehot=None, max_delta_step=None, max_depth=None,
              max_leaves=None, min_child_weight=None, missing=nan,
              monotone_constraints=None, n_estimators=100, n_jobs=None,
              num_parallel_tree=None, predictor=None, random_state=None,
              reg_alpha=None, reg_lambda=None, ...), classifier__estimator__colsample_bytree=0.75, classifier__estimator__gamma=0.05, classifier__estimator__learning_rate=0.01, classifier__estimator__max_delta_step=1.0, classifier__estimator__max_depth=None, classifier__estimator__n_estimators=1000, classifier__estimator__n_jobs=-1, classifier__estimator__num_class=6, classifier__estimator__objective=multi:softmax, classifier__estimator__random_state=42, classifier__estimator__reg_alpha=0, classifier__estimator__reg_lambda=0.01, classifier__estimator__subsample=0.75, classifier__estimator__tree_method=hist;, score=0.327 total time=  26.4s
[CV 5/5; 6/7] START classifier__estimator=XGBClassifier(base_score=None, booster=None, callbacks=None,
              colsample_bylevel=None, colsample_bynode=None,
              colsample_bytree=None, early_stopping_rounds=None,
              enable_categorical=False, eval_metric=None, gamma=None,
              gpu_id=None, grow_policy=None, importance_type=None,
              interaction_constraints=None, learning_rate=None, max_bin=None,
              max_cat_to_onehot=None, max_delta_step=None, max_depth=None,
              max_leaves=None, min_child_weight=None, missing=nan,
              monotone_constraints=None, n_estimators=100, n_jobs=None,
              num_parallel_tree=None, predictor=None, random_state=None,
              reg_alpha=None, reg_lambda=None, ...), classifier__estimator__colsample_bytree=0.75, classifier__estimator__gamma=0.05, classifier__estimator__learning_rate=0.01, classifier__estimator__max_delta_step=1.0, classifier__estimator__max_depth=None, classifier__estimator__n_estimators=1000, classifier__estimator__n_jobs=-1, classifier__estimator__num_class=6, classifier__estimator__objective=multi:softmax, classifier__estimator__random_state=42, classifier__estimator__reg_alpha=0, classifier__estimator__reg_lambda=0.01, classifier__estimator__subsample=0.75, classifier__estimator__tree_method=hist
[CV 5/5; 6/7] END classifier__estimator=XGBClassifier(base_score=None, booster=None, callbacks=None,
              colsample_bylevel=None, colsample_bynode=None,
              colsample_bytree=None, early_stopping_rounds=None,
              enable_categorical=False, eval_metric=None, gamma=None,
              gpu_id=None, grow_policy=None, importance_type=None,
              interaction_constraints=None, learning_rate=None, max_bin=None,
              max_cat_to_onehot=None, max_delta_step=None, max_depth=None,
              max_leaves=None, min_child_weight=None, missing=nan,
              monotone_constraints=None, n_estimators=100, n_jobs=None,
              num_parallel_tree=None, predictor=None, random_state=None,
              reg_alpha=None, reg_lambda=None, ...), classifier__estimator__colsample_bytree=0.75, classifier__estimator__gamma=0.05, classifier__estimator__learning_rate=0.01, classifier__estimator__max_delta_step=1.0, classifier__estimator__max_depth=None, classifier__estimator__n_estimators=1000, classifier__estimator__n_jobs=-1, classifier__estimator__num_class=6, classifier__estimator__objective=multi:softmax, classifier__estimator__random_state=42, classifier__estimator__reg_alpha=0, classifier__estimator__reg_lambda=0.01, classifier__estimator__subsample=0.75, classifier__estimator__tree_method=hist;, score=0.314 total time=  28.1s
[CV 1/5; 7/7] START classifier__estimator=TabNetClassifierTuner(n_d=8, n_a=8, n_steps=3, gamma=1.3, cat_idxs=[], cat_dims=[], cat_emb_dim=1, n_independent=2, n_shared=2, epsilon=1e-15, momentum=0.02, lambda_sparse=0.001, seed=0, clip_value=1, verbose=1, optimizer_fn=<class 'torch.optim.adam.Adam'>, optimizer_params={'lr': 0.02}, scheduler_fn=None, scheduler_params={}, mask_type='sparsemax', input_dim=None, output_dim=None, device_name='cpu', n_shared_decoder=1, n_indep_decoder=1, use_embeddings=True, threshold_categorical_features=150, use_cat_emb_dim=True, fit_eval_metric=['balanced_accuracy', 'logloss', <class 'pytorch_tabnet_tuner.tab_model_tuner.F1ScoreMacro'>], fit_weights=0, fit_batch_size=1024, fit_virtual_batch_size=128), classifier__estimator__cat_emb_dim=20, classifier__estimator__clip_value=1, classifier__estimator__gamma=2.0, classifier__estimator__lambda_sparse=0.001, classifier__estimator__mask_type=sparsemax, classifier__estimator__momentum=0.4, classifier__estimator__n_a=64, classifier__estimator__n_independent=5, classifier__estimator__n_shared=5, classifier__estimator__n_steps=10, classifier__estimator__optimizer_fn=<class 'torch.optim.adam.Adam'>, classifier__estimator__optimizer_params={'lr': 0.02}, classifier__estimator__scheduler_fn=<class 'torch.optim.lr_scheduler.StepLR'>, classifier__estimator__scheduler_params={'step_size': 10, 'gamma': 0.95}, classifier__estimator__seed=42, classifier__estimator__verbose=1
/mnt/Dados/Mestrado_Computacao_Aplicada_UFMS/documentos_dissertacao/algoritmos/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/pytorch_tabnet/abstract_model.py:75: UserWarning: Device used : cpu
  warnings.warn(f"Device used : {self.device}")
/mnt/Dados/Mestrado_Computacao_Aplicada_UFMS/documentos_dissertacao/algoritmos/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/pytorch_tabnet/abstract_model.py:105: UserWarning: Pretraining: n_d changed from 8 to 64
  warnings.warn(wrn_msg)
/mnt/Dados/Mestrado_Computacao_Aplicada_UFMS/documentos_dissertacao/algoritmos/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/pytorch_tabnet/abstract_model.py:105: UserWarning: Pretraining: cat_dims changed from [] to [4, 2, 2, 2, 46, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]
  warnings.warn(wrn_msg)
/mnt/Dados/Mestrado_Computacao_Aplicada_UFMS/documentos_dissertacao/algoritmos/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/pytorch_tabnet/abstract_model.py:105: UserWarning: Pretraining: cat_emb_dim changed from 20 to [2, 1, 1, 1, 20, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
  warnings.warn(wrn_msg)
/mnt/Dados/Mestrado_Computacao_Aplicada_UFMS/documentos_dissertacao/algoritmos/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/pytorch_tabnet/abstract_model.py:105: UserWarning: Pretraining: cat_idxs changed from [] to [0, 1, 2, 3, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]
  warnings.warn(wrn_msg)
epoch 0  | loss: 4.69366 | train_balanced_accuracy: 0.16691 | train_logloss: 6.55441 | train_f1_macro: 0.0704  | valid_balanced_accuracy: 0.16425 | valid_logloss: 6.5989  | valid_f1_macro: 0.06566 |  0:00:30s
epoch 1  | loss: 3.6575  | train_balanced_accuracy: 0.17546 | train_logloss: 3.28971 | train_f1_macro: 0.14012 | valid_balanced_accuracy: 0.18024 | valid_logloss: 3.29039 | valid_f1_macro: 0.14497 |  0:01:01s
epoch 2  | loss: 2.52425 | train_balanced_accuracy: 0.16673 | train_logloss: 3.88957 | train_f1_macro: 0.0949  | valid_balanced_accuracy: 0.16723 | valid_logloss: 3.89028 | valid_f1_macro: 0.09467 |  0:01:32s
epoch 3  | loss: 1.96241 | train_balanced_accuracy: 0.18016 | train_logloss: 1.74219 | train_f1_macro: 0.11951 | valid_balanced_accuracy: 0.17774 | valid_logloss: 1.73744 | valid_f1_macro: 0.11691 |  0:02:03s
epoch 4  | loss: 1.62372 | train_balanced_accuracy: 0.17778 | train_logloss: 1.76039 | train_f1_macro: 0.1705  | valid_balanced_accuracy: 0.17708 | valid_logloss: 1.76482 | valid_f1_macro: 0.1702  |  0:02:34s
epoch 5  | loss: 1.56428 | train_balanced_accuracy: 0.20242 | train_logloss: 1.58557 | train_f1_macro: 0.16146 | valid_balanced_accuracy: 0.20082 | valid_logloss: 1.59105 | valid_f1_macro: 0.16011 |  0:03:06s
epoch 6  | loss: 1.53469 | train_balanced_accuracy: 0.1994  | train_logloss: 1.53503 | train_f1_macro: 0.15117 | valid_balanced_accuracy: 0.19672 | valid_logloss: 1.5432  | valid_f1_macro: 0.14857 |  0:03:37s
epoch 7  | loss: 1.50114 | train_balanced_accuracy: 0.1688  | train_logloss: 1.5467  | train_f1_macro: 0.09506 | valid_balanced_accuracy: 0.17025 | valid_logloss: 1.55843 | valid_f1_macro: 0.09753 |  0:04:07s
epoch 8  | loss: 1.49157 | train_balanced_accuracy: 0.17928 | train_logloss: 1.51395 | train_f1_macro: 0.12272 | valid_balanced_accuracy: 0.17891 | valid_logloss: 1.5199  | valid_f1_macro: 0.12153 |  0:04:38s
epoch 9  | loss: 1.48484 | train_balanced_accuracy: 0.17204 | train_logloss: 1.49804 | train_f1_macro: 0.1038  | valid_balanced_accuracy: 0.17468 | valid_logloss: 1.49946 | valid_f1_macro: 0.10811 |  0:05:09s
epoch 10 | loss: 1.48368 | train_balanced_accuracy: 0.17485 | train_logloss: 1.49656 | train_f1_macro: 0.10797 | valid_balanced_accuracy: 0.17461 | valid_logloss: 1.50198 | valid_f1_macro: 0.10747 |  0:05:40s
epoch 11 | loss: 1.4867  | train_balanced_accuracy: 0.18136 | train_logloss: 1.48982 | train_f1_macro: 0.12845 | valid_balanced_accuracy: 0.18093 | valid_logloss: 1.49216 | valid_f1_macro: 0.12714 |  0:06:11s
epoch 12 | loss: 1.48135 | train_balanced_accuracy: 0.18019 | train_logloss: 1.5281  | train_f1_macro: 0.12623 | valid_balanced_accuracy: 0.18066 | valid_logloss: 1.53303 | valid_f1_macro: 0.12621 |  0:06:41s
epoch 13 | loss: 1.49474 | train_balanced_accuracy: 0.16664 | train_logloss: 1.48775 | train_f1_macro: 0.08602 | valid_balanced_accuracy: 0.1666  | valid_logloss: 1.49556 | valid_f1_macro: 0.086   |  0:07:12s
epoch 14 | loss: 1.48523 | train_balanced_accuracy: 0.185   | train_logloss: 1.55444 | train_f1_macro: 0.13399 | valid_balanced_accuracy: 0.18541 | valid_logloss: 1.55963 | valid_f1_macro: 0.13425 |  0:07:43s
epoch 15 | loss: 1.48274 | train_balanced_accuracy: 0.18824 | train_logloss: 1.49363 | train_f1_macro: 0.13839 | valid_balanced_accuracy: 0.18832 | valid_logloss: 1.49628 | valid_f1_macro: 0.13821 |  0:08:15s
epoch 16 | loss: 1.47575 | train_balanced_accuracy: 0.18848 | train_logloss: 1.48537 | train_f1_macro: 0.14231 | valid_balanced_accuracy: 0.19059 | valid_logloss: 1.49246 | valid_f1_macro: 0.14533 |  0:08:46s
epoch 17 | loss: 1.47142 | train_balanced_accuracy: 0.17991 | train_logloss: 1.51858 | train_f1_macro: 0.13011 | valid_balanced_accuracy: 0.18182 | valid_logloss: 1.52624 | valid_f1_macro: 0.13434 |  0:09:17s
epoch 18 | loss: 1.47052 | train_balanced_accuracy: 0.20203 | train_logloss: 1.48147 | train_f1_macro: 0.1743  | valid_balanced_accuracy: 0.2022  | valid_logloss: 1.49584 | valid_f1_macro: 0.17591 |  0:09:47s
epoch 19 | loss: 1.4694  | train_balanced_accuracy: 0.20822 | train_logloss: 1.49002 | train_f1_macro: 0.17269 | valid_balanced_accuracy: 0.20749 | valid_logloss: 1.49424 | valid_f1_macro: 0.17074 |  0:10:18s
epoch 20 | loss: 1.46344 | train_balanced_accuracy: 0.21352 | train_logloss: 1.46445 | train_f1_macro: 0.16479 | valid_balanced_accuracy: 0.21325 | valid_logloss: 1.47563 | valid_f1_macro: 0.16596 |  0:10:49s
epoch 21 | loss: 1.46227 | train_balanced_accuracy: 0.2275  | train_logloss: 1.48289 | train_f1_macro: 0.20036 | valid_balanced_accuracy: 0.22343 | valid_logloss: 1.4883  | valid_f1_macro: 0.19728 |  0:11:20s
epoch 22 | loss: 1.45812 | train_balanced_accuracy: 0.21816 | train_logloss: 1.46269 | train_f1_macro: 0.17609 | valid_balanced_accuracy: 0.21653 | valid_logloss: 1.47052 | valid_f1_macro: 0.17474 |  0:11:51s
epoch 23 | loss: 1.456   | train_balanced_accuracy: 0.23115 | train_logloss: 1.46203 | train_f1_macro: 0.21891 | valid_balanced_accuracy: 0.23088 | valid_logloss: 1.47406 | valid_f1_macro: 0.21749 |  0:12:23s
epoch 24 | loss: 1.45997 | train_balanced_accuracy: 0.19477 | train_logloss: 1.6764  | train_f1_macro: 0.16244 | valid_balanced_accuracy: 0.19169 | valid_logloss: 1.68161 | valid_f1_macro: 0.15914 |  0:12:54s
epoch 25 | loss: 1.4588  | train_balanced_accuracy: 0.18679 | train_logloss: 1.75806 | train_f1_macro: 0.13674 | valid_balanced_accuracy: 0.18717 | valid_logloss: 1.76311 | valid_f1_macro: 0.13697 |  0:13:25s
epoch 26 | loss: 1.45586 | train_balanced_accuracy: 0.19283 | train_logloss: 1.50414 | train_f1_macro: 0.15468 | valid_balanced_accuracy: 0.19197 | valid_logloss: 1.51348 | valid_f1_macro: 0.15403 |  0:13:56s
epoch 27 | loss: 1.45346 | train_balanced_accuracy: 0.20426 | train_logloss: 1.48407 | train_f1_macro: 0.16138 | valid_balanced_accuracy: 0.19989 | valid_logloss: 1.49811 | valid_f1_macro: 0.1561  |  0:14:26s
epoch 28 | loss: 1.45892 | train_balanced_accuracy: 0.21733 | train_logloss: 1.50775 | train_f1_macro: 0.19011 | valid_balanced_accuracy: 0.21969 | valid_logloss: 1.52076 | valid_f1_macro: 0.19403 |  0:14:57s
epoch 29 | loss: 1.46473 | train_balanced_accuracy: 0.18204 | train_logloss: 1.49078 | train_f1_macro: 0.12521 | valid_balanced_accuracy: 0.18025 | valid_logloss: 1.49861 | valid_f1_macro: 0.12184 |  0:15:28s
epoch 30 | loss: 1.46544 | train_balanced_accuracy: 0.21222 | train_logloss: 1.47154 | train_f1_macro: 0.18221 | valid_balanced_accuracy: 0.20892 | valid_logloss: 1.47809 | valid_f1_macro: 0.17964 |  0:15:59s
epoch 31 | loss: 1.46097 | train_balanced_accuracy: 0.19196 | train_logloss: 1.60113 | train_f1_macro: 0.1538  | valid_balanced_accuracy: 0.1898  | valid_logloss: 1.62013 | valid_f1_macro: 0.15036 |  0:16:31s
epoch 32 | loss: 1.46465 | train_balanced_accuracy: 0.17053 | train_logloss: 1.55165 | train_f1_macro: 0.09818 | valid_balanced_accuracy: 0.17026 | valid_logloss: 1.56672 | valid_f1_macro: 0.098   |  0:17:02s
epoch 33 | loss: 1.46278 | train_balanced_accuracy: 0.1947  | train_logloss: 1.57539 | train_f1_macro: 0.16578 | valid_balanced_accuracy: 0.19218 | valid_logloss: 1.59317 | valid_f1_macro: 0.16346 |  0:17:33s
epoch 34 | loss: 1.45942 | train_balanced_accuracy: 0.19848 | train_logloss: 1.57947 | train_f1_macro: 0.15395 | valid_balanced_accuracy: 0.19176 | valid_logloss: 1.58898 | valid_f1_macro: 0.14444 |  0:18:05s
epoch 35 | loss: 1.45994 | train_balanced_accuracy: 0.18745 | train_logloss: 1.51299 | train_f1_macro: 0.12933 | valid_balanced_accuracy: 0.18784 | valid_logloss: 1.53059 | valid_f1_macro: 0.1294  |  0:18:36s
epoch 36 | loss: 1.45913 | train_balanced_accuracy: 0.20114 | train_logloss: 1.49224 | train_f1_macro: 0.16298 | valid_balanced_accuracy: 0.20198 | valid_logloss: 1.5091  | valid_f1_macro: 0.16343 |  0:19:07s
epoch 37 | loss: 1.46023 | train_balanced_accuracy: 0.21513 | train_logloss: 1.59359 | train_f1_macro: 0.16772 | valid_balanced_accuracy: 0.20899 | valid_logloss: 1.60877 | valid_f1_macro: 0.16154 |  0:19:37s
epoch 38 | loss: 1.46606 | train_balanced_accuracy: 0.19308 | train_logloss: 1.72333 | train_f1_macro: 0.15221 | valid_balanced_accuracy: 0.19341 | valid_logloss: 1.72673 | valid_f1_macro: 0.15441 |  0:20:08s
epoch 39 | loss: 1.46879 | train_balanced_accuracy: 0.19641 | train_logloss: 1.53969 | train_f1_macro: 0.15649 | valid_balanced_accuracy: 0.19707 | valid_logloss: 1.55741 | valid_f1_macro: 0.15777 |  0:20:40s
epoch 40 | loss: 1.4636  | train_balanced_accuracy: 0.18276 | train_logloss: 1.49523 | train_f1_macro: 0.12701 | valid_balanced_accuracy: 0.18289 | valid_logloss: 1.50719 | valid_f1_macro: 0.12797 |  0:21:11s
epoch 41 | loss: 1.46272 | train_balanced_accuracy: 0.22718 | train_logloss: 1.49555 | train_f1_macro: 0.20319 | valid_balanced_accuracy: 0.22419 | valid_logloss: 1.50503 | valid_f1_macro: 0.19988 |  0:21:41s
epoch 42 | loss: 1.46136 | train_balanced_accuracy: 0.24219 | train_logloss: 1.48566 | train_f1_macro: 0.22942 | valid_balanced_accuracy: 0.24255 | valid_logloss: 1.49189 | valid_f1_macro: 0.23004 |  0:22:13s
epoch 43 | loss: 1.45713 | train_balanced_accuracy: 0.23212 | train_logloss: 1.4642  | train_f1_macro: 0.22196 | valid_balanced_accuracy: 0.22319 | valid_logloss: 1.47503 | valid_f1_macro: 0.20944 |  0:22:44s
epoch 44 | loss: 1.45557 | train_balanced_accuracy: 0.21347 | train_logloss: 1.4633  | train_f1_macro: 0.18753 | valid_balanced_accuracy: 0.21263 | valid_logloss: 1.47179 | valid_f1_macro: 0.18508 |  0:23:14s
epoch 45 | loss: 1.45607 | train_balanced_accuracy: 0.22642 | train_logloss: 1.46358 | train_f1_macro: 0.21024 | valid_balanced_accuracy: 0.22552 | valid_logloss: 1.47613 | valid_f1_macro: 0.2093  |  0:23:45s
epoch 46 | loss: 1.45342 | train_balanced_accuracy: 0.20401 | train_logloss: 1.46643 | train_f1_macro: 0.16872 | valid_balanced_accuracy: 0.20188 | valid_logloss: 1.47602 | valid_f1_macro: 0.16551 |  0:24:17s
epoch 47 | loss: 1.45139 | train_balanced_accuracy: 0.22601 | train_logloss: 1.47363 | train_f1_macro: 0.21278 | valid_balanced_accuracy: 0.22518 | valid_logloss: 1.48573 | valid_f1_macro: 0.21153 |  0:24:47s
epoch 48 | loss: 1.45574 | train_balanced_accuracy: 0.22246 | train_logloss: 1.54576 | train_f1_macro: 0.20019 | valid_balanced_accuracy: 0.22271 | valid_logloss: 1.56342 | valid_f1_macro: 0.20059 |  0:25:18s
epoch 49 | loss: 1.45741 | train_balanced_accuracy: 0.203   | train_logloss: 1.73854 | train_f1_macro: 0.18795 | valid_balanced_accuracy: 0.19985 | valid_logloss: 1.75636 | valid_f1_macro: 0.18496 |  0:25:48s
epoch 50 | loss: 1.45112 | train_balanced_accuracy: 0.21429 | train_logloss: 1.67142 | train_f1_macro: 0.18695 | valid_balanced_accuracy: 0.21746 | valid_logloss: 1.67921 | valid_f1_macro: 0.18992 |  0:26:20s
epoch 51 | loss: 1.44878 | train_balanced_accuracy: 0.21785 | train_logloss: 1.59447 | train_f1_macro: 0.20183 | valid_balanced_accuracy: 0.21638 | valid_logloss: 1.60702 | valid_f1_macro: 0.20133 |  0:26:50s
epoch 52 | loss: 1.44579 | train_balanced_accuracy: 0.22264 | train_logloss: 1.70688 | train_f1_macro: 0.18164 | valid_balanced_accuracy: 0.2157  | valid_logloss: 1.7349  | valid_f1_macro: 0.17275 |  0:27:22s
epoch 53 | loss: 1.44784 | train_balanced_accuracy: 0.20484 | train_logloss: 1.55305 | train_f1_macro: 0.18736 | valid_balanced_accuracy: 0.20924 | valid_logloss: 1.56424 | valid_f1_macro: 0.19324 |  0:27:53s
epoch 54 | loss: 1.44867 | train_balanced_accuracy: 0.17797 | train_logloss: 1.57891 | train_f1_macro: 0.12273 | valid_balanced_accuracy: 0.17936 | valid_logloss: 1.59567 | valid_f1_macro: 0.12594 |  0:28:26s
epoch 55 | loss: 1.44888 | train_balanced_accuracy: 0.22754 | train_logloss: 1.50147 | train_f1_macro: 0.2036  | valid_balanced_accuracy: 0.22661 | valid_logloss: 1.5166  | valid_f1_macro: 0.20327 |  0:28:57s
epoch 56 | loss: 1.44721 | train_balanced_accuracy: 0.23758 | train_logloss: 1.49842 | train_f1_macro: 0.18111 | valid_balanced_accuracy: 0.2352  | valid_logloss: 1.50866 | valid_f1_macro: 0.17957 |  0:29:27s
epoch 57 | loss: 1.44884 | train_balanced_accuracy: 0.19071 | train_logloss: 1.50268 | train_f1_macro: 0.13987 | valid_balanced_accuracy: 0.19275 | valid_logloss: 1.50724 | valid_f1_macro: 0.14177 |  0:29:58s
epoch 58 | loss: 1.4497  | train_balanced_accuracy: 0.18757 | train_logloss: 1.48925 | train_f1_macro: 0.13587 | valid_balanced_accuracy: 0.18526 | valid_logloss: 1.49602 | valid_f1_macro: 0.13417 |  0:30:29s
epoch 59 | loss: 1.44739 | train_balanced_accuracy: 0.18825 | train_logloss: 1.47751 | train_f1_macro: 0.13593 | valid_balanced_accuracy: 0.18564 | valid_logloss: 1.48592 | valid_f1_macro: 0.13364 |  0:31:00s
epoch 60 | loss: 1.44282 | train_balanced_accuracy: 0.21639 | train_logloss: 1.47344 | train_f1_macro: 0.19134 | valid_balanced_accuracy: 0.21428 | valid_logloss: 1.48691 | valid_f1_macro: 0.18823 |  0:31:31s
epoch 61 | loss: 1.44195 | train_balanced_accuracy: 0.23731 | train_logloss: 1.54463 | train_f1_macro: 0.21773 | valid_balanced_accuracy: 0.2337  | valid_logloss: 1.56277 | valid_f1_macro: 0.21411 |  0:32:02s
epoch 62 | loss: 1.44013 | train_balanced_accuracy: 0.25203 | train_logloss: 1.59648 | train_f1_macro: 0.22118 | valid_balanced_accuracy: 0.25281 | valid_logloss: 1.6205  | valid_f1_macro: 0.22156 |  0:32:33s

Early stopping occurred at epoch 62 with best_epoch = 42 and best_valid_f1_macro = 0.23004
/mnt/Dados/Mestrado_Computacao_Aplicada_UFMS/documentos_dissertacao/algoritmos/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/pytorch_tabnet/callbacks.py:172: UserWarning: Best weights from best epoch are automatically used!
  warnings.warn(wrn_msg)
[CV 1/5; 7/7] END classifier__estimator=TabNetClassifierTuner(n_d=8, n_a=8, n_steps=3, gamma=1.3, cat_idxs=[], cat_dims=[], cat_emb_dim=1, n_independent=2, n_shared=2, epsilon=1e-15, momentum=0.02, lambda_sparse=0.001, seed=0, clip_value=1, verbose=1, optimizer_fn=<class 'torch.optim.adam.Adam'>, optimizer_params={'lr': 0.02}, scheduler_fn=None, scheduler_params={}, mask_type='sparsemax', input_dim=None, output_dim=None, device_name='cpu', n_shared_decoder=1, n_indep_decoder=1, use_embeddings=True, threshold_categorical_features=150, use_cat_emb_dim=True, fit_eval_metric=['balanced_accuracy', 'logloss', <class 'pytorch_tabnet_tuner.tab_model_tuner.F1ScoreMacro'>], fit_weights=0, fit_batch_size=1024, fit_virtual_batch_size=128), classifier__estimator__cat_emb_dim=20, classifier__estimator__clip_value=1, classifier__estimator__gamma=2.0, classifier__estimator__lambda_sparse=0.001, classifier__estimator__mask_type=sparsemax, classifier__estimator__momentum=0.4, classifier__estimator__n_a=64, classifier__estimator__n_independent=5, classifier__estimator__n_shared=5, classifier__estimator__n_steps=10, classifier__estimator__optimizer_fn=<class 'torch.optim.adam.Adam'>, classifier__estimator__optimizer_params={'lr': 0.02}, classifier__estimator__scheduler_fn=<class 'torch.optim.lr_scheduler.StepLR'>, classifier__estimator__scheduler_params={'step_size': 10, 'gamma': 0.95}, classifier__estimator__seed=42, classifier__estimator__verbose=1;, score=0.222 total time=32.8min
[CV 2/5; 7/7] START classifier__estimator=TabNetClassifierTuner(n_d=8, n_a=8, n_steps=3, gamma=1.3, cat_idxs=[], cat_dims=[], cat_emb_dim=1, n_independent=2, n_shared=2, epsilon=1e-15, momentum=0.02, lambda_sparse=0.001, seed=0, clip_value=1, verbose=1, optimizer_fn=<class 'torch.optim.adam.Adam'>, optimizer_params={'lr': 0.02}, scheduler_fn=None, scheduler_params={}, mask_type='sparsemax', input_dim=None, output_dim=None, device_name='cpu', n_shared_decoder=1, n_indep_decoder=1, use_embeddings=True, threshold_categorical_features=150, use_cat_emb_dim=True, fit_eval_metric=['balanced_accuracy', 'logloss', <class 'pytorch_tabnet_tuner.tab_model_tuner.F1ScoreMacro'>], fit_weights=0, fit_batch_size=1024, fit_virtual_batch_size=128), classifier__estimator__cat_emb_dim=20, classifier__estimator__clip_value=1, classifier__estimator__gamma=2.0, classifier__estimator__lambda_sparse=0.001, classifier__estimator__mask_type=sparsemax, classifier__estimator__momentum=0.4, classifier__estimator__n_a=64, classifier__estimator__n_independent=5, classifier__estimator__n_shared=5, classifier__estimator__n_steps=10, classifier__estimator__optimizer_fn=<class 'torch.optim.adam.Adam'>, classifier__estimator__optimizer_params={'lr': 0.02}, classifier__estimator__scheduler_fn=<class 'torch.optim.lr_scheduler.StepLR'>, classifier__estimator__scheduler_params={'step_size': 10, 'gamma': 0.95}, classifier__estimator__seed=42, classifier__estimator__verbose=1
/mnt/Dados/Mestrado_Computacao_Aplicada_UFMS/documentos_dissertacao/algoritmos/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/pytorch_tabnet/abstract_model.py:75: UserWarning: Device used : cpu
  warnings.warn(f"Device used : {self.device}")
/mnt/Dados/Mestrado_Computacao_Aplicada_UFMS/documentos_dissertacao/algoritmos/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/pytorch_tabnet/abstract_model.py:105: UserWarning: Pretraining: n_d changed from 8 to 64
  warnings.warn(wrn_msg)
/mnt/Dados/Mestrado_Computacao_Aplicada_UFMS/documentos_dissertacao/algoritmos/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/pytorch_tabnet/abstract_model.py:105: UserWarning: Pretraining: cat_dims changed from [] to [4, 2, 2, 2, 46, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]
  warnings.warn(wrn_msg)
/mnt/Dados/Mestrado_Computacao_Aplicada_UFMS/documentos_dissertacao/algoritmos/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/pytorch_tabnet/abstract_model.py:105: UserWarning: Pretraining: cat_emb_dim changed from 20 to [2, 1, 1, 1, 20, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
  warnings.warn(wrn_msg)
/mnt/Dados/Mestrado_Computacao_Aplicada_UFMS/documentos_dissertacao/algoritmos/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/pytorch_tabnet/abstract_model.py:105: UserWarning: Pretraining: cat_idxs changed from [] to [0, 1, 2, 3, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]
  warnings.warn(wrn_msg)
epoch 0  | loss: 4.02705 | train_balanced_accuracy: 0.17336 | train_logloss: 2.40521 | train_f1_macro: 0.09605 | valid_balanced_accuracy: 0.17498 | valid_logloss: 2.40038 | valid_f1_macro: 0.09705 |  0:00:32s
epoch 1  | loss: 2.46991 | train_balanced_accuracy: 0.18163 | train_logloss: 2.17554 | train_f1_macro: 0.13795 | valid_balanced_accuracy: 0.17591 | valid_logloss: 2.21248 | valid_f1_macro: 0.13357 |  0:01:03s
epoch 2  | loss: 2.60534 | train_balanced_accuracy: 0.19251 | train_logloss: 1.80295 | train_f1_macro: 0.15829 | valid_balanced_accuracy: 0.19119 | valid_logloss: 1.80363 | valid_f1_macro: 0.15536 |  0:01:34s
epoch 3  | loss: 1.67377 | train_balanced_accuracy: 0.169   | train_logloss: 1.94551 | train_f1_macro: 0.1039  | valid_balanced_accuracy: 0.17093 | valid_logloss: 1.95831 | valid_f1_macro: 0.10496 |  0:02:05s
epoch 4  | loss: 1.5962  | train_balanced_accuracy: 0.16693 | train_logloss: 2.03364 | train_f1_macro: 0.08693 | valid_balanced_accuracy: 0.16663 | valid_logloss: 2.03156 | valid_f1_macro: 0.08639 |  0:02:37s
epoch 5  | loss: 1.58032 | train_balanced_accuracy: 0.16672 | train_logloss: 1.65206 | train_f1_macro: 0.08622 | valid_balanced_accuracy: 0.1666  | valid_logloss: 1.65542 | valid_f1_macro: 0.086   |  0:03:08s
epoch 6  | loss: 1.54053 | train_balanced_accuracy: 0.16822 | train_logloss: 1.62454 | train_f1_macro: 0.10284 | valid_balanced_accuracy: 0.16476 | valid_logloss: 1.62614 | valid_f1_macro: 0.09863 |  0:03:39s
epoch 7  | loss: 1.51486 | train_balanced_accuracy: 0.16699 | train_logloss: 1.60925 | train_f1_macro: 0.08945 | valid_balanced_accuracy: 0.16708 | valid_logloss: 1.61149 | valid_f1_macro: 0.08972 |  0:04:11s
epoch 8  | loss: 1.484   | train_balanced_accuracy: 0.21098 | train_logloss: 1.53209 | train_f1_macro: 0.18922 | valid_balanced_accuracy: 0.20571 | valid_logloss: 1.53949 | valid_f1_macro: 0.18305 |  0:04:42s
epoch 9  | loss: 1.49115 | train_balanced_accuracy: 0.18967 | train_logloss: 1.79821 | train_f1_macro: 0.12057 | valid_balanced_accuracy: 0.19423 | valid_logloss: 1.80136 | valid_f1_macro: 0.12494 |  0:05:15s
epoch 10 | loss: 1.51816 | train_balanced_accuracy: 0.19978 | train_logloss: 1.63651 | train_f1_macro: 0.15098 | valid_balanced_accuracy: 0.20297 | valid_logloss: 1.63747 | valid_f1_macro: 0.15552 |  0:05:46s
epoch 11 | loss: 1.49068 | train_balanced_accuracy: 0.19678 | train_logloss: 1.53161 | train_f1_macro: 0.16049 | valid_balanced_accuracy: 0.19749 | valid_logloss: 1.53447 | valid_f1_macro: 0.16169 |  0:06:17s
epoch 12 | loss: 1.49539 | train_balanced_accuracy: 0.19148 | train_logloss: 1.52263 | train_f1_macro: 0.15416 | valid_balanced_accuracy: 0.19456 | valid_logloss: 1.53431 | valid_f1_macro: 0.15836 |  0:06:49s
epoch 13 | loss: 1.48525 | train_balanced_accuracy: 0.1782  | train_logloss: 1.52211 | train_f1_macro: 0.1178  | valid_balanced_accuracy: 0.17837 | valid_logloss: 1.53088 | valid_f1_macro: 0.11816 |  0:07:20s
epoch 14 | loss: 1.47973 | train_balanced_accuracy: 0.20744 | train_logloss: 1.47845 | train_f1_macro: 0.18105 | valid_balanced_accuracy: 0.2008  | valid_logloss: 1.48792 | valid_f1_macro: 0.17233 |  0:07:51s
epoch 15 | loss: 1.47703 | train_balanced_accuracy: 0.2245  | train_logloss: 1.46702 | train_f1_macro: 0.21273 | valid_balanced_accuracy: 0.21869 | valid_logloss: 1.47956 | valid_f1_macro: 0.20624 |  0:08:22s
epoch 16 | loss: 1.46394 | train_balanced_accuracy: 0.19517 | train_logloss: 1.48344 | train_f1_macro: 0.15825 | valid_balanced_accuracy: 0.19429 | valid_logloss: 1.49559 | valid_f1_macro: 0.15754 |  0:08:53s
epoch 17 | loss: 1.46088 | train_balanced_accuracy: 0.18877 | train_logloss: 1.48737 | train_f1_macro: 0.15299 | valid_balanced_accuracy: 0.18428 | valid_logloss: 1.49456 | valid_f1_macro: 0.14845 |  0:09:25s
epoch 18 | loss: 1.45422 | train_balanced_accuracy: 0.20513 | train_logloss: 1.48733 | train_f1_macro: 0.18305 | valid_balanced_accuracy: 0.20567 | valid_logloss: 1.50497 | valid_f1_macro: 0.18387 |  0:09:56s
epoch 19 | loss: 1.46341 | train_balanced_accuracy: 0.22038 | train_logloss: 1.48996 | train_f1_macro: 0.19904 | valid_balanced_accuracy: 0.21858 | valid_logloss: 1.52061 | valid_f1_macro: 0.19739 |  0:10:28s
epoch 20 | loss: 1.45572 | train_balanced_accuracy: 0.20535 | train_logloss: 1.46733 | train_f1_macro: 0.17448 | valid_balanced_accuracy: 0.20227 | valid_logloss: 1.48644 | valid_f1_macro: 0.17056 |  0:10:59s
epoch 21 | loss: 1.45507 | train_balanced_accuracy: 0.22876 | train_logloss: 1.49671 | train_f1_macro: 0.21358 | valid_balanced_accuracy: 0.22868 | valid_logloss: 1.52418 | valid_f1_macro: 0.21255 |  0:11:30s
epoch 22 | loss: 1.45233 | train_balanced_accuracy: 0.20117 | train_logloss: 1.50804 | train_f1_macro: 0.17445 | valid_balanced_accuracy: 0.20054 | valid_logloss: 1.52509 | valid_f1_macro: 0.17374 |  0:12:01s
epoch 23 | loss: 1.45052 | train_balanced_accuracy: 0.21039 | train_logloss: 1.51182 | train_f1_macro: 0.18585 | valid_balanced_accuracy: 0.21609 | valid_logloss: 1.53338 | valid_f1_macro: 0.19246 |  0:12:33s
epoch 24 | loss: 1.45496 | train_balanced_accuracy: 0.23798 | train_logloss: 1.50865 | train_f1_macro: 0.2138  | valid_balanced_accuracy: 0.2329  | valid_logloss: 1.53881 | valid_f1_macro: 0.2085  |  0:13:05s
epoch 25 | loss: 1.44738 | train_balanced_accuracy: 0.22034 | train_logloss: 1.55401 | train_f1_macro: 0.22291 | valid_balanced_accuracy: 0.22308 | valid_logloss: 1.57771 | valid_f1_macro: 0.22578 |  0:13:35s
epoch 26 | loss: 1.43311 | train_balanced_accuracy: 0.25758 | train_logloss: 1.6296  | train_f1_macro: 0.2317  | valid_balanced_accuracy: 0.24917 | valid_logloss: 1.65591 | valid_f1_macro: 0.21952 |  0:14:06s
epoch 27 | loss: 1.43385 | train_balanced_accuracy: 0.24817 | train_logloss: 1.5207  | train_f1_macro: 0.22208 | valid_balanced_accuracy: 0.24643 | valid_logloss: 1.53496 | valid_f1_macro: 0.21934 |  0:14:38s
epoch 28 | loss: 1.43191 | train_balanced_accuracy: 0.23538 | train_logloss: 1.58411 | train_f1_macro: 0.21365 | valid_balanced_accuracy: 0.2351  | valid_logloss: 1.60708 | valid_f1_macro: 0.21466 |  0:15:10s
epoch 29 | loss: 1.44551 | train_balanced_accuracy: 0.27726 | train_logloss: 1.58452 | train_f1_macro: 0.258   | valid_balanced_accuracy: 0.27879 | valid_logloss: 1.60473 | valid_f1_macro: 0.25773 |  0:15:42s
epoch 30 | loss: 1.44376 | train_balanced_accuracy: 0.255   | train_logloss: 1.46523 | train_f1_macro: 0.24365 | valid_balanced_accuracy: 0.25054 | valid_logloss: 1.48834 | valid_f1_macro: 0.23655 |  0:16:13s
epoch 31 | loss: 1.44493 | train_balanced_accuracy: 0.25886 | train_logloss: 2.0601  | train_f1_macro: 0.23566 | valid_balanced_accuracy: 0.25202 | valid_logloss: 2.05992 | valid_f1_macro: 0.22626 |  0:16:44s
epoch 32 | loss: 1.44149 | train_balanced_accuracy: 0.25604 | train_logloss: 1.65061 | train_f1_macro: 0.23348 | valid_balanced_accuracy: 0.24941 | valid_logloss: 1.6766  | valid_f1_macro: 0.22451 |  0:17:15s
epoch 33 | loss: 1.44225 | train_balanced_accuracy: 0.21741 | train_logloss: 1.64886 | train_f1_macro: 0.19266 | valid_balanced_accuracy: 0.217   | valid_logloss: 1.66364 | valid_f1_macro: 0.18967 |  0:17:46s
epoch 34 | loss: 1.44331 | train_balanced_accuracy: 0.2146  | train_logloss: 1.53794 | train_f1_macro: 0.1871  | valid_balanced_accuracy: 0.21103 | valid_logloss: 1.55864 | valid_f1_macro: 0.18454 |  0:18:17s
epoch 35 | loss: 1.44265 | train_balanced_accuracy: 0.21029 | train_logloss: 1.72862 | train_f1_macro: 0.18956 | valid_balanced_accuracy: 0.20831 | valid_logloss: 1.73864 | valid_f1_macro: 0.18436 |  0:18:48s
epoch 36 | loss: 1.44073 | train_balanced_accuracy: 0.19848 | train_logloss: 1.73632 | train_f1_macro: 0.15689 | valid_balanced_accuracy: 0.19465 | valid_logloss: 1.76271 | valid_f1_macro: 0.15176 |  0:19:20s
epoch 37 | loss: 1.44296 | train_balanced_accuracy: 0.20707 | train_logloss: 1.65096 | train_f1_macro: 0.18186 | valid_balanced_accuracy: 0.20887 | valid_logloss: 1.66502 | valid_f1_macro: 0.18375 |  0:19:52s
epoch 38 | loss: 1.44218 | train_balanced_accuracy: 0.26663 | train_logloss: 1.55142 | train_f1_macro: 0.25965 | valid_balanced_accuracy: 0.26499 | valid_logloss: 1.58158 | valid_f1_macro: 0.25769 |  0:20:23s
epoch 39 | loss: 1.44523 | train_balanced_accuracy: 0.26461 | train_logloss: 1.52016 | train_f1_macro: 0.25253 | valid_balanced_accuracy: 0.25937 | valid_logloss: 1.54091 | valid_f1_macro: 0.24527 |  0:20:54s
epoch 40 | loss: 1.43816 | train_balanced_accuracy: 0.23503 | train_logloss: 1.58079 | train_f1_macro: 0.22661 | valid_balanced_accuracy: 0.23116 | valid_logloss: 1.60277 | valid_f1_macro: 0.22253 |  0:21:25s
epoch 41 | loss: 1.44515 | train_balanced_accuracy: 0.19844 | train_logloss: 2.29795 | train_f1_macro: 0.16482 | valid_balanced_accuracy: 0.19707 | valid_logloss: 2.30817 | valid_f1_macro: 0.1627  |  0:21:56s
epoch 42 | loss: 1.45374 | train_balanced_accuracy: 0.20749 | train_logloss: 1.49786 | train_f1_macro: 0.17405 | valid_balanced_accuracy: 0.20536 | valid_logloss: 1.51908 | valid_f1_macro: 0.17011 |  0:22:27s
epoch 43 | loss: 1.45127 | train_balanced_accuracy: 0.23053 | train_logloss: 1.6706  | train_f1_macro: 0.20377 | valid_balanced_accuracy: 0.23028 | valid_logloss: 1.70577 | valid_f1_macro: 0.20279 |  0:22:58s
epoch 44 | loss: 1.44745 | train_balanced_accuracy: 0.21533 | train_logloss: 1.45852 | train_f1_macro: 0.18137 | valid_balanced_accuracy: 0.21047 | valid_logloss: 1.47485 | valid_f1_macro: 0.17462 |  0:23:30s
epoch 45 | loss: 1.44706 | train_balanced_accuracy: 0.26083 | train_logloss: 1.46642 | train_f1_macro: 0.24959 | valid_balanced_accuracy: 0.25909 | valid_logloss: 1.48434 | valid_f1_macro: 0.24787 |  0:24:00s
epoch 46 | loss: 1.44134 | train_balanced_accuracy: 0.24349 | train_logloss: 1.42584 | train_f1_macro: 0.22559 | valid_balanced_accuracy: 0.24267 | valid_logloss: 1.44516 | valid_f1_macro: 0.22392 |  0:24:31s
epoch 47 | loss: 1.44114 | train_balanced_accuracy: 0.22547 | train_logloss: 1.42342 | train_f1_macro: 0.20226 | valid_balanced_accuracy: 0.22133 | valid_logloss: 1.44427 | valid_f1_macro: 0.19727 |  0:25:03s
epoch 48 | loss: 1.44212 | train_balanced_accuracy: 0.26841 | train_logloss: 1.42226 | train_f1_macro: 0.25261 | valid_balanced_accuracy: 0.27051 | valid_logloss: 1.43843 | valid_f1_macro: 0.25492 |  0:25:37s
epoch 49 | loss: 1.44245 | train_balanced_accuracy: 0.20373 | train_logloss: 1.4346  | train_f1_macro: 0.16603 | valid_balanced_accuracy: 0.20279 | valid_logloss: 1.44823 | valid_f1_macro: 0.16545 |  0:26:09s

Early stopping occurred at epoch 49 with best_epoch = 29 and best_valid_f1_macro = 0.25773
/mnt/Dados/Mestrado_Computacao_Aplicada_UFMS/documentos_dissertacao/algoritmos/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/pytorch_tabnet/callbacks.py:172: UserWarning: Best weights from best epoch are automatically used!
  warnings.warn(wrn_msg)
[CV 2/5; 7/7] END classifier__estimator=TabNetClassifierTuner(n_d=8, n_a=8, n_steps=3, gamma=1.3, cat_idxs=[], cat_dims=[], cat_emb_dim=1, n_independent=2, n_shared=2, epsilon=1e-15, momentum=0.02, lambda_sparse=0.001, seed=0, clip_value=1, verbose=1, optimizer_fn=<class 'torch.optim.adam.Adam'>, optimizer_params={'lr': 0.02}, scheduler_fn=None, scheduler_params={}, mask_type='sparsemax', input_dim=None, output_dim=None, device_name='cpu', n_shared_decoder=1, n_indep_decoder=1, use_embeddings=True, threshold_categorical_features=150, use_cat_emb_dim=True, fit_eval_metric=['balanced_accuracy', 'logloss', <class 'pytorch_tabnet_tuner.tab_model_tuner.F1ScoreMacro'>], fit_weights=0, fit_batch_size=1024, fit_virtual_batch_size=128), classifier__estimator__cat_emb_dim=20, classifier__estimator__clip_value=1, classifier__estimator__gamma=2.0, classifier__estimator__lambda_sparse=0.001, classifier__estimator__mask_type=sparsemax, classifier__estimator__momentum=0.4, classifier__estimator__n_a=64, classifier__estimator__n_independent=5, classifier__estimator__n_shared=5, classifier__estimator__n_steps=10, classifier__estimator__optimizer_fn=<class 'torch.optim.adam.Adam'>, classifier__estimator__optimizer_params={'lr': 0.02}, classifier__estimator__scheduler_fn=<class 'torch.optim.lr_scheduler.StepLR'>, classifier__estimator__scheduler_params={'step_size': 10, 'gamma': 0.95}, classifier__estimator__seed=42, classifier__estimator__verbose=1;, score=0.250 total time=26.4min
[CV 3/5; 7/7] START classifier__estimator=TabNetClassifierTuner(n_d=8, n_a=8, n_steps=3, gamma=1.3, cat_idxs=[], cat_dims=[], cat_emb_dim=1, n_independent=2, n_shared=2, epsilon=1e-15, momentum=0.02, lambda_sparse=0.001, seed=0, clip_value=1, verbose=1, optimizer_fn=<class 'torch.optim.adam.Adam'>, optimizer_params={'lr': 0.02}, scheduler_fn=None, scheduler_params={}, mask_type='sparsemax', input_dim=None, output_dim=None, device_name='cpu', n_shared_decoder=1, n_indep_decoder=1, use_embeddings=True, threshold_categorical_features=150, use_cat_emb_dim=True, fit_eval_metric=['balanced_accuracy', 'logloss', <class 'pytorch_tabnet_tuner.tab_model_tuner.F1ScoreMacro'>], fit_weights=0, fit_batch_size=1024, fit_virtual_batch_size=128), classifier__estimator__cat_emb_dim=20, classifier__estimator__clip_value=1, classifier__estimator__gamma=2.0, classifier__estimator__lambda_sparse=0.001, classifier__estimator__mask_type=sparsemax, classifier__estimator__momentum=0.4, classifier__estimator__n_a=64, classifier__estimator__n_independent=5, classifier__estimator__n_shared=5, classifier__estimator__n_steps=10, classifier__estimator__optimizer_fn=<class 'torch.optim.adam.Adam'>, classifier__estimator__optimizer_params={'lr': 0.02}, classifier__estimator__scheduler_fn=<class 'torch.optim.lr_scheduler.StepLR'>, classifier__estimator__scheduler_params={'step_size': 10, 'gamma': 0.95}, classifier__estimator__seed=42, classifier__estimator__verbose=1
/mnt/Dados/Mestrado_Computacao_Aplicada_UFMS/documentos_dissertacao/algoritmos/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/pytorch_tabnet/abstract_model.py:75: UserWarning: Device used : cpu
  warnings.warn(f"Device used : {self.device}")
/mnt/Dados/Mestrado_Computacao_Aplicada_UFMS/documentos_dissertacao/algoritmos/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/pytorch_tabnet/abstract_model.py:105: UserWarning: Pretraining: n_d changed from 8 to 64
  warnings.warn(wrn_msg)
/mnt/Dados/Mestrado_Computacao_Aplicada_UFMS/documentos_dissertacao/algoritmos/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/pytorch_tabnet/abstract_model.py:105: UserWarning: Pretraining: cat_dims changed from [] to [4, 2, 2, 2, 46, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]
  warnings.warn(wrn_msg)
/mnt/Dados/Mestrado_Computacao_Aplicada_UFMS/documentos_dissertacao/algoritmos/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/pytorch_tabnet/abstract_model.py:105: UserWarning: Pretraining: cat_emb_dim changed from 20 to [2, 1, 1, 1, 20, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
  warnings.warn(wrn_msg)
/mnt/Dados/Mestrado_Computacao_Aplicada_UFMS/documentos_dissertacao/algoritmos/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/pytorch_tabnet/abstract_model.py:105: UserWarning: Pretraining: cat_idxs changed from [] to [0, 1, 2, 3, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]
  warnings.warn(wrn_msg)
epoch 0  | loss: 4.35144 | train_balanced_accuracy: 0.16055 | train_logloss: 4.03491 | train_f1_macro: 0.13924 | valid_balanced_accuracy: 0.15634 | valid_logloss: 4.06236 | valid_f1_macro: 0.13653 |  0:00:31s
epoch 1  | loss: 2.70335 | train_balanced_accuracy: 0.15536 | train_logloss: 2.32761 | train_f1_macro: 0.13639 | valid_balanced_accuracy: 0.15905 | valid_logloss: 2.32516 | valid_f1_macro: 0.13942 |  0:01:03s
epoch 2  | loss: 2.25906 | train_balanced_accuracy: 0.1713  | train_logloss: 1.93555 | train_f1_macro: 0.11903 | valid_balanced_accuracy: 0.17053 | valid_logloss: 1.94865 | valid_f1_macro: 0.1174  |  0:01:34s
epoch 3  | loss: 1.74755 | train_balanced_accuracy: 0.16755 | train_logloss: 1.92212 | train_f1_macro: 0.08871 | valid_balanced_accuracy: 0.16699 | valid_logloss: 1.94098 | valid_f1_macro: 0.08815 |  0:02:06s
epoch 4  | loss: 1.60915 | train_balanced_accuracy: 0.17025 | train_logloss: 1.66567 | train_f1_macro: 0.0979  | valid_balanced_accuracy: 0.17019 | valid_logloss: 1.67863 | valid_f1_macro: 0.09829 |  0:02:37s
epoch 5  | loss: 1.54342 | train_balanced_accuracy: 0.16668 | train_logloss: 1.6632  | train_f1_macro: 0.08622 | valid_balanced_accuracy: 0.16658 | valid_logloss: 1.66051 | valid_f1_macro: 0.0862  |  0:03:08s
epoch 6  | loss: 1.53333 | train_balanced_accuracy: 0.17972 | train_logloss: 1.56993 | train_f1_macro: 0.12153 | valid_balanced_accuracy: 0.17892 | valid_logloss: 1.57736 | valid_f1_macro: 0.12028 |  0:03:40s
epoch 7  | loss: 1.52663 | train_balanced_accuracy: 0.16856 | train_logloss: 1.74937 | train_f1_macro: 0.09037 | valid_balanced_accuracy: 0.1689  | valid_logloss: 1.76183 | valid_f1_macro: 0.091   |  0:04:11s
epoch 8  | loss: 1.52151 | train_balanced_accuracy: 0.16866 | train_logloss: 1.57719 | train_f1_macro: 0.09247 | valid_balanced_accuracy: 0.16953 | valid_logloss: 1.57967 | valid_f1_macro: 0.09336 |  0:04:42s
epoch 9  | loss: 1.50613 | train_balanced_accuracy: 0.17769 | train_logloss: 1.70629 | train_f1_macro: 0.14343 | valid_balanced_accuracy: 0.17656 | valid_logloss: 1.70924 | valid_f1_macro: 0.14259 |  0:05:14s
epoch 10 | loss: 1.49247 | train_balanced_accuracy: 0.1866  | train_logloss: 1.81158 | train_f1_macro: 0.11966 | valid_balanced_accuracy: 0.18196 | valid_logloss: 1.82832 | valid_f1_macro: 0.11524 |  0:05:45s
epoch 11 | loss: 1.49646 | train_balanced_accuracy: 0.18939 | train_logloss: 1.50218 | train_f1_macro: 0.13758 | valid_balanced_accuracy: 0.18674 | valid_logloss: 1.50885 | valid_f1_macro: 0.13327 |  0:06:17s
epoch 12 | loss: 1.48821 | train_balanced_accuracy: 0.24608 | train_logloss: 1.48703 | train_f1_macro: 0.13805 | valid_balanced_accuracy: 0.24657 | valid_logloss: 1.49451 | valid_f1_macro: 0.13821 |  0:06:48s
epoch 13 | loss: 1.47413 | train_balanced_accuracy: 0.18031 | train_logloss: 1.48125 | train_f1_macro: 0.12268 | valid_balanced_accuracy: 0.18017 | valid_logloss: 1.48921 | valid_f1_macro: 0.12184 |  0:07:19s
epoch 14 | loss: 1.46821 | train_balanced_accuracy: 0.1893  | train_logloss: 1.48089 | train_f1_macro: 0.14322 | valid_balanced_accuracy: 0.19018 | valid_logloss: 1.49224 | valid_f1_macro: 0.1447  |  0:07:50s
epoch 15 | loss: 1.46593 | train_balanced_accuracy: 0.17589 | train_logloss: 1.47855 | train_f1_macro: 0.114   | valid_balanced_accuracy: 0.17769 | valid_logloss: 1.48211 | valid_f1_macro: 0.11761 |  0:08:22s
epoch 16 | loss: 1.46389 | train_balanced_accuracy: 0.179   | train_logloss: 1.50098 | train_f1_macro: 0.12202 | valid_balanced_accuracy: 0.17874 | valid_logloss: 1.50511 | valid_f1_macro: 0.12207 |  0:08:54s
epoch 17 | loss: 1.47467 | train_balanced_accuracy: 0.17014 | train_logloss: 1.54852 | train_f1_macro: 0.10269 | valid_balanced_accuracy: 0.1697  | valid_logloss: 1.55931 | valid_f1_macro: 0.10311 |  0:09:26s
epoch 18 | loss: 1.46967 | train_balanced_accuracy: 0.19578 | train_logloss: 1.46462 | train_f1_macro: 0.15217 | valid_balanced_accuracy: 0.193   | valid_logloss: 1.46975 | valid_f1_macro: 0.14877 |  0:09:57s
epoch 19 | loss: 1.4659  | train_balanced_accuracy: 0.22624 | train_logloss: 3.48991 | train_f1_macro: 0.1606  | valid_balanced_accuracy: 0.22698 | valid_logloss: 3.59341 | valid_f1_macro: 0.1601  |  0:10:29s
epoch 20 | loss: 1.47297 | train_balanced_accuracy: 0.18826 | train_logloss: 2.04014 | train_f1_macro: 0.13483 | valid_balanced_accuracy: 0.18812 | valid_logloss: 2.07214 | valid_f1_macro: 0.13436 |  0:11:00s
epoch 21 | loss: 1.46426 | train_balanced_accuracy: 0.23415 | train_logloss: 3.39316 | train_f1_macro: 0.20552 | valid_balanced_accuracy: 0.23576 | valid_logloss: 3.39104 | valid_f1_macro: 0.20732 |  0:11:31s
epoch 22 | loss: 1.4619  | train_balanced_accuracy: 0.19333 | train_logloss: 1.84353 | train_f1_macro: 0.15292 | valid_balanced_accuracy: 0.18939 | valid_logloss: 1.85345 | valid_f1_macro: 0.14891 |  0:12:02s
epoch 23 | loss: 1.46033 | train_balanced_accuracy: 0.23647 | train_logloss: 1.7559  | train_f1_macro: 0.20633 | valid_balanced_accuracy: 0.23613 | valid_logloss: 1.76277 | valid_f1_macro: 0.20718 |  0:12:33s
epoch 24 | loss: 1.46065 | train_balanced_accuracy: 0.20659 | train_logloss: 2.03736 | train_f1_macro: 0.17352 | valid_balanced_accuracy: 0.20371 | valid_logloss: 2.066   | valid_f1_macro: 0.17056 |  0:13:05s
epoch 25 | loss: 1.45913 | train_balanced_accuracy: 0.20387 | train_logloss: 1.80171 | train_f1_macro: 0.18128 | valid_balanced_accuracy: 0.20255 | valid_logloss: 1.81376 | valid_f1_macro: 0.17945 |  0:13:37s
epoch 26 | loss: 1.45588 | train_balanced_accuracy: 0.19219 | train_logloss: 1.65009 | train_f1_macro: 0.1444  | valid_balanced_accuracy: 0.1886  | valid_logloss: 1.66459 | valid_f1_macro: 0.13826 |  0:14:08s
epoch 27 | loss: 1.45686 | train_balanced_accuracy: 0.19331 | train_logloss: 1.60268 | train_f1_macro: 0.14733 | valid_balanced_accuracy: 0.19276 | valid_logloss: 1.61248 | valid_f1_macro: 0.14481 |  0:14:40s
epoch 28 | loss: 1.45373 | train_balanced_accuracy: 0.20127 | train_logloss: 1.47171 | train_f1_macro: 0.16461 | valid_balanced_accuracy: 0.1995  | valid_logloss: 1.48567 | valid_f1_macro: 0.16129 |  0:15:11s
epoch 29 | loss: 1.4598  | train_balanced_accuracy: 0.1863  | train_logloss: 1.50933 | train_f1_macro: 0.132   | valid_balanced_accuracy: 0.18583 | valid_logloss: 1.52965 | valid_f1_macro: 0.13063 |  0:15:42s
epoch 30 | loss: 1.47048 | train_balanced_accuracy: 0.19659 | train_logloss: 1.48035 | train_f1_macro: 0.14884 | valid_balanced_accuracy: 0.19316 | valid_logloss: 1.50221 | valid_f1_macro: 0.14368 |  0:16:13s
epoch 31 | loss: 1.46361 | train_balanced_accuracy: 0.20265 | train_logloss: 1.47354 | train_f1_macro: 0.1668  | valid_balanced_accuracy: 0.19442 | valid_logloss: 1.49009 | valid_f1_macro: 0.15526 |  0:16:45s
epoch 32 | loss: 1.46325 | train_balanced_accuracy: 0.19026 | train_logloss: 1.47431 | train_f1_macro: 0.14382 | valid_balanced_accuracy: 0.18948 | valid_logloss: 1.48077 | valid_f1_macro: 0.14183 |  0:17:17s
epoch 33 | loss: 1.458   | train_balanced_accuracy: 0.19997 | train_logloss: 1.47061 | train_f1_macro: 0.16878 | valid_balanced_accuracy: 0.19642 | valid_logloss: 1.47613 | valid_f1_macro: 0.16445 |  0:17:48s
epoch 34 | loss: 1.45785 | train_balanced_accuracy: 0.17831 | train_logloss: 1.50159 | train_f1_macro: 0.11681 | valid_balanced_accuracy: 0.17742 | valid_logloss: 1.51892 | valid_f1_macro: 0.11511 |  0:18:19s
epoch 35 | loss: 1.46272 | train_balanced_accuracy: 0.19202 | train_logloss: 1.5056  | train_f1_macro: 0.14621 | valid_balanced_accuracy: 0.18773 | valid_logloss: 1.51936 | valid_f1_macro: 0.13844 |  0:18:51s
epoch 36 | loss: 1.46141 | train_balanced_accuracy: 0.19902 | train_logloss: 1.489   | train_f1_macro: 0.15319 | valid_balanced_accuracy: 0.19585 | valid_logloss: 1.4916  | valid_f1_macro: 0.1489  |  0:19:24s
epoch 37 | loss: 1.4519  | train_balanced_accuracy: 0.19636 | train_logloss: 1.46035 | train_f1_macro: 0.15352 | valid_balanced_accuracy: 0.19285 | valid_logloss: 1.47556 | valid_f1_macro: 0.14816 |  0:19:55s
epoch 38 | loss: 1.44979 | train_balanced_accuracy: 0.22188 | train_logloss: 1.46174 | train_f1_macro: 0.19499 | valid_balanced_accuracy: 0.21121 | valid_logloss: 1.47248 | valid_f1_macro: 0.18142 |  0:20:26s
epoch 39 | loss: 1.44796 | train_balanced_accuracy: 0.20728 | train_logloss: 1.4639  | train_f1_macro: 0.17373 | valid_balanced_accuracy: 0.20069 | valid_logloss: 1.47656 | valid_f1_macro: 0.16463 |  0:20:57s
epoch 40 | loss: 1.44541 | train_balanced_accuracy: 0.20975 | train_logloss: 1.45932 | train_f1_macro: 0.17836 | valid_balanced_accuracy: 0.20269 | valid_logloss: 1.47338 | valid_f1_macro: 0.16948 |  0:21:28s
epoch 41 | loss: 1.44968 | train_balanced_accuracy: 0.21733 | train_logloss: 1.46498 | train_f1_macro: 0.18304 | valid_balanced_accuracy: 0.20818 | valid_logloss: 1.48456 | valid_f1_macro: 0.17151 |  0:22:00s

Early stopping occurred at epoch 41 with best_epoch = 21 and best_valid_f1_macro = 0.20732
/mnt/Dados/Mestrado_Computacao_Aplicada_UFMS/documentos_dissertacao/algoritmos/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/pytorch_tabnet/callbacks.py:172: UserWarning: Best weights from best epoch are automatically used!
  warnings.warn(wrn_msg)
[CV 3/5; 7/7] END classifier__estimator=TabNetClassifierTuner(n_d=8, n_a=8, n_steps=3, gamma=1.3, cat_idxs=[], cat_dims=[], cat_emb_dim=1, n_independent=2, n_shared=2, epsilon=1e-15, momentum=0.02, lambda_sparse=0.001, seed=0, clip_value=1, verbose=1, optimizer_fn=<class 'torch.optim.adam.Adam'>, optimizer_params={'lr': 0.02}, scheduler_fn=None, scheduler_params={}, mask_type='sparsemax', input_dim=None, output_dim=None, device_name='cpu', n_shared_decoder=1, n_indep_decoder=1, use_embeddings=True, threshold_categorical_features=150, use_cat_emb_dim=True, fit_eval_metric=['balanced_accuracy', 'logloss', <class 'pytorch_tabnet_tuner.tab_model_tuner.F1ScoreMacro'>], fit_weights=0, fit_batch_size=1024, fit_virtual_batch_size=128), classifier__estimator__cat_emb_dim=20, classifier__estimator__clip_value=1, classifier__estimator__gamma=2.0, classifier__estimator__lambda_sparse=0.001, classifier__estimator__mask_type=sparsemax, classifier__estimator__momentum=0.4, classifier__estimator__n_a=64, classifier__estimator__n_independent=5, classifier__estimator__n_shared=5, classifier__estimator__n_steps=10, classifier__estimator__optimizer_fn=<class 'torch.optim.adam.Adam'>, classifier__estimator__optimizer_params={'lr': 0.02}, classifier__estimator__scheduler_fn=<class 'torch.optim.lr_scheduler.StepLR'>, classifier__estimator__scheduler_params={'step_size': 10, 'gamma': 0.95}, classifier__estimator__seed=42, classifier__estimator__verbose=1;, score=0.199 total time=22.2min
[CV 4/5; 7/7] START classifier__estimator=TabNetClassifierTuner(n_d=8, n_a=8, n_steps=3, gamma=1.3, cat_idxs=[], cat_dims=[], cat_emb_dim=1, n_independent=2, n_shared=2, epsilon=1e-15, momentum=0.02, lambda_sparse=0.001, seed=0, clip_value=1, verbose=1, optimizer_fn=<class 'torch.optim.adam.Adam'>, optimizer_params={'lr': 0.02}, scheduler_fn=None, scheduler_params={}, mask_type='sparsemax', input_dim=None, output_dim=None, device_name='cpu', n_shared_decoder=1, n_indep_decoder=1, use_embeddings=True, threshold_categorical_features=150, use_cat_emb_dim=True, fit_eval_metric=['balanced_accuracy', 'logloss', <class 'pytorch_tabnet_tuner.tab_model_tuner.F1ScoreMacro'>], fit_weights=0, fit_batch_size=1024, fit_virtual_batch_size=128), classifier__estimator__cat_emb_dim=20, classifier__estimator__clip_value=1, classifier__estimator__gamma=2.0, classifier__estimator__lambda_sparse=0.001, classifier__estimator__mask_type=sparsemax, classifier__estimator__momentum=0.4, classifier__estimator__n_a=64, classifier__estimator__n_independent=5, classifier__estimator__n_shared=5, classifier__estimator__n_steps=10, classifier__estimator__optimizer_fn=<class 'torch.optim.adam.Adam'>, classifier__estimator__optimizer_params={'lr': 0.02}, classifier__estimator__scheduler_fn=<class 'torch.optim.lr_scheduler.StepLR'>, classifier__estimator__scheduler_params={'step_size': 10, 'gamma': 0.95}, classifier__estimator__seed=42, classifier__estimator__verbose=1
/mnt/Dados/Mestrado_Computacao_Aplicada_UFMS/documentos_dissertacao/algoritmos/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/pytorch_tabnet/abstract_model.py:75: UserWarning: Device used : cpu
  warnings.warn(f"Device used : {self.device}")
/mnt/Dados/Mestrado_Computacao_Aplicada_UFMS/documentos_dissertacao/algoritmos/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/pytorch_tabnet/abstract_model.py:105: UserWarning: Pretraining: n_d changed from 8 to 64
  warnings.warn(wrn_msg)
/mnt/Dados/Mestrado_Computacao_Aplicada_UFMS/documentos_dissertacao/algoritmos/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/pytorch_tabnet/abstract_model.py:105: UserWarning: Pretraining: cat_dims changed from [] to [4, 2, 2, 2, 46, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]
  warnings.warn(wrn_msg)
/mnt/Dados/Mestrado_Computacao_Aplicada_UFMS/documentos_dissertacao/algoritmos/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/pytorch_tabnet/abstract_model.py:105: UserWarning: Pretraining: cat_emb_dim changed from 20 to [2, 1, 1, 1, 20, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
  warnings.warn(wrn_msg)
/mnt/Dados/Mestrado_Computacao_Aplicada_UFMS/documentos_dissertacao/algoritmos/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/pytorch_tabnet/abstract_model.py:105: UserWarning: Pretraining: cat_idxs changed from [] to [0, 1, 2, 3, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]
  warnings.warn(wrn_msg)
epoch 0  | loss: 3.60891 | train_balanced_accuracy: 0.16841 | train_logloss: 4.02777 | train_f1_macro: 0.09303 | valid_balanced_accuracy: 0.16806 | valid_logloss: 4.01218 | valid_f1_macro: 0.09086 |  0:00:31s
epoch 1  | loss: 2.85222 | train_balanced_accuracy: 0.17444 | train_logloss: 2.89737 | train_f1_macro: 0.12597 | valid_balanced_accuracy: 0.17003 | valid_logloss: 2.86515 | valid_f1_macro: 0.12289 |  0:01:02s
epoch 2  | loss: 2.10941 | train_balanced_accuracy: 0.16489 | train_logloss: 1.65648 | train_f1_macro: 0.09748 | valid_balanced_accuracy: 0.16457 | valid_logloss: 1.65652 | valid_f1_macro: 0.09682 |  0:01:35s
epoch 3  | loss: 1.73887 | train_balanced_accuracy: 0.16602 | train_logloss: 1.6059  | train_f1_macro: 0.11063 | valid_balanced_accuracy: 0.16752 | valid_logloss: 1.60349 | valid_f1_macro: 0.11231 |  0:02:07s
epoch 4  | loss: 1.59407 | train_balanced_accuracy: 0.16676 | train_logloss: 1.52577 | train_f1_macro: 0.08636 | valid_balanced_accuracy: 0.16706 | valid_logloss: 1.52519 | valid_f1_macro: 0.08688 |  0:02:39s
epoch 5  | loss: 1.52621 | train_balanced_accuracy: 0.17429 | train_logloss: 1.52511 | train_f1_macro: 0.10476 | valid_balanced_accuracy: 0.1739  | valid_logloss: 1.52572 | valid_f1_macro: 0.10411 |  0:03:11s
epoch 6  | loss: 1.49828 | train_balanced_accuracy: 0.17749 | train_logloss: 1.53633 | train_f1_macro: 0.12345 | valid_balanced_accuracy: 0.17371 | valid_logloss: 1.53537 | valid_f1_macro: 0.11889 |  0:03:42s
epoch 7  | loss: 1.49701 | train_balanced_accuracy: 0.1663  | train_logloss: 1.6935  | train_f1_macro: 0.09056 | valid_balanced_accuracy: 0.16617 | valid_logloss: 1.69244 | valid_f1_macro: 0.0898  |  0:04:13s
epoch 8  | loss: 1.48505 | train_balanced_accuracy: 0.23229 | train_logloss: 1.80982 | train_f1_macro: 0.18933 | valid_balanced_accuracy: 0.22631 | valid_logloss: 1.82672 | valid_f1_macro: 0.18526 |  0:04:45s
epoch 9  | loss: 1.47422 | train_balanced_accuracy: 0.1856  | train_logloss: 1.67412 | train_f1_macro: 0.13526 | valid_balanced_accuracy: 0.18538 | valid_logloss: 1.66736 | valid_f1_macro: 0.13429 |  0:05:16s
epoch 10 | loss: 1.4678  | train_balanced_accuracy: 0.18396 | train_logloss: 1.51249 | train_f1_macro: 0.13046 | valid_balanced_accuracy: 0.18543 | valid_logloss: 1.51187 | valid_f1_macro: 0.13304 |  0:05:48s
epoch 11 | loss: 1.4583  | train_balanced_accuracy: 0.19535 | train_logloss: 1.48627 | train_f1_macro: 0.15666 | valid_balanced_accuracy: 0.19349 | valid_logloss: 1.49185 | valid_f1_macro: 0.1551  |  0:06:19s
epoch 12 | loss: 1.45445 | train_balanced_accuracy: 0.18223 | train_logloss: 1.48501 | train_f1_macro: 0.12591 | valid_balanced_accuracy: 0.18055 | valid_logloss: 1.49376 | valid_f1_macro: 0.12196 |  0:06:53s
epoch 13 | loss: 1.4502  | train_balanced_accuracy: 0.17678 | train_logloss: 1.48797 | train_f1_macro: 0.11195 | valid_balanced_accuracy: 0.17684 | valid_logloss: 1.48825 | valid_f1_macro: 0.11236 |  0:07:24s
epoch 14 | loss: 1.4474  | train_balanced_accuracy: 0.19385 | train_logloss: 1.49095 | train_f1_macro: 0.15942 | valid_balanced_accuracy: 0.19304 | valid_logloss: 1.49385 | valid_f1_macro: 0.15863 |  0:07:55s
epoch 15 | loss: 1.44717 | train_balanced_accuracy: 0.19854 | train_logloss: 1.4979  | train_f1_macro: 0.16276 | valid_balanced_accuracy: 0.19769 | valid_logloss: 1.4998  | valid_f1_macro: 0.16077 |  0:08:26s
epoch 16 | loss: 1.4452  | train_balanced_accuracy: 0.23277 | train_logloss: 1.47551 | train_f1_macro: 0.20665 | valid_balanced_accuracy: 0.22894 | valid_logloss: 1.48317 | valid_f1_macro: 0.20408 |  0:08:58s
epoch 17 | loss: 1.43945 | train_balanced_accuracy: 0.21185 | train_logloss: 1.46703 | train_f1_macro: 0.17665 | valid_balanced_accuracy: 0.20783 | valid_logloss: 1.47304 | valid_f1_macro: 0.1715  |  0:09:30s
epoch 18 | loss: 1.4488  | train_balanced_accuracy: 0.182   | train_logloss: 1.48059 | train_f1_macro: 0.1265  | valid_balanced_accuracy: 0.17993 | valid_logloss: 1.48307 | valid_f1_macro: 0.12434 |  0:10:00s
epoch 19 | loss: 1.46118 | train_balanced_accuracy: 0.19825 | train_logloss: 1.66492 | train_f1_macro: 0.1736  | valid_balanced_accuracy: 0.19503 | valid_logloss: 1.68844 | valid_f1_macro: 0.16681 |  0:10:31s
epoch 20 | loss: 1.46265 | train_balanced_accuracy: 0.17091 | train_logloss: 1.51898 | train_f1_macro: 0.106   | valid_balanced_accuracy: 0.16992 | valid_logloss: 1.51171 | valid_f1_macro: 0.10485 |  0:11:03s
epoch 21 | loss: 1.46803 | train_balanced_accuracy: 0.20181 | train_logloss: 1.49028 | train_f1_macro: 0.16159 | valid_balanced_accuracy: 0.19948 | valid_logloss: 1.49413 | valid_f1_macro: 0.16007 |  0:11:36s
epoch 22 | loss: 1.47112 | train_balanced_accuracy: 0.20165 | train_logloss: 1.48211 | train_f1_macro: 0.17678 | valid_balanced_accuracy: 0.20062 | valid_logloss: 1.48546 | valid_f1_macro: 0.17599 |  0:12:07s
epoch 23 | loss: 1.46674 | train_balanced_accuracy: 0.23121 | train_logloss: 1.5319  | train_f1_macro: 0.17932 | valid_balanced_accuracy: 0.2327  | valid_logloss: 1.53833 | valid_f1_macro: 0.18162 |  0:12:38s
epoch 24 | loss: 1.46393 | train_balanced_accuracy: 0.20551 | train_logloss: 1.56348 | train_f1_macro: 0.17892 | valid_balanced_accuracy: 0.20765 | valid_logloss: 1.57226 | valid_f1_macro: 0.18174 |  0:13:09s
epoch 25 | loss: 1.44721 | train_balanced_accuracy: 0.23705 | train_logloss: 1.49814 | train_f1_macro: 0.18463 | valid_balanced_accuracy: 0.23757 | valid_logloss: 1.49817 | valid_f1_macro: 0.18706 |  0:13:41s
epoch 26 | loss: 1.43589 | train_balanced_accuracy: 0.23552 | train_logloss: 1.4554  | train_f1_macro: 0.19942 | valid_balanced_accuracy: 0.23719 | valid_logloss: 1.46144 | valid_f1_macro: 0.20336 |  0:14:12s
epoch 27 | loss: 1.43252 | train_balanced_accuracy: 0.20764 | train_logloss: 1.44955 | train_f1_macro: 0.17308 | valid_balanced_accuracy: 0.20882 | valid_logloss: 1.45897 | valid_f1_macro: 0.17512 |  0:14:43s
epoch 28 | loss: 1.43074 | train_balanced_accuracy: 0.26349 | train_logloss: 1.47943 | train_f1_macro: 0.23782 | valid_balanced_accuracy: 0.26444 | valid_logloss: 1.48807 | valid_f1_macro: 0.2369  |  0:15:15s
epoch 29 | loss: 1.4276  | train_balanced_accuracy: 0.22259 | train_logloss: 1.46647 | train_f1_macro: 0.19335 | valid_balanced_accuracy: 0.22176 | valid_logloss: 1.46828 | valid_f1_macro: 0.19384 |  0:15:46s
epoch 30 | loss: 1.4274  | train_balanced_accuracy: 0.18942 | train_logloss: 1.59012 | train_f1_macro: 0.1421  | valid_balanced_accuracy: 0.18631 | valid_logloss: 1.59167 | valid_f1_macro: 0.13925 |  0:16:17s
epoch 31 | loss: 1.4264  | train_balanced_accuracy: 0.20186 | train_logloss: 1.54855 | train_f1_macro: 0.15251 | valid_balanced_accuracy: 0.2019  | valid_logloss: 1.55287 | valid_f1_macro: 0.1542  |  0:16:50s
epoch 32 | loss: 1.42386 | train_balanced_accuracy: 0.19413 | train_logloss: 1.6916  | train_f1_macro: 0.1562  | valid_balanced_accuracy: 0.18954 | valid_logloss: 1.69501 | valid_f1_macro: 0.15137 |  0:17:21s
epoch 33 | loss: 1.42076 | train_balanced_accuracy: 0.18722 | train_logloss: 1.81181 | train_f1_macro: 0.13083 | valid_balanced_accuracy: 0.1878  | valid_logloss: 1.82057 | valid_f1_macro: 0.13236 |  0:17:52s
epoch 34 | loss: 1.42933 | train_balanced_accuracy: 0.20217 | train_logloss: 2.3156  | train_f1_macro: 0.17167 | valid_balanced_accuracy: 0.20085 | valid_logloss: 2.33623 | valid_f1_macro: 0.16721 |  0:18:24s
epoch 35 | loss: 1.42985 | train_balanced_accuracy: 0.22774 | train_logloss: 1.73448 | train_f1_macro: 0.20815 | valid_balanced_accuracy: 0.22345 | valid_logloss: 1.76271 | valid_f1_macro: 0.20164 |  0:18:55s
epoch 36 | loss: 1.43609 | train_balanced_accuracy: 0.19564 | train_logloss: 1.53758 | train_f1_macro: 0.16747 | valid_balanced_accuracy: 0.19321 | valid_logloss: 1.55566 | valid_f1_macro: 0.16456 |  0:19:26s
epoch 37 | loss: 1.42648 | train_balanced_accuracy: 0.23681 | train_logloss: 1.43358 | train_f1_macro: 0.22275 | valid_balanced_accuracy: 0.2372  | valid_logloss: 1.44879 | valid_f1_macro: 0.22204 |  0:19:57s
epoch 38 | loss: 1.42114 | train_balanced_accuracy: 0.22823 | train_logloss: 1.56554 | train_f1_macro: 0.20036 | valid_balanced_accuracy: 0.23016 | valid_logloss: 1.57776 | valid_f1_macro: 0.20199 |  0:20:28s
epoch 39 | loss: 1.41938 | train_balanced_accuracy: 0.2402  | train_logloss: 1.45734 | train_f1_macro: 0.21835 | valid_balanced_accuracy: 0.2392  | valid_logloss: 1.46863 | valid_f1_macro: 0.21579 |  0:20:59s
epoch 40 | loss: 1.41766 | train_balanced_accuracy: 0.21201 | train_logloss: 1.45089 | train_f1_macro: 0.1888  | valid_balanced_accuracy: 0.20615 | valid_logloss: 1.46037 | valid_f1_macro: 0.18172 |  0:21:30s
epoch 41 | loss: 1.41939 | train_balanced_accuracy: 0.22808 | train_logloss: 1.46228 | train_f1_macro: 0.21642 | valid_balanced_accuracy: 0.22964 | valid_logloss: 1.4643  | valid_f1_macro: 0.22092 |  0:22:01s
epoch 42 | loss: 1.41597 | train_balanced_accuracy: 0.20371 | train_logloss: 1.44712 | train_f1_macro: 0.1695  | valid_balanced_accuracy: 0.2021  | valid_logloss: 1.45948 | valid_f1_macro: 0.16871 |  0:22:33s
epoch 43 | loss: 1.41445 | train_balanced_accuracy: 0.23369 | train_logloss: 1.525   | train_f1_macro: 0.21773 | valid_balanced_accuracy: 0.2309  | valid_logloss: 1.55366 | valid_f1_macro: 0.21449 |  0:23:04s
epoch 44 | loss: 1.43569 | train_balanced_accuracy: 0.18726 | train_logloss: 1.89475 | train_f1_macro: 0.15022 | valid_balanced_accuracy: 0.18824 | valid_logloss: 1.90043 | valid_f1_macro: 0.15084 |  0:23:35s
epoch 45 | loss: 1.45518 | train_balanced_accuracy: 0.23614 | train_logloss: 1.59495 | train_f1_macro: 0.22665 | valid_balanced_accuracy: 0.22936 | valid_logloss: 1.5999  | valid_f1_macro: 0.21847 |  0:24:07s
epoch 46 | loss: 1.44504 | train_balanced_accuracy: 0.22078 | train_logloss: 1.57862 | train_f1_macro: 0.2028  | valid_balanced_accuracy: 0.21992 | valid_logloss: 1.58949 | valid_f1_macro: 0.20112 |  0:24:38s
epoch 47 | loss: 1.42871 | train_balanced_accuracy: 0.20592 | train_logloss: 1.50197 | train_f1_macro: 0.1688  | valid_balanced_accuracy: 0.20555 | valid_logloss: 1.51612 | valid_f1_macro: 0.16812 |  0:25:10s
epoch 48 | loss: 1.4312  | train_balanced_accuracy: 0.19395 | train_logloss: 1.65427 | train_f1_macro: 0.13761 | valid_balanced_accuracy: 0.19477 | valid_logloss: 1.65399 | valid_f1_macro: 0.13948 |  0:25:41s

Early stopping occurred at epoch 48 with best_epoch = 28 and best_valid_f1_macro = 0.2369
/mnt/Dados/Mestrado_Computacao_Aplicada_UFMS/documentos_dissertacao/algoritmos/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/pytorch_tabnet/callbacks.py:172: UserWarning: Best weights from best epoch are automatically used!
  warnings.warn(wrn_msg)
[CV 4/5; 7/7] END classifier__estimator=TabNetClassifierTuner(n_d=8, n_a=8, n_steps=3, gamma=1.3, cat_idxs=[], cat_dims=[], cat_emb_dim=1, n_independent=2, n_shared=2, epsilon=1e-15, momentum=0.02, lambda_sparse=0.001, seed=0, clip_value=1, verbose=1, optimizer_fn=<class 'torch.optim.adam.Adam'>, optimizer_params={'lr': 0.02}, scheduler_fn=None, scheduler_params={}, mask_type='sparsemax', input_dim=None, output_dim=None, device_name='cpu', n_shared_decoder=1, n_indep_decoder=1, use_embeddings=True, threshold_categorical_features=150, use_cat_emb_dim=True, fit_eval_metric=['balanced_accuracy', 'logloss', <class 'pytorch_tabnet_tuner.tab_model_tuner.F1ScoreMacro'>], fit_weights=0, fit_batch_size=1024, fit_virtual_batch_size=128), classifier__estimator__cat_emb_dim=20, classifier__estimator__clip_value=1, classifier__estimator__gamma=2.0, classifier__estimator__lambda_sparse=0.001, classifier__estimator__mask_type=sparsemax, classifier__estimator__momentum=0.4, classifier__estimator__n_a=64, classifier__estimator__n_independent=5, classifier__estimator__n_shared=5, classifier__estimator__n_steps=10, classifier__estimator__optimizer_fn=<class 'torch.optim.adam.Adam'>, classifier__estimator__optimizer_params={'lr': 0.02}, classifier__estimator__scheduler_fn=<class 'torch.optim.lr_scheduler.StepLR'>, classifier__estimator__scheduler_params={'step_size': 10, 'gamma': 0.95}, classifier__estimator__seed=42, classifier__estimator__verbose=1;, score=0.236 total time=25.9min
[CV 5/5; 7/7] START classifier__estimator=TabNetClassifierTuner(n_d=8, n_a=8, n_steps=3, gamma=1.3, cat_idxs=[], cat_dims=[], cat_emb_dim=1, n_independent=2, n_shared=2, epsilon=1e-15, momentum=0.02, lambda_sparse=0.001, seed=0, clip_value=1, verbose=1, optimizer_fn=<class 'torch.optim.adam.Adam'>, optimizer_params={'lr': 0.02}, scheduler_fn=None, scheduler_params={}, mask_type='sparsemax', input_dim=None, output_dim=None, device_name='cpu', n_shared_decoder=1, n_indep_decoder=1, use_embeddings=True, threshold_categorical_features=150, use_cat_emb_dim=True, fit_eval_metric=['balanced_accuracy', 'logloss', <class 'pytorch_tabnet_tuner.tab_model_tuner.F1ScoreMacro'>], fit_weights=0, fit_batch_size=1024, fit_virtual_batch_size=128), classifier__estimator__cat_emb_dim=20, classifier__estimator__clip_value=1, classifier__estimator__gamma=2.0, classifier__estimator__lambda_sparse=0.001, classifier__estimator__mask_type=sparsemax, classifier__estimator__momentum=0.4, classifier__estimator__n_a=64, classifier__estimator__n_independent=5, classifier__estimator__n_shared=5, classifier__estimator__n_steps=10, classifier__estimator__optimizer_fn=<class 'torch.optim.adam.Adam'>, classifier__estimator__optimizer_params={'lr': 0.02}, classifier__estimator__scheduler_fn=<class 'torch.optim.lr_scheduler.StepLR'>, classifier__estimator__scheduler_params={'step_size': 10, 'gamma': 0.95}, classifier__estimator__seed=42, classifier__estimator__verbose=1
/mnt/Dados/Mestrado_Computacao_Aplicada_UFMS/documentos_dissertacao/algoritmos/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/pytorch_tabnet/abstract_model.py:75: UserWarning: Device used : cpu
  warnings.warn(f"Device used : {self.device}")
/mnt/Dados/Mestrado_Computacao_Aplicada_UFMS/documentos_dissertacao/algoritmos/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/pytorch_tabnet/abstract_model.py:105: UserWarning: Pretraining: n_d changed from 8 to 64
  warnings.warn(wrn_msg)
/mnt/Dados/Mestrado_Computacao_Aplicada_UFMS/documentos_dissertacao/algoritmos/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/pytorch_tabnet/abstract_model.py:105: UserWarning: Pretraining: cat_dims changed from [] to [4, 2, 2, 2, 46, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]
  warnings.warn(wrn_msg)
/mnt/Dados/Mestrado_Computacao_Aplicada_UFMS/documentos_dissertacao/algoritmos/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/pytorch_tabnet/abstract_model.py:105: UserWarning: Pretraining: cat_emb_dim changed from 20 to [2, 1, 1, 1, 20, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
  warnings.warn(wrn_msg)
/mnt/Dados/Mestrado_Computacao_Aplicada_UFMS/documentos_dissertacao/algoritmos/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/pytorch_tabnet/abstract_model.py:105: UserWarning: Pretraining: cat_idxs changed from [] to [0, 1, 2, 3, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]
  warnings.warn(wrn_msg)
epoch 0  | loss: 4.49613 | train_balanced_accuracy: 0.16949 | train_logloss: 5.18141 | train_f1_macro: 0.11009 | valid_balanced_accuracy: 0.17128 | valid_logloss: 5.10829 | valid_f1_macro: 0.1112  |  0:00:31s
epoch 1  | loss: 3.09261 | train_balanced_accuracy: 0.16943 | train_logloss: 3.0836  | train_f1_macro: 0.11261 | valid_balanced_accuracy: 0.17522 | valid_logloss: 3.08315 | valid_f1_macro: 0.11567 |  0:01:03s
epoch 2  | loss: 2.47066 | train_balanced_accuracy: 0.1688  | train_logloss: 1.81971 | train_f1_macro: 0.12208 | valid_balanced_accuracy: 0.17168 | valid_logloss: 1.81843 | valid_f1_macro: 0.12164 |  0:01:34s
epoch 3  | loss: 1.7745  | train_balanced_accuracy: 0.18412 | train_logloss: 2.25446 | train_f1_macro: 0.11332 | valid_balanced_accuracy: 0.18448 | valid_logloss: 2.26025 | valid_f1_macro: 0.11416 |  0:02:06s
epoch 4  | loss: 1.73645 | train_balanced_accuracy: 0.17235 | train_logloss: 1.63338 | train_f1_macro: 0.12302 | valid_balanced_accuracy: 0.17069 | valid_logloss: 1.63073 | valid_f1_macro: 0.12171 |  0:02:38s
epoch 5  | loss: 1.58816 | train_balanced_accuracy: 0.17224 | train_logloss: 1.64214 | train_f1_macro: 0.11167 | valid_balanced_accuracy: 0.17408 | valid_logloss: 1.64053 | valid_f1_macro: 0.11559 |  0:03:13s
epoch 6  | loss: 1.56257 | train_balanced_accuracy: 0.17566 | train_logloss: 1.65572 | train_f1_macro: 0.13771 | valid_balanced_accuracy: 0.17344 | valid_logloss: 1.65331 | valid_f1_macro: 0.136   |  0:03:45s
epoch 7  | loss: 1.54031 | train_balanced_accuracy: 0.17457 | train_logloss: 1.58973 | train_f1_macro: 0.11338 | valid_balanced_accuracy: 0.17283 | valid_logloss: 1.58633 | valid_f1_macro: 0.10979 |  0:04:16s
epoch 8  | loss: 1.52185 | train_balanced_accuracy: 0.17668 | train_logloss: 1.56538 | train_f1_macro: 0.12321 | valid_balanced_accuracy: 0.1746  | valid_logloss: 1.56849 | valid_f1_macro: 0.1214  |  0:04:47s
epoch 9  | loss: 1.4968  | train_balanced_accuracy: 0.18772 | train_logloss: 1.58    | train_f1_macro: 0.14668 | valid_balanced_accuracy: 0.19098 | valid_logloss: 1.58346 | valid_f1_macro: 0.14755 |  0:05:19s
epoch 10 | loss: 1.50932 | train_balanced_accuracy: 0.18607 | train_logloss: 1.52712 | train_f1_macro: 0.13833 | valid_balanced_accuracy: 0.18494 | valid_logloss: 1.52541 | valid_f1_macro: 0.13692 |  0:05:49s
epoch 11 | loss: 1.4996  | train_balanced_accuracy: 0.18521 | train_logloss: 1.52968 | train_f1_macro: 0.13911 | valid_balanced_accuracy: 0.18362 | valid_logloss: 1.53565 | valid_f1_macro: 0.13698 |  0:06:20s
epoch 12 | loss: 1.49432 | train_balanced_accuracy: 0.18637 | train_logloss: 1.5505  | train_f1_macro: 0.15489 | valid_balanced_accuracy: 0.18626 | valid_logloss: 1.55765 | valid_f1_macro: 0.15554 |  0:06:51s
epoch 13 | loss: 1.48858 | train_balanced_accuracy: 0.19587 | train_logloss: 1.5694  | train_f1_macro: 0.15241 | valid_balanced_accuracy: 0.19809 | valid_logloss: 1.57106 | valid_f1_macro: 0.15253 |  0:07:22s
epoch 14 | loss: 1.47717 | train_balanced_accuracy: 0.19571 | train_logloss: 1.59122 | train_f1_macro: 0.17281 | valid_balanced_accuracy: 0.1928  | valid_logloss: 1.60074 | valid_f1_macro: 0.16835 |  0:07:53s
epoch 15 | loss: 1.47077 | train_balanced_accuracy: 0.18987 | train_logloss: 1.50001 | train_f1_macro: 0.14647 | valid_balanced_accuracy: 0.19123 | valid_logloss: 1.50371 | valid_f1_macro: 0.14715 |  0:08:24s
epoch 16 | loss: 1.46593 | train_balanced_accuracy: 0.19519 | train_logloss: 1.46843 | train_f1_macro: 0.1541  | valid_balanced_accuracy: 0.19551 | valid_logloss: 1.47129 | valid_f1_macro: 0.15418 |  0:08:54s
epoch 17 | loss: 1.46069 | train_balanced_accuracy: 0.23196 | train_logloss: 1.46099 | train_f1_macro: 0.20578 | valid_balanced_accuracy: 0.23568 | valid_logloss: 1.46721 | valid_f1_macro: 0.20958 |  0:09:25s
epoch 18 | loss: 1.46422 | train_balanced_accuracy: 0.21485 | train_logloss: 1.46865 | train_f1_macro: 0.18377 | valid_balanced_accuracy: 0.21342 | valid_logloss: 1.47685 | valid_f1_macro: 0.18284 |  0:09:56s
epoch 19 | loss: 1.47124 | train_balanced_accuracy: 0.1995  | train_logloss: 1.46741 | train_f1_macro: 0.15935 | valid_balanced_accuracy: 0.20185 | valid_logloss: 1.47162 | valid_f1_macro: 0.16172 |  0:10:27s
epoch 20 | loss: 1.47538 | train_balanced_accuracy: 0.1776  | train_logloss: 1.51708 | train_f1_macro: 0.13201 | valid_balanced_accuracy: 0.17977 | valid_logloss: 1.51392 | valid_f1_macro: 0.13427 |  0:11:00s
epoch 21 | loss: 1.47726 | train_balanced_accuracy: 0.18358 | train_logloss: 1.5261  | train_f1_macro: 0.13613 | valid_balanced_accuracy: 0.18009 | valid_logloss: 1.529   | valid_f1_macro: 0.13232 |  0:11:31s
epoch 22 | loss: 1.45827 | train_balanced_accuracy: 0.20871 | train_logloss: 1.48034 | train_f1_macro: 0.19074 | valid_balanced_accuracy: 0.2042  | valid_logloss: 1.48459 | valid_f1_macro: 0.18292 |  0:12:02s
epoch 23 | loss: 1.45921 | train_balanced_accuracy: 0.2417  | train_logloss: 1.47746 | train_f1_macro: 0.23012 | valid_balanced_accuracy: 0.2374  | valid_logloss: 1.47868 | valid_f1_macro: 0.22445 |  0:12:33s
epoch 24 | loss: 1.46093 | train_balanced_accuracy: 0.24476 | train_logloss: 1.47084 | train_f1_macro: 0.2017  | valid_balanced_accuracy: 0.24326 | valid_logloss: 1.47517 | valid_f1_macro: 0.20137 |  0:13:04s
epoch 25 | loss: 1.45703 | train_balanced_accuracy: 0.23671 | train_logloss: 1.45981 | train_f1_macro: 0.20744 | valid_balanced_accuracy: 0.23549 | valid_logloss: 1.47188 | valid_f1_macro: 0.20575 |  0:13:35s
epoch 26 | loss: 1.45559 | train_balanced_accuracy: 0.18665 | train_logloss: 1.50226 | train_f1_macro: 0.1338  | valid_balanced_accuracy: 0.18356 | valid_logloss: 1.51027 | valid_f1_macro: 0.12988 |  0:14:06s
epoch 27 | loss: 1.4593  | train_balanced_accuracy: 0.22975 | train_logloss: 1.47139 | train_f1_macro: 0.21815 | valid_balanced_accuracy: 0.22749 | valid_logloss: 1.47437 | valid_f1_macro: 0.21437 |  0:14:37s
epoch 28 | loss: 1.44746 | train_balanced_accuracy: 0.21914 | train_logloss: 1.46551 | train_f1_macro: 0.20019 | valid_balanced_accuracy: 0.21817 | valid_logloss: 1.47125 | valid_f1_macro: 0.19786 |  0:15:08s
epoch 29 | loss: 1.45443 | train_balanced_accuracy: 0.23202 | train_logloss: 1.47133 | train_f1_macro: 0.22226 | valid_balanced_accuracy: 0.22904 | valid_logloss: 1.47237 | valid_f1_macro: 0.21738 |  0:15:39s
epoch 30 | loss: 1.45945 | train_balanced_accuracy: 0.23283 | train_logloss: 1.47373 | train_f1_macro: 0.22628 | valid_balanced_accuracy: 0.23386 | valid_logloss: 1.47608 | valid_f1_macro: 0.22968 |  0:16:11s
epoch 31 | loss: 1.45598 | train_balanced_accuracy: 0.23373 | train_logloss: 1.50398 | train_f1_macro: 0.20346 | valid_balanced_accuracy: 0.23882 | valid_logloss: 1.50182 | valid_f1_macro: 0.20686 |  0:16:41s
epoch 32 | loss: 1.46674 | train_balanced_accuracy: 0.21017 | train_logloss: 1.49906 | train_f1_macro: 0.17015 | valid_balanced_accuracy: 0.20337 | valid_logloss: 1.50348 | valid_f1_macro: 0.16419 |  0:17:12s
epoch 33 | loss: 1.47028 | train_balanced_accuracy: 0.22324 | train_logloss: 1.5606  | train_f1_macro: 0.17895 | valid_balanced_accuracy: 0.2199  | valid_logloss: 1.56699 | valid_f1_macro: 0.175   |  0:17:43s
epoch 34 | loss: 1.45484 | train_balanced_accuracy: 0.21051 | train_logloss: 1.7259  | train_f1_macro: 0.1916  | valid_balanced_accuracy: 0.20586 | valid_logloss: 1.72015 | valid_f1_macro: 0.18547 |  0:18:14s
epoch 35 | loss: 1.44865 | train_balanced_accuracy: 0.19573 | train_logloss: 1.61862 | train_f1_macro: 0.15639 | valid_balanced_accuracy: 0.19499 | valid_logloss: 1.63278 | valid_f1_macro: 0.15593 |  0:18:44s
epoch 36 | loss: 1.45017 | train_balanced_accuracy: 0.19075 | train_logloss: 1.66652 | train_f1_macro: 0.15186 | valid_balanced_accuracy: 0.19088 | valid_logloss: 1.66697 | valid_f1_macro: 0.15105 |  0:19:15s
epoch 37 | loss: 1.44323 | train_balanced_accuracy: 0.18879 | train_logloss: 1.57175 | train_f1_macro: 0.14173 | valid_balanced_accuracy: 0.18686 | valid_logloss: 1.57926 | valid_f1_macro: 0.13916 |  0:19:46s
epoch 38 | loss: 1.44818 | train_balanced_accuracy: 0.19649 | train_logloss: 1.6003  | train_f1_macro: 0.16093 | valid_balanced_accuracy: 0.20064 | valid_logloss: 1.59572 | valid_f1_macro: 0.16641 |  0:20:17s
epoch 39 | loss: 1.46886 | train_balanced_accuracy: 0.20587 | train_logloss: 2.68528 | train_f1_macro: 0.10886 | valid_balanced_accuracy: 0.20437 | valid_logloss: 2.71382 | valid_f1_macro: 0.10876 |  0:20:49s
epoch 40 | loss: 1.45618 | train_balanced_accuracy: 0.22277 | train_logloss: 8.21457 | train_f1_macro: 0.11144 | valid_balanced_accuracy: 0.22844 | valid_logloss: 8.22915 | valid_f1_macro: 0.11649 |  0:21:21s
epoch 41 | loss: 1.4416  | train_balanced_accuracy: 0.19524 | train_logloss: 2.30597 | train_f1_macro: 0.17755 | valid_balanced_accuracy: 0.19539 | valid_logloss: 2.31331 | valid_f1_macro: 0.17714 |  0:21:51s
epoch 42 | loss: 1.443   | train_balanced_accuracy: 0.20912 | train_logloss: 2.29954 | train_f1_macro: 0.17712 | valid_balanced_accuracy: 0.20461 | valid_logloss: 2.34268 | valid_f1_macro: 0.17125 |  0:22:22s
epoch 43 | loss: 1.43932 | train_balanced_accuracy: 0.17762 | train_logloss: 8.36239 | train_f1_macro: 0.15254 | valid_balanced_accuracy: 0.17404 | valid_logloss: 8.54787 | valid_f1_macro: 0.1504  |  0:22:53s
epoch 44 | loss: 1.43842 | train_balanced_accuracy: 0.17878 | train_logloss: 8.60937 | train_f1_macro: 0.12059 | valid_balanced_accuracy: 0.17882 | valid_logloss: 8.79901 | valid_f1_macro: 0.12497 |  0:23:24s
epoch 45 | loss: 1.44105 | train_balanced_accuracy: 0.22361 | train_logloss: 2.34759 | train_f1_macro: 0.15776 | valid_balanced_accuracy: 0.22679 | valid_logloss: 2.3771  | valid_f1_macro: 0.16006 |  0:23:55s
epoch 46 | loss: 1.43673 | train_balanced_accuracy: 0.19775 | train_logloss: 2.23642 | train_f1_macro: 0.15665 | valid_balanced_accuracy: 0.20045 | valid_logloss: 2.27852 | valid_f1_macro: 0.15872 |  0:24:25s
epoch 47 | loss: 1.43416 | train_balanced_accuracy: 0.21403 | train_logloss: 1.70063 | train_f1_macro: 0.16839 | valid_balanced_accuracy: 0.21879 | valid_logloss: 1.70861 | valid_f1_macro: 0.17322 |  0:24:57s
epoch 48 | loss: 1.43824 | train_balanced_accuracy: 0.2098  | train_logloss: 1.62527 | train_f1_macro: 0.20632 | valid_balanced_accuracy: 0.21619 | valid_logloss: 1.61999 | valid_f1_macro: 0.2132  |  0:25:28s
epoch 49 | loss: 1.44408 | train_balanced_accuracy: 0.19745 | train_logloss: 1.45631 | train_f1_macro: 0.15118 | valid_balanced_accuracy: 0.19728 | valid_logloss: 1.4608  | valid_f1_macro: 0.15221 |  0:25:59s
epoch 50 | loss: 1.44074 | train_balanced_accuracy: 0.21989 | train_logloss: 1.55302 | train_f1_macro: 0.20472 | valid_balanced_accuracy: 0.21886 | valid_logloss: 1.54498 | valid_f1_macro: 0.20131 |  0:26:30s

Early stopping occurred at epoch 50 with best_epoch = 30 and best_valid_f1_macro = 0.22968
/mnt/Dados/Mestrado_Computacao_Aplicada_UFMS/documentos_dissertacao/algoritmos/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/pytorch_tabnet/callbacks.py:172: UserWarning: Best weights from best epoch are automatically used!
  warnings.warn(wrn_msg)
[CV 5/5; 7/7] END classifier__estimator=TabNetClassifierTuner(n_d=8, n_a=8, n_steps=3, gamma=1.3, cat_idxs=[], cat_dims=[], cat_emb_dim=1, n_independent=2, n_shared=2, epsilon=1e-15, momentum=0.02, lambda_sparse=0.001, seed=0, clip_value=1, verbose=1, optimizer_fn=<class 'torch.optim.adam.Adam'>, optimizer_params={'lr': 0.02}, scheduler_fn=None, scheduler_params={}, mask_type='sparsemax', input_dim=None, output_dim=None, device_name='cpu', n_shared_decoder=1, n_indep_decoder=1, use_embeddings=True, threshold_categorical_features=150, use_cat_emb_dim=True, fit_eval_metric=['balanced_accuracy', 'logloss', <class 'pytorch_tabnet_tuner.tab_model_tuner.F1ScoreMacro'>], fit_weights=0, fit_batch_size=1024, fit_virtual_batch_size=128), classifier__estimator__cat_emb_dim=20, classifier__estimator__clip_value=1, classifier__estimator__gamma=2.0, classifier__estimator__lambda_sparse=0.001, classifier__estimator__mask_type=sparsemax, classifier__estimator__momentum=0.4, classifier__estimator__n_a=64, classifier__estimator__n_independent=5, classifier__estimator__n_shared=5, classifier__estimator__n_steps=10, classifier__estimator__optimizer_fn=<class 'torch.optim.adam.Adam'>, classifier__estimator__optimizer_params={'lr': 0.02}, classifier__estimator__scheduler_fn=<class 'torch.optim.lr_scheduler.StepLR'>, classifier__estimator__scheduler_params={'step_size': 10, 'gamma': 0.95}, classifier__estimator__seed=42, classifier__estimator__verbose=1;, score=0.221 total time=26.7min
--------------------- RESULTS GS1 ---------------------

CSV gerado com sucesso em: ./runs/results/GS1-cv_results-15-04-2023_12:36:17.csv.
Function generate_new_csv Took 0:00:00.065511

Cross validation results:
   mean_fit_time  std_fit_time  mean_score_time  std_score_time  ... split4_test_score mean_test_score std_test_score rank_test_score
4     128.158956      0.778813         1.563175        0.067823  ...          0.360828        0.355407       0.004332               1
5      27.455217      1.982059         0.637125        0.073140  ...          0.314121        0.324038       0.006337               2
1       0.398416      0.028035         0.024735        0.005263  ...          0.315005        0.319687       0.004647               3
0       0.362639      0.585727         0.039368        0.011434  ...          0.228453        0.229498       0.002563               4
6    1602.632099    203.831124         3.952644        0.038295  ...          0.221261        0.225667       0.016769               5
3      15.504145      2.955224         0.060504        0.004692  ...          0.222138        0.223329       0.004659               6
2       1.323451      0.025429         0.025138        0.001520  ...          0.143884        0.143579       0.002214               7

[7 rows x 59 columns]
Object saved in file: ./runs/best_estimators/GS1-best_pipe-15-04-2023_12:36:17.joblib
Object saved in file: ./runs/best_estimators/best_estimator-RandomForestClassifier-15-04-2023_12:36:51.joblib
Best estimator: RandomForestClassifier(criterion='entropy', max_features=0.75,
                       n_estimators=1000, n_jobs=-1, random_state=42)
Object saved in file: ./runs/encoders_scalers/GS1-column_transformer-15-04-2023_12:37:40.joblib
Internal CV score obtained by the best set of parameters: 0.35540742929669483
Best params: {'classifier__estimator': RandomForestClassifier(criterion='entropy', max_features=0.75,
                       n_estimators=1000, n_jobs=-1, random_state=42), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': None, 'classifier__estimator__max_features': 0.75, 'classifier__estimator__n_estimators': 1000, 'classifier__estimator__n_jobs': -1, 'classifier__estimator__random_state': 42}
Scorer function: make_scorer(f1_score, pos_label=None, average=macro)
The number of CV splits: 5
Seconds used for refitting the best model on the whole dataset: 155.46339678764343
Whether the scorers compute several metrics: False
The number of features when fit is performed: 21
Names of features seen during fit: ['Tipificacao' 'Peso' 'QuestionarioClassificacaoEstabel' 'ILP' 'IFP'
 'ILPF' 'QuestionarioPossuiOutrosIncentiv' 'QuestionarioFabricaRacao'
 'regua de manejo' 'identificacao individual' 'rastreamento SISBOV'
 'participa de aliancas mercadolog' 'QuestionarioPraticaRecuperacaoPa'
 'Confinamento' 'Suplementacao_a_campo' 'SemiConfinamento' 'tot3m_Chuva'
 'med3m_formITUinst' 'med3m_NDVI' 'med3m_preR_milho' 'med3m_preR_boi']

!!!>> When you observe high training accuracy, but low test accuracy, it is likely that you encountered overfitting problem.
Training set score: 0.9956302572629602
Test set score: 0.3653480434106484

CSV gerado com sucesso em: ./runs/results/GS1-grid_search_results-15-04-2023_12:37:52.csv.
Function generate_new_csv Took 0:00:00.001883

*****INICIO CONFUSION MATRIX DISPLAY******
Figure confusion_matrix_display-15-04-2023_12:37:58.png saved in ./plots/ directory.
*****FIM CONFUSION MATRIX DISPLAY******

Function confusion_matrix_display Took 0:00:01.596797


--- Test data performance ---
Test Acurácia: 0.42178184566294397
Test Acurácia Balanceada: 0.35696482708508054
Test Revocação Ponderada: 0.42178184566294397
Test Micro Revocação: 0.42178184566294397
Test Macro Revocação: 0.35696482708508054
Test Precisão Ponderada: 0.4185400555228262
Test Micro Precisão: 0.42178184566294397
Test Macro Precisão: 0.3780796735366265
Test F1 Ponderado: 0.4173860626879504
Test Micro F1: 0.42178184566294397
Test Macro F1: 0.3653480434106484
Test Coeficiente Kappa: 0.2390306308701925
Test Coeficiente de Correlação de Matthews: 0.24032255471843877
Test Log Loss: 1.456306576976182
Test ROC AUC Score Ponderado: 0.7221483281392126

CSV gerado com sucesso em: ./runs/results/GS1-performance_results-15-04-2023_12:37:58.csv.
Function generate_new_csv Took 0:00:00.001229

              precision    recall  f1-score   support

           0       0.43      0.53      0.48      4142
           1       0.50      0.46      0.48      2452
           2       0.34      0.29      0.31      1886
           3       0.28      0.23      0.25       935
           4       0.24      0.22      0.23       494
           5       0.46      0.40      0.43      2000

    accuracy                           0.42     11909
   macro avg       0.38      0.36      0.37     11909
weighted avg       0.42      0.42      0.42     11909


CSV gerado com sucesso em: ./runs/results/GS1-classification_report-15-04-2023_12:37:58.csv.
Function generate_new_csv Took 0:00:00.001042

Function run_grid_search Took 2:32:52.254416

