
*****INICIO LOAD DATA******

*****INICIO PRINT INFOS******
Número total de linhas do DataFrame: 63072
Número de colunas: 112
Informações do DataFrame:
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 63072 entries, 0 to 63071
Data columns (total 112 columns):
 #    Column                            Dtype         
---   ------                            -----         
 0    ID_ANIMAL                         uint32        
 1    EstabelecimentoMunicipio          category      
 2    DataAbate                         datetime64[ns]
 3    Frigorifico_ID                    uint8         
 4    Frigorifico_CNPJ                  uint64        
 5    Frigorifico_RazaoSocial           category      
 6    Municipio_Frigorifico             category      
 7    Tipificacao                       category      
 8    Maturidade                        category      
 9    Acabamento                        category      
 10   Peso                              float32       
 11   EstabelecimentoIdentificador      uint16        
 12   Data_homol                        datetime64[ns]
 13   Questionario_ID                   uint16        
 14   QuestionarioClassificacaoEstabel  uint8         
 15   FERTIIRRIGACAO                    uint8         
 16   ILP                               uint8         
 17   IFP                               uint8         
 18   ILPF                              uint8         
 19   CONCEN_VOLUM                      UInt8         
 20   CREEPFEEDING                      UInt8         
 21   FORN_ESTRAT_SILAGEM               UInt8         
 22   PROTEICO                          UInt8         
 23   PROTEICO_ENERGETICO               UInt8         
 24   RACAO_BAL_CONS_INFERIOR           UInt8         
 25   SAL_MINERAL                       UInt8         
 26   SALMINERAL_UREIA                  UInt8         
 27   RACAOO_BAL_CONSUMO_IG             UInt8         
 28   GRAO_INTEIRO                      UInt8         
 29   ALTO_CONCENTR_VOLUM               UInt8         
 30   ALTO_CONCENTRADO                  UInt8         
 31   QuestionarioPossuiOutrosIncentiv  uint8         
 32   QuestionarioFabricaRacao          uint8         
 33   area so confinamento              UInt8         
 34   regua de manejo                   UInt8         
 35   boa cobertura vegetal, com baixa  UInt8         
 36   erosaoo laminar ou em sulco igua  UInt8         
 37   identificacao individual          UInt8         
 38   rastreamento SISBOV               UInt8         
 39   Lista Trace                       UInt8         
 40   BPA                               UInt8         
 41   participa de aliancas mercadolog  UInt8         
 42   QuestionarioPraticaRecuperacaoPa  uint8         
 43   Confinamento                      UInt8         
 44   Suplementacao_a_campo             UInt8         
 45   SemiConfinamento                  UInt8         
 46   dif_datas                         uint16        
 47   DataAbate_6m_ANT                  datetime64[ns]
 48   data_homol_select                 datetime64[ns]
 49   data12m                           datetime64[ns]
 50   data6m                            datetime64[ns]
 51   data3m                            datetime64[ns]
 52   data1m                            datetime64[ns]
 53   data7d                            datetime64[ns]
 54   tot7d_Chuva                       float32       
 55   med7d_TempInst                    float32       
 56   med7d_TempMin                     float32       
 57   med7d_UmidInst                    float32       
 58   med7d_formITUinst                 float32       
 59   med7d_formITUmax                  float32       
 60   med7d_NDVI                        float32       
 61   med7d_EVI                         float32       
 62   med7d_preR_soja                   float32       
 63   med7d_preR_milho                  float32       
 64   med7d_preR_boi                    float32       
 65   tot1m_Chuva                       float32       
 66   med1m_TempInst                    float32       
 67   med1m_UmidInst                    float32       
 68   med1m_formITUinst                 float32       
 69   med1m_NDVI                        float32       
 70   med1m_EVI                         float32       
 71   med1m_preR_soja                   float32       
 72   med1m_preR_milho                  float32       
 73   med1m_preR_boi                    float32       
 74   tot3m_Chuva                       float32       
 75   med3m_TempInst                    float32       
 76   med3m_UmidInst                    float32       
 77   med3m_formITUinst                 float32       
 78   med3m_formITUmax                  float32       
 79   med3m_NDVI                        float32       
 80   med3m_EVI                         float32       
 81   med3m_preR_soja                   float32       
 82   med3m_preR_milho                  float32       
 83   med3m_preR_boi                    float32       
 84   tot6m_Chuva                       float32       
 85   med6m_TempInst                    float32       
 86   med6m_UmidInst                    float32       
 87   med6m_formITUinst                 float32       
 88   med6m_NDVI                        float32       
 89   med6m_EVI                         float32       
 90   med6m_preR_soja                   float32       
 91   med6m_preR_milho                  float32       
 92   med6m_preR_boi                    float32       
 93   tot12m_Chuva                      float32       
 94   med12m_TempInst                   float32       
 95   med12m_TempMin                    float32       
 96   med12m_UmidInst                   float32       
 97   med12m_formITUinst                float32       
 98   med12m_NDVI                       float32       
 99   med12m_EVI                        float32       
 100  med12m_preR_soja                  float32       
 101  med12m_preR_milho                 float32       
 102  med12m_preR_boi                   float32       
 103  cnt7d_CL_ITUinst                  float32       
 104  cnt1m_CL_ITUinst                  float32       
 105  cnt3m_CL_ITUinst                  float32       
 106  cnt6m_CL_ITUinst                  float32       
 107  cnt12m_CL_ITUinst                 float32       
 108  ANO                               uint16        
 109  CATEGORIA                         category      
 110  classificacao                     category      
 111  Motivo                            category      
dtypes: UInt8(24), category(9), datetime64[ns](9), float32(55), uint16(4), uint32(1), uint64(1), uint8(9)
memory usage: 22.7 MB
*****FIM PRINT INFOS*********
Function informations Took 0:00:00.017124

*****INICIO DELETE COLUNAS******
Coluna EstabelecimentoMunicipio excluída.
Coluna Frigorifico_ID excluída.
Coluna Frigorifico_CNPJ excluída.
Coluna Frigorifico_RazaoSocial excluída.
Coluna Municipio_Frigorifico excluída.
Coluna Maturidade excluída.
Coluna Acabamento excluída.
Coluna EstabelecimentoIdentificador excluída.
Coluna Questionario_ID excluída.
Coluna FERTIIRRIGACAO excluída.
Coluna CONCEN_VOLUM excluída.
Coluna CREEPFEEDING excluída.
Coluna FORN_ESTRAT_SILAGEM excluída.
Coluna PROTEICO excluída.
Coluna PROTEICO_ENERGETICO excluída.
Coluna RACAO_BAL_CONS_INFERIOR excluída.
Coluna SAL_MINERAL excluída.
Coluna SALMINERAL_UREIA excluída.
Coluna RACAOO_BAL_CONSUMO_IG excluída.
Coluna GRAO_INTEIRO excluída.
Coluna ALTO_CONCENTR_VOLUM excluída.
Coluna ALTO_CONCENTRADO excluída.
Coluna area so confinamento excluída.
Coluna boa cobertura vegetal, com baixa excluída.
Coluna erosaoo laminar ou em sulco igua excluída.
Coluna Lista Trace excluída.
Coluna BPA excluída.
Coluna dif_datas excluída.
Coluna tot7d_Chuva excluída.
Coluna med7d_TempInst excluída.
Coluna med7d_TempMin excluída.
Coluna med7d_UmidInst excluída.
Coluna med7d_formITUinst excluída.
Coluna med7d_formITUmax excluída.
Coluna med7d_NDVI excluída.
Coluna med7d_EVI excluída.
Coluna med7d_preR_soja excluída.
Coluna med7d_preR_milho excluída.
Coluna med7d_preR_boi excluída.
Coluna tot1m_Chuva excluída.
Coluna med1m_TempInst excluída.
Coluna med1m_UmidInst excluída.
Coluna med1m_formITUinst excluída.
Coluna med1m_NDVI excluída.
Coluna med1m_EVI excluída.
Coluna med1m_preR_soja excluída.
Coluna med1m_preR_milho excluída.
Coluna med1m_preR_boi excluída.
Coluna med3m_TempInst excluída.
Coluna med3m_UmidInst excluída.
Coluna med3m_formITUmax excluída.
Coluna med3m_EVI excluída.
Coluna med3m_preR_soja excluída.
Coluna tot6m_Chuva excluída.
Coluna med6m_TempInst excluída.
Coluna med6m_UmidInst excluída.
Coluna med6m_formITUinst excluída.
Coluna med6m_NDVI excluída.
Coluna med6m_EVI excluída.
Coluna med6m_preR_soja excluída.
Coluna med6m_preR_milho excluída.
Coluna med6m_preR_boi excluída.
Coluna tot12m_Chuva excluída.
Coluna med12m_TempInst excluída.
Coluna med12m_TempMin excluída.
Coluna med12m_UmidInst excluída.
Coluna med12m_formITUinst excluída.
Coluna med12m_NDVI excluída.
Coluna med12m_EVI excluída.
Coluna med12m_preR_soja excluída.
Coluna med12m_preR_milho excluída.
Coluna med12m_preR_boi excluída.
Coluna cnt7d_CL_ITUinst excluída.
Coluna cnt1m_CL_ITUinst excluída.
Coluna cnt3m_CL_ITUinst excluída.
Coluna cnt6m_CL_ITUinst excluída.
Coluna cnt12m_CL_ITUinst excluída.
Coluna ANO excluída.
Coluna Motivo excluída.
Coluna DataAbate excluída.
Coluna Data_homol excluída.
Coluna DataAbate_6m_ANT excluída.
Coluna data_homol_select excluída.
Coluna data12m excluída.
Coluna data6m excluída.
Coluna data3m excluída.
Coluna data1m excluída.
Coluna data7d excluída.
Coluna CATEGORIA excluída.
*****FIM DELETE COLUNAS*********

*****INICIO PRINT INFOS******
Número total de linhas do DataFrame: 63072
Número de colunas: 23
Informações do DataFrame:
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 63072 entries, 0 to 63071
Data columns (total 23 columns):
 #   Column                            Non-Null Count  Dtype   
---  ------                            --------------  -----   
 0   ID_ANIMAL                         63072 non-null  uint32  
 1   Tipificacao                       63072 non-null  category
 2   Peso                              63072 non-null  float32 
 3   QuestionarioClassificacaoEstabel  63072 non-null  uint8   
 4   ILP                               63072 non-null  uint8   
 5   IFP                               63072 non-null  uint8   
 6   ILPF                              63072 non-null  uint8   
 7   QuestionarioPossuiOutrosIncentiv  63072 non-null  uint8   
 8   QuestionarioFabricaRacao          63072 non-null  uint8   
 9   regua de manejo                   63062 non-null  UInt8   
 10  identificacao individual          63062 non-null  UInt8   
 11  rastreamento SISBOV               63050 non-null  UInt8   
 12  participa de aliancas mercadolog  63062 non-null  UInt8   
 13  QuestionarioPraticaRecuperacaoPa  63072 non-null  uint8   
 14  Confinamento                      63062 non-null  UInt8   
 15  Suplementacao_a_campo             63062 non-null  UInt8   
 16  SemiConfinamento                  63062 non-null  UInt8   
 17  tot3m_Chuva                       61719 non-null  float32 
 18  med3m_formITUinst                 63063 non-null  float32 
 19  med3m_NDVI                        60906 non-null  float32 
 20  med3m_preR_milho                  63063 non-null  float32 
 21  med3m_preR_boi                    63063 non-null  float32 
 22  classificacao                     63072 non-null  category
dtypes: UInt8(7), category(2), float32(6), uint32(1), uint8(7)
memory usage: 3.1 MB
*****FIM PRINT INFOS*********
Function informations Took 0:00:00.013351

*****FIM LOAD DATA******
Function load_data Took 0:00:42.568841

*****INICIO SHOW SETTINGS******
os = <module 'os' from '/usr/lib/python3.8/os.py'>
pd = <module 'pandas' from '/mnt/Dados/Mestrado_Computacao_Aplicada_UFMS/documentos_dissertacao/algoritmos/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/pandas/__init__.py'>
torch = <module 'torch' from '/mnt/Dados/Mestrado_Computacao_Aplicada_UFMS/documentos_dissertacao/algoritmos/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/torch/__init__.py'>
PANDAS_MAX_ROWS = 5000
random_seed = 42
n_jobs = 1
dataset_folder_path = /mnt/Dados/Mestrado_Computacao_Aplicada_UFMS/documentos_dissertacao/base_dados/
csv_path = /mnt/Dados/Mestrado_Computacao_Aplicada_UFMS/documentos_dissertacao/base_dados/TAB_MODELAGEM_RAFAEL_2020_1-2.0-percentage-sampling.csv
number_csv_lines = None
dtype_dict = {'ID_ANIMAL': 'uint32', 'EstabelecimentoMunicipio': 'category', 'Frigorifico_ID': 'uint8', 'Frigorifico_CNPJ': 'uint64', 'Frigorifico_RazaoSocial': 'category', 'Municipio_Frigorifico': 'category', 'Tipificacao': 'category', 'Maturidade': 'category', 'Acabamento': 'category', 'Peso': 'float32', 'EstabelecimentoIdentificador': 'uint16', 'Questionario_ID': 'uint16', 'QuestionarioClassificacaoEstabel': 'uint8', 'FERTIIRRIGACAO': 'uint8', 'ILP': 'uint8', 'IFP': 'uint8', 'ILPF': 'uint8', 'CONCEN_VOLUM': 'UInt8', 'CREEPFEEDING': 'UInt8', 'FORN_ESTRAT_SILAGEM': 'UInt8', 'PROTEICO': 'UInt8', 'PROTEICO_ENERGETICO': 'UInt8', 'RACAO_BAL_CONS_INFERIOR': 'UInt8', 'SAL_MINERAL': 'UInt8', 'SALMINERAL_UREIA': 'UInt8', 'RACAOO_BAL_CONSUMO_IG': 'UInt8', 'GRAO_INTEIRO': 'UInt8', 'ALTO_CONCENTR_VOLUM': 'UInt8', 'ALTO_CONCENTRADO': 'UInt8', 'QuestionarioPossuiOutrosIncentiv': 'uint8', 'QuestionarioFabricaRacao': 'uint8', 'area so confinamento': 'UInt8', 'regua de manejo': 'UInt8', 'boa cobertura vegetal, com baixa': 'UInt8', 'erosaoo laminar ou em sulco igua': 'UInt8', 'identificacao individual': 'UInt8', 'rastreamento SISBOV': 'UInt8', 'Lista Trace': 'UInt8', 'BPA': 'UInt8', 'participa de aliancas mercadolog': 'UInt8', 'QuestionarioPraticaRecuperacaoPa': 'uint8', 'Confinamento': 'UInt8', 'Suplementacao_a_campo': 'UInt8', 'SemiConfinamento': 'UInt8', 'dif_datas': 'uint16', 'tot7d_Chuva': 'float32', 'med7d_TempInst': 'float32', 'med7d_TempMin': 'float32', 'med7d_UmidInst': 'float32', 'med7d_formITUinst': 'float32', 'med7d_formITUmax': 'float32', 'med7d_NDVI': 'float32', 'med7d_EVI': 'float32', 'med7d_preR_soja': 'float32', 'med7d_preR_milho': 'float32', 'med7d_preR_boi': 'float32', 'tot1m_Chuva': 'float32', 'med1m_TempInst': 'float32', 'med1m_UmidInst': 'float32', 'med1m_formITUinst': 'float32', 'med1m_NDVI': 'float32', 'med1m_EVI': 'float32', 'med1m_preR_soja': 'float32', 'med1m_preR_milho': 'float32', 'med1m_preR_boi': 'float32', 'tot3m_Chuva': 'float32', 'med3m_TempInst': 'float32', 'med3m_UmidInst': 'float32', 'med3m_formITUinst': 'float32', 'med3m_formITUmax': 'float32', 'med3m_NDVI': 'float32', 'med3m_EVI': 'float32', 'med3m_preR_soja': 'float32', 'med3m_preR_milho': 'float32', 'med3m_preR_boi': 'float32', 'tot6m_Chuva': 'float32', 'med6m_TempInst': 'float32', 'med6m_UmidInst': 'float32', 'med6m_formITUinst': 'float32', 'med6m_NDVI': 'float32', 'med6m_EVI': 'float32', 'med6m_preR_soja': 'float32', 'med6m_preR_milho': 'float32', 'med6m_preR_boi': 'float32', 'tot12m_Chuva': 'float32', 'med12m_TempInst': 'float32', 'med12m_TempMin': 'float32', 'med12m_UmidInst': 'float32', 'med12m_formITUinst': 'float32', 'med12m_NDVI': 'float32', 'med12m_EVI': 'float32', 'med12m_preR_soja': 'float32', 'med12m_preR_milho': 'float32', 'med12m_preR_boi': 'float32', 'cnt7d_CL_ITUinst': 'float32', 'cnt1m_CL_ITUinst': 'float32', 'cnt3m_CL_ITUinst': 'float32', 'cnt6m_CL_ITUinst': 'float32', 'cnt12m_CL_ITUinst': 'float32', 'ANO': 'uint16', 'CATEGORIA': 'category', 'classificacao': 'category', 'Motivo': 'category', 'QTD_ANIMAIS_LOTE': 'uint16', 'PESO_MEDIO_LOTE': 'float32', 'CATEGORIA_BINARIA': 'category'}
parse_dates = ['DataAbate', 'Data_homol', 'DataAbate_6m_ANT', 'data_homol_select', 'data12m', 'data6m', 'data3m', 'data1m', 'data7d']
delete_columns_names_on_load_data = ['EstabelecimentoMunicipio', 'Frigorifico_ID', 'Frigorifico_CNPJ', 'Frigorifico_RazaoSocial', 'Municipio_Frigorifico', 'Maturidade', 'Acabamento', 'EstabelecimentoIdentificador', 'Questionario_ID', 'FERTIIRRIGACAO', 'CONCEN_VOLUM', 'CREEPFEEDING', 'FORN_ESTRAT_SILAGEM', 'PROTEICO', 'PROTEICO_ENERGETICO', 'RACAO_BAL_CONS_INFERIOR', 'SAL_MINERAL', 'SALMINERAL_UREIA', 'RACAOO_BAL_CONSUMO_IG', 'GRAO_INTEIRO', 'ALTO_CONCENTR_VOLUM', 'ALTO_CONCENTRADO', 'area so confinamento', 'boa cobertura vegetal, com baixa', 'erosaoo laminar ou em sulco igua', 'Lista Trace', 'BPA', 'dif_datas', 'tot7d_Chuva', 'med7d_TempInst', 'med7d_TempMin', 'med7d_UmidInst', 'med7d_formITUinst', 'med7d_formITUmax', 'med7d_NDVI', 'med7d_EVI', 'med7d_preR_soja', 'med7d_preR_milho', 'med7d_preR_boi', 'tot1m_Chuva', 'med1m_TempInst', 'med1m_UmidInst', 'med1m_formITUinst', 'med1m_NDVI', 'med1m_EVI', 'med1m_preR_soja', 'med1m_preR_milho', 'med1m_preR_boi', 'med3m_TempInst', 'med3m_UmidInst', 'med3m_formITUmax', 'med3m_EVI', 'med3m_preR_soja', 'tot6m_Chuva', 'med6m_TempInst', 'med6m_UmidInst', 'med6m_formITUinst', 'med6m_NDVI', 'med6m_EVI', 'med6m_preR_soja', 'med6m_preR_milho', 'med6m_preR_boi', 'tot12m_Chuva', 'med12m_TempInst', 'med12m_TempMin', 'med12m_UmidInst', 'med12m_formITUinst', 'med12m_NDVI', 'med12m_EVI', 'med12m_preR_soja', 'med12m_preR_milho', 'med12m_preR_boi', 'cnt7d_CL_ITUinst', 'cnt1m_CL_ITUinst', 'cnt3m_CL_ITUinst', 'cnt6m_CL_ITUinst', 'cnt12m_CL_ITUinst', 'ANO', 'Motivo', 'DataAbate', 'Data_homol', 'DataAbate_6m_ANT', 'data_homol_select', 'data12m', 'data6m', 'data3m', 'data1m', 'data7d', 'CATEGORIA']
PATH_SAVE_PLOTS = ./plots
PATH_SAVE_ESTIMATORS_REPR = ./runs/estimators_repr
PATH_SAVE_BEST_ESTIMATORS = ./runs/best_estimators
PATH_SAVE_RESULTS = ./runs/results
PATH_SAVE_LOGS = ./logs
PATH_SAVE_ENCODERS_SCALERS = ./runs/encoders_scalers
ordinal_encoder_columns_names = {'QuestionarioClassificacaoEstabel': ['0', '21', '26', '30']}
columns_ordinal_encoded = {}
label_encoder_columns_names = ['classificacao']
columns_label_encoded = {}
one_hot_encoder_columns_names = ['Tipificacao']
columns_one_hot_encoded = {}
min_max_scaler_columns_names = ['Peso', 'tot3m_Chuva', 'med3m_formITUinst', 'med3m_NDVI', 'med3m_preR_milho', 'med3m_preR_boi']
columns_min_max_scaled = {}
columns_label_binarized = {}
simple_imputer_columns_names = []
columns_names_drop_feature_by_correlation = ['med3m_formITUinst', 'med3m_preR_boi', 'classificacao']
class_column = classificacao
classifiers = {}
models_results = {}
device_name = cpu
use_embeddings = True
use_cat_emb_dim = True
threshold_categorical_features = 150
num_workers = 4
eval_metric = ['balanced_accuracy', 'logloss', <class 'pytorch_tabnet_tuner.tab_model_tuner.F1ScoreMacro'>]
augmentations = None
weights = 0
batch_size = 1024
virtual_batch_size = 128
run_grid_search_cv_tuner = True
save_results_during_run = True
new_run = True
PATH_OBJECTS_PERSISTED_RESULTS_RUNS = ./runs/objects_persisted_results_runs
PARAMETERS_PERSIST_FILENAME = ./runs/objects_persisted_results_runs/parameters_persist
RESULTS_PERSIST_FILENAME = ./runs/objects_persisted_results_runs/results_persist
SPLIT_PERSIST_FILENAME = ./runs/objects_persisted_results_runs/split_persist
tree_method = hist
objective = binary:logistic
*****FIM SHOW SETTINGS******


*****INICIO DELETE DUPLICATE ROWS BY ATTRIBUTE******
Nenhuma linha duplicada encontrada para o atributo ID_ANIMAL.
*****FIM DELETE DUPLICATE ROWS BY ATTRIBUTE*********
Function delete_duplicate_rows_by_attribute Took 0:00:00.012442

*****INICIO DELETE COLUNAS******
Coluna ID_ANIMAL excluída.
*****FIM DELETE COLUNAS*********

*****INICIO DELETE NAN ROWS******
Linhas com valores NaN encontradas.
*****FIM DELETE NAN ROWS*********
Function delete_nan_rows Took 0:00:00.021771


*****INICIO DELETE COLUMNS WITH SINGLE VALUE******
>>> Nenhuma coluna com valor único encontrada.
*****FIM DELETE COLUMNS WITH SINGLE VALUE*********
Function delete_columns_with_single_value Took 0:00:00.015177


*****INICIO LABEL ENCODER******
*****FIM LABEL ENCODER*********
Function label_encoder_columns Took 0:00:00.013739

Object saved in file: ./runs/encoders_scalers/target_encoded-13-04-2023_19:58:05.joblib

*****INICIO RELATÓRIO DISTRIBUIÇÃO DE CLASSES******
Distribuição da classe 1: 83%
Distribuição da classe 0: 17%
Erro majoritário: 17%
*****FIM RELATÓRIO DISTRIBUIÇÃO DE CLASSES******
Function class_distribution Took 0:00:00.003830

/mnt/Dados/Mestrado_Computacao_Aplicada_UFMS/documentos_dissertacao/algoritmos/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/pytorch_tabnet/abstract_model.py:75: UserWarning: Device used : cpu
  warnings.warn(f"Device used : {self.device}")
Number of folds for cross validation: 5
Scoring strategy for grid search: f1_macro
Test Size: 0.2

x_train shape: (47635, 21)
y_train shape: (47635,)
x_test shape: (11909, 21)
y_test shape: (11909,)
Removing all files in directory: ./runs/objects_persisted_results_runs
Do you want to continue? (y/n): 
All files in directory ./runs/objects_persisted_results_runs were removed.
Fitting 5 folds for each of 7 candidates, totalling 35 fits
[CV 1/5; 1/7] START classifier__estimator=GaussianNB()..........................
[CV 1/5; 1/7] END classifier__estimator=GaussianNB();, score=0.459 total time=   1.6s
[CV 2/5; 1/7] START classifier__estimator=GaussianNB()..........................
[CV 2/5; 1/7] END classifier__estimator=GaussianNB();, score=0.462 total time=   0.1s
[CV 3/5; 1/7] START classifier__estimator=GaussianNB()..........................
[CV 3/5; 1/7] END classifier__estimator=GaussianNB();, score=0.462 total time=   0.1s
[CV 4/5; 1/7] START classifier__estimator=GaussianNB()..........................
[CV 4/5; 1/7] END classifier__estimator=GaussianNB();, score=0.456 total time=   0.1s
[CV 5/5; 1/7] START classifier__estimator=GaussianNB()..........................
[CV 5/5; 1/7] END classifier__estimator=GaussianNB();, score=0.450 total time=   0.1s
[CV 1/5; 2/7] START classifier__estimator=DecisionTreeClassifier(), classifier__estimator__class_weight=None, classifier__estimator__criterion=gini, classifier__estimator__max_depth=None, classifier__estimator__min_samples_leaf=10, classifier__estimator__min_samples_split=100, classifier__estimator__random_state=42, classifier__estimator__splitter=best
[CV 1/5; 2/7] END classifier__estimator=DecisionTreeClassifier(), classifier__estimator__class_weight=None, classifier__estimator__criterion=gini, classifier__estimator__max_depth=None, classifier__estimator__min_samples_leaf=10, classifier__estimator__min_samples_split=100, classifier__estimator__random_state=42, classifier__estimator__splitter=best;, score=0.556 total time=   0.2s
[CV 2/5; 2/7] START classifier__estimator=DecisionTreeClassifier(), classifier__estimator__class_weight=None, classifier__estimator__criterion=gini, classifier__estimator__max_depth=None, classifier__estimator__min_samples_leaf=10, classifier__estimator__min_samples_split=100, classifier__estimator__random_state=42, classifier__estimator__splitter=best
[CV 2/5; 2/7] END classifier__estimator=DecisionTreeClassifier(), classifier__estimator__class_weight=None, classifier__estimator__criterion=gini, classifier__estimator__max_depth=None, classifier__estimator__min_samples_leaf=10, classifier__estimator__min_samples_split=100, classifier__estimator__random_state=42, classifier__estimator__splitter=best;, score=0.573 total time=   0.2s
[CV 3/5; 2/7] START classifier__estimator=DecisionTreeClassifier(), classifier__estimator__class_weight=None, classifier__estimator__criterion=gini, classifier__estimator__max_depth=None, classifier__estimator__min_samples_leaf=10, classifier__estimator__min_samples_split=100, classifier__estimator__random_state=42, classifier__estimator__splitter=best
[CV 3/5; 2/7] END classifier__estimator=DecisionTreeClassifier(), classifier__estimator__class_weight=None, classifier__estimator__criterion=gini, classifier__estimator__max_depth=None, classifier__estimator__min_samples_leaf=10, classifier__estimator__min_samples_split=100, classifier__estimator__random_state=42, classifier__estimator__splitter=best;, score=0.555 total time=   0.2s
[CV 4/5; 2/7] START classifier__estimator=DecisionTreeClassifier(), classifier__estimator__class_weight=None, classifier__estimator__criterion=gini, classifier__estimator__max_depth=None, classifier__estimator__min_samples_leaf=10, classifier__estimator__min_samples_split=100, classifier__estimator__random_state=42, classifier__estimator__splitter=best
[CV 4/5; 2/7] END classifier__estimator=DecisionTreeClassifier(), classifier__estimator__class_weight=None, classifier__estimator__criterion=gini, classifier__estimator__max_depth=None, classifier__estimator__min_samples_leaf=10, classifier__estimator__min_samples_split=100, classifier__estimator__random_state=42, classifier__estimator__splitter=best;, score=0.553 total time=   0.2s
[CV 5/5; 2/7] START classifier__estimator=DecisionTreeClassifier(), classifier__estimator__class_weight=None, classifier__estimator__criterion=gini, classifier__estimator__max_depth=None, classifier__estimator__min_samples_leaf=10, classifier__estimator__min_samples_split=100, classifier__estimator__random_state=42, classifier__estimator__splitter=best
[CV 5/5; 2/7] END classifier__estimator=DecisionTreeClassifier(), classifier__estimator__class_weight=None, classifier__estimator__criterion=gini, classifier__estimator__max_depth=None, classifier__estimator__min_samples_leaf=10, classifier__estimator__min_samples_split=100, classifier__estimator__random_state=42, classifier__estimator__splitter=best;, score=0.576 total time=   0.2s
[CV 1/5; 3/7] START classifier__estimator=LinearSVC(), classifier__estimator__C=0.001, classifier__estimator__class_weight=None, classifier__estimator__dual=False, classifier__estimator__max_iter=10000, classifier__estimator__penalty=l2, classifier__estimator__random_state=42
[CV 1/5; 3/7] END classifier__estimator=LinearSVC(), classifier__estimator__C=0.001, classifier__estimator__class_weight=None, classifier__estimator__dual=False, classifier__estimator__max_iter=10000, classifier__estimator__penalty=l2, classifier__estimator__random_state=42;, score=0.507 total time=   0.1s
[CV 2/5; 3/7] START classifier__estimator=LinearSVC(), classifier__estimator__C=0.001, classifier__estimator__class_weight=None, classifier__estimator__dual=False, classifier__estimator__max_iter=10000, classifier__estimator__penalty=l2, classifier__estimator__random_state=42
[CV 2/5; 3/7] END classifier__estimator=LinearSVC(), classifier__estimator__C=0.001, classifier__estimator__class_weight=None, classifier__estimator__dual=False, classifier__estimator__max_iter=10000, classifier__estimator__penalty=l2, classifier__estimator__random_state=42;, score=0.510 total time=   0.1s
[CV 3/5; 3/7] START classifier__estimator=LinearSVC(), classifier__estimator__C=0.001, classifier__estimator__class_weight=None, classifier__estimator__dual=False, classifier__estimator__max_iter=10000, classifier__estimator__penalty=l2, classifier__estimator__random_state=42
[CV 3/5; 3/7] END classifier__estimator=LinearSVC(), classifier__estimator__C=0.001, classifier__estimator__class_weight=None, classifier__estimator__dual=False, classifier__estimator__max_iter=10000, classifier__estimator__penalty=l2, classifier__estimator__random_state=42;, score=0.507 total time=   0.2s
[CV 4/5; 3/7] START classifier__estimator=LinearSVC(), classifier__estimator__C=0.001, classifier__estimator__class_weight=None, classifier__estimator__dual=False, classifier__estimator__max_iter=10000, classifier__estimator__penalty=l2, classifier__estimator__random_state=42
[CV 4/5; 3/7] END classifier__estimator=LinearSVC(), classifier__estimator__C=0.001, classifier__estimator__class_weight=None, classifier__estimator__dual=False, classifier__estimator__max_iter=10000, classifier__estimator__penalty=l2, classifier__estimator__random_state=42;, score=0.506 total time=   0.2s
[CV 5/5; 3/7] START classifier__estimator=LinearSVC(), classifier__estimator__C=0.001, classifier__estimator__class_weight=None, classifier__estimator__dual=False, classifier__estimator__max_iter=10000, classifier__estimator__penalty=l2, classifier__estimator__random_state=42
[CV 5/5; 3/7] END classifier__estimator=LinearSVC(), classifier__estimator__C=0.001, classifier__estimator__class_weight=None, classifier__estimator__dual=False, classifier__estimator__max_iter=10000, classifier__estimator__penalty=l2, classifier__estimator__random_state=42;, score=0.508 total time=   0.2s
[CV 1/5; 4/7] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=relu, classifier__estimator__alpha=0.0001, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__random_state=42, classifier__estimator__solver=adam
[CV 1/5; 4/7] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=relu, classifier__estimator__alpha=0.0001, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__random_state=42, classifier__estimator__solver=adam;, score=0.518 total time=   5.9s
[CV 2/5; 4/7] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=relu, classifier__estimator__alpha=0.0001, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__random_state=42, classifier__estimator__solver=adam
[CV 2/5; 4/7] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=relu, classifier__estimator__alpha=0.0001, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__random_state=42, classifier__estimator__solver=adam;, score=0.513 total time=   7.2s
[CV 3/5; 4/7] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=relu, classifier__estimator__alpha=0.0001, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__random_state=42, classifier__estimator__solver=adam
[CV 3/5; 4/7] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=relu, classifier__estimator__alpha=0.0001, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__random_state=42, classifier__estimator__solver=adam;, score=0.529 total time=   7.6s
[CV 4/5; 4/7] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=relu, classifier__estimator__alpha=0.0001, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__random_state=42, classifier__estimator__solver=adam
[CV 4/5; 4/7] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=relu, classifier__estimator__alpha=0.0001, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__random_state=42, classifier__estimator__solver=adam;, score=0.515 total time=   3.1s
[CV 5/5; 4/7] START classifier__estimator=MLPClassifier(), classifier__estimator__activation=relu, classifier__estimator__alpha=0.0001, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__random_state=42, classifier__estimator__solver=adam
[CV 5/5; 4/7] END classifier__estimator=MLPClassifier(), classifier__estimator__activation=relu, classifier__estimator__alpha=0.0001, classifier__estimator__early_stopping=True, classifier__estimator__hidden_layer_sizes=(50, 100, 50), classifier__estimator__learning_rate=adaptive, classifier__estimator__learning_rate_init=0.0001, classifier__estimator__max_iter=1000, classifier__estimator__momentum=0.0, classifier__estimator__random_state=42, classifier__estimator__solver=adam;, score=0.497 total time=   5.1s
[CV 1/5; 5/7] START classifier__estimator=RandomForestClassifier(), classifier__estimator__class_weight=None, classifier__estimator__criterion=entropy, classifier__estimator__max_depth=None, classifier__estimator__max_features=0.75, classifier__estimator__n_estimators=1000, classifier__estimator__n_jobs=-1, classifier__estimator__random_state=42
[CV 1/5; 5/7] END classifier__estimator=RandomForestClassifier(), classifier__estimator__class_weight=None, classifier__estimator__criterion=entropy, classifier__estimator__max_depth=None, classifier__estimator__max_features=0.75, classifier__estimator__n_estimators=1000, classifier__estimator__n_jobs=-1, classifier__estimator__random_state=42;, score=0.612 total time=  34.6s
[CV 2/5; 5/7] START classifier__estimator=RandomForestClassifier(), classifier__estimator__class_weight=None, classifier__estimator__criterion=entropy, classifier__estimator__max_depth=None, classifier__estimator__max_features=0.75, classifier__estimator__n_estimators=1000, classifier__estimator__n_jobs=-1, classifier__estimator__random_state=42
[CV 2/5; 5/7] END classifier__estimator=RandomForestClassifier(), classifier__estimator__class_weight=None, classifier__estimator__criterion=entropy, classifier__estimator__max_depth=None, classifier__estimator__max_features=0.75, classifier__estimator__n_estimators=1000, classifier__estimator__n_jobs=-1, classifier__estimator__random_state=42;, score=0.616 total time=  34.1s
[CV 3/5; 5/7] START classifier__estimator=RandomForestClassifier(), classifier__estimator__class_weight=None, classifier__estimator__criterion=entropy, classifier__estimator__max_depth=None, classifier__estimator__max_features=0.75, classifier__estimator__n_estimators=1000, classifier__estimator__n_jobs=-1, classifier__estimator__random_state=42
[CV 3/5; 5/7] END classifier__estimator=RandomForestClassifier(), classifier__estimator__class_weight=None, classifier__estimator__criterion=entropy, classifier__estimator__max_depth=None, classifier__estimator__max_features=0.75, classifier__estimator__n_estimators=1000, classifier__estimator__n_jobs=-1, classifier__estimator__random_state=42;, score=0.613 total time=  33.0s
[CV 4/5; 5/7] START classifier__estimator=RandomForestClassifier(), classifier__estimator__class_weight=None, classifier__estimator__criterion=entropy, classifier__estimator__max_depth=None, classifier__estimator__max_features=0.75, classifier__estimator__n_estimators=1000, classifier__estimator__n_jobs=-1, classifier__estimator__random_state=42
[CV 4/5; 5/7] END classifier__estimator=RandomForestClassifier(), classifier__estimator__class_weight=None, classifier__estimator__criterion=entropy, classifier__estimator__max_depth=None, classifier__estimator__max_features=0.75, classifier__estimator__n_estimators=1000, classifier__estimator__n_jobs=-1, classifier__estimator__random_state=42;, score=0.613 total time=  33.0s
[CV 5/5; 5/7] START classifier__estimator=RandomForestClassifier(), classifier__estimator__class_weight=None, classifier__estimator__criterion=entropy, classifier__estimator__max_depth=None, classifier__estimator__max_features=0.75, classifier__estimator__n_estimators=1000, classifier__estimator__n_jobs=-1, classifier__estimator__random_state=42
[CV 5/5; 5/7] END classifier__estimator=RandomForestClassifier(), classifier__estimator__class_weight=None, classifier__estimator__criterion=entropy, classifier__estimator__max_depth=None, classifier__estimator__max_features=0.75, classifier__estimator__n_estimators=1000, classifier__estimator__n_jobs=-1, classifier__estimator__random_state=42;, score=0.612 total time=  34.1s
[CV 1/5; 6/7] START classifier__estimator=XGBClassifier(base_score=None, booster=None, callbacks=None,
              colsample_bylevel=None, colsample_bynode=None,
              colsample_bytree=None, early_stopping_rounds=None,
              enable_categorical=False, eval_metric=None, gamma=None,
              gpu_id=None, grow_policy=None, importance_type=None,
              interaction_constraints=None, learning_rate=None, max_bin=None,
              max_cat_to_onehot=None, max_delta_step=None, max_depth=None,
              max_leaves=None, min_child_weight=None, missing=nan,
              monotone_constraints=None, n_estimators=100, n_jobs=None,
              num_parallel_tree=None, predictor=None, random_state=None,
              reg_alpha=None, reg_lambda=None, ...), classifier__estimator__colsample_bytree=0.75, classifier__estimator__gamma=0.05, classifier__estimator__learning_rate=0.01, classifier__estimator__max_delta_step=1.0, classifier__estimator__max_depth=None, classifier__estimator__n_estimators=1000, classifier__estimator__n_jobs=-1, classifier__estimator__objective=binary:logistic, classifier__estimator__random_state=42, classifier__estimator__reg_alpha=0, classifier__estimator__reg_lambda=0.01, classifier__estimator__subsample=0.75, classifier__estimator__tree_method=hist
[CV 1/5; 6/7] END classifier__estimator=XGBClassifier(base_score=None, booster=None, callbacks=None,
              colsample_bylevel=None, colsample_bynode=None,
              colsample_bytree=None, early_stopping_rounds=None,
              enable_categorical=False, eval_metric=None, gamma=None,
              gpu_id=None, grow_policy=None, importance_type=None,
              interaction_constraints=None, learning_rate=None, max_bin=None,
              max_cat_to_onehot=None, max_delta_step=None, max_depth=None,
              max_leaves=None, min_child_weight=None, missing=nan,
              monotone_constraints=None, n_estimators=100, n_jobs=None,
              num_parallel_tree=None, predictor=None, random_state=None,
              reg_alpha=None, reg_lambda=None, ...), classifier__estimator__colsample_bytree=0.75, classifier__estimator__gamma=0.05, classifier__estimator__learning_rate=0.01, classifier__estimator__max_delta_step=1.0, classifier__estimator__max_depth=None, classifier__estimator__n_estimators=1000, classifier__estimator__n_jobs=-1, classifier__estimator__objective=binary:logistic, classifier__estimator__random_state=42, classifier__estimator__reg_alpha=0, classifier__estimator__reg_lambda=0.01, classifier__estimator__subsample=0.75, classifier__estimator__tree_method=hist;, score=0.609 total time=   2.2s
[CV 2/5; 6/7] START classifier__estimator=XGBClassifier(base_score=None, booster=None, callbacks=None,
              colsample_bylevel=None, colsample_bynode=None,
              colsample_bytree=None, early_stopping_rounds=None,
              enable_categorical=False, eval_metric=None, gamma=None,
              gpu_id=None, grow_policy=None, importance_type=None,
              interaction_constraints=None, learning_rate=None, max_bin=None,
              max_cat_to_onehot=None, max_delta_step=None, max_depth=None,
              max_leaves=None, min_child_weight=None, missing=nan,
              monotone_constraints=None, n_estimators=100, n_jobs=None,
              num_parallel_tree=None, predictor=None, random_state=None,
              reg_alpha=None, reg_lambda=None, ...), classifier__estimator__colsample_bytree=0.75, classifier__estimator__gamma=0.05, classifier__estimator__learning_rate=0.01, classifier__estimator__max_delta_step=1.0, classifier__estimator__max_depth=None, classifier__estimator__n_estimators=1000, classifier__estimator__n_jobs=-1, classifier__estimator__objective=binary:logistic, classifier__estimator__random_state=42, classifier__estimator__reg_alpha=0, classifier__estimator__reg_lambda=0.01, classifier__estimator__subsample=0.75, classifier__estimator__tree_method=hist
[CV 2/5; 6/7] END classifier__estimator=XGBClassifier(base_score=None, booster=None, callbacks=None,
              colsample_bylevel=None, colsample_bynode=None,
              colsample_bytree=None, early_stopping_rounds=None,
              enable_categorical=False, eval_metric=None, gamma=None,
              gpu_id=None, grow_policy=None, importance_type=None,
              interaction_constraints=None, learning_rate=None, max_bin=None,
              max_cat_to_onehot=None, max_delta_step=None, max_depth=None,
              max_leaves=None, min_child_weight=None, missing=nan,
              monotone_constraints=None, n_estimators=100, n_jobs=None,
              num_parallel_tree=None, predictor=None, random_state=None,
              reg_alpha=None, reg_lambda=None, ...), classifier__estimator__colsample_bytree=0.75, classifier__estimator__gamma=0.05, classifier__estimator__learning_rate=0.01, classifier__estimator__max_delta_step=1.0, classifier__estimator__max_depth=None, classifier__estimator__n_estimators=1000, classifier__estimator__n_jobs=-1, classifier__estimator__objective=binary:logistic, classifier__estimator__random_state=42, classifier__estimator__reg_alpha=0, classifier__estimator__reg_lambda=0.01, classifier__estimator__subsample=0.75, classifier__estimator__tree_method=hist;, score=0.607 total time=   2.0s
[CV 3/5; 6/7] START classifier__estimator=XGBClassifier(base_score=None, booster=None, callbacks=None,
              colsample_bylevel=None, colsample_bynode=None,
              colsample_bytree=None, early_stopping_rounds=None,
              enable_categorical=False, eval_metric=None, gamma=None,
              gpu_id=None, grow_policy=None, importance_type=None,
              interaction_constraints=None, learning_rate=None, max_bin=None,
              max_cat_to_onehot=None, max_delta_step=None, max_depth=None,
              max_leaves=None, min_child_weight=None, missing=nan,
              monotone_constraints=None, n_estimators=100, n_jobs=None,
              num_parallel_tree=None, predictor=None, random_state=None,
              reg_alpha=None, reg_lambda=None, ...), classifier__estimator__colsample_bytree=0.75, classifier__estimator__gamma=0.05, classifier__estimator__learning_rate=0.01, classifier__estimator__max_delta_step=1.0, classifier__estimator__max_depth=None, classifier__estimator__n_estimators=1000, classifier__estimator__n_jobs=-1, classifier__estimator__objective=binary:logistic, classifier__estimator__random_state=42, classifier__estimator__reg_alpha=0, classifier__estimator__reg_lambda=0.01, classifier__estimator__subsample=0.75, classifier__estimator__tree_method=hist
[CV 3/5; 6/7] END classifier__estimator=XGBClassifier(base_score=None, booster=None, callbacks=None,
              colsample_bylevel=None, colsample_bynode=None,
              colsample_bytree=None, early_stopping_rounds=None,
              enable_categorical=False, eval_metric=None, gamma=None,
              gpu_id=None, grow_policy=None, importance_type=None,
              interaction_constraints=None, learning_rate=None, max_bin=None,
              max_cat_to_onehot=None, max_delta_step=None, max_depth=None,
              max_leaves=None, min_child_weight=None, missing=nan,
              monotone_constraints=None, n_estimators=100, n_jobs=None,
              num_parallel_tree=None, predictor=None, random_state=None,
              reg_alpha=None, reg_lambda=None, ...), classifier__estimator__colsample_bytree=0.75, classifier__estimator__gamma=0.05, classifier__estimator__learning_rate=0.01, classifier__estimator__max_delta_step=1.0, classifier__estimator__max_depth=None, classifier__estimator__n_estimators=1000, classifier__estimator__n_jobs=-1, classifier__estimator__objective=binary:logistic, classifier__estimator__random_state=42, classifier__estimator__reg_alpha=0, classifier__estimator__reg_lambda=0.01, classifier__estimator__subsample=0.75, classifier__estimator__tree_method=hist;, score=0.601 total time=   2.2s
[CV 4/5; 6/7] START classifier__estimator=XGBClassifier(base_score=None, booster=None, callbacks=None,
              colsample_bylevel=None, colsample_bynode=None,
              colsample_bytree=None, early_stopping_rounds=None,
              enable_categorical=False, eval_metric=None, gamma=None,
              gpu_id=None, grow_policy=None, importance_type=None,
              interaction_constraints=None, learning_rate=None, max_bin=None,
              max_cat_to_onehot=None, max_delta_step=None, max_depth=None,
              max_leaves=None, min_child_weight=None, missing=nan,
              monotone_constraints=None, n_estimators=100, n_jobs=None,
              num_parallel_tree=None, predictor=None, random_state=None,
              reg_alpha=None, reg_lambda=None, ...), classifier__estimator__colsample_bytree=0.75, classifier__estimator__gamma=0.05, classifier__estimator__learning_rate=0.01, classifier__estimator__max_delta_step=1.0, classifier__estimator__max_depth=None, classifier__estimator__n_estimators=1000, classifier__estimator__n_jobs=-1, classifier__estimator__objective=binary:logistic, classifier__estimator__random_state=42, classifier__estimator__reg_alpha=0, classifier__estimator__reg_lambda=0.01, classifier__estimator__subsample=0.75, classifier__estimator__tree_method=hist
[CV 4/5; 6/7] END classifier__estimator=XGBClassifier(base_score=None, booster=None, callbacks=None,
              colsample_bylevel=None, colsample_bynode=None,
              colsample_bytree=None, early_stopping_rounds=None,
              enable_categorical=False, eval_metric=None, gamma=None,
              gpu_id=None, grow_policy=None, importance_type=None,
              interaction_constraints=None, learning_rate=None, max_bin=None,
              max_cat_to_onehot=None, max_delta_step=None, max_depth=None,
              max_leaves=None, min_child_weight=None, missing=nan,
              monotone_constraints=None, n_estimators=100, n_jobs=None,
              num_parallel_tree=None, predictor=None, random_state=None,
              reg_alpha=None, reg_lambda=None, ...), classifier__estimator__colsample_bytree=0.75, classifier__estimator__gamma=0.05, classifier__estimator__learning_rate=0.01, classifier__estimator__max_delta_step=1.0, classifier__estimator__max_depth=None, classifier__estimator__n_estimators=1000, classifier__estimator__n_jobs=-1, classifier__estimator__objective=binary:logistic, classifier__estimator__random_state=42, classifier__estimator__reg_alpha=0, classifier__estimator__reg_lambda=0.01, classifier__estimator__subsample=0.75, classifier__estimator__tree_method=hist;, score=0.604 total time=   2.3s
[CV 5/5; 6/7] START classifier__estimator=XGBClassifier(base_score=None, booster=None, callbacks=None,
              colsample_bylevel=None, colsample_bynode=None,
              colsample_bytree=None, early_stopping_rounds=None,
              enable_categorical=False, eval_metric=None, gamma=None,
              gpu_id=None, grow_policy=None, importance_type=None,
              interaction_constraints=None, learning_rate=None, max_bin=None,
              max_cat_to_onehot=None, max_delta_step=None, max_depth=None,
              max_leaves=None, min_child_weight=None, missing=nan,
              monotone_constraints=None, n_estimators=100, n_jobs=None,
              num_parallel_tree=None, predictor=None, random_state=None,
              reg_alpha=None, reg_lambda=None, ...), classifier__estimator__colsample_bytree=0.75, classifier__estimator__gamma=0.05, classifier__estimator__learning_rate=0.01, classifier__estimator__max_delta_step=1.0, classifier__estimator__max_depth=None, classifier__estimator__n_estimators=1000, classifier__estimator__n_jobs=-1, classifier__estimator__objective=binary:logistic, classifier__estimator__random_state=42, classifier__estimator__reg_alpha=0, classifier__estimator__reg_lambda=0.01, classifier__estimator__subsample=0.75, classifier__estimator__tree_method=hist
[CV 5/5; 6/7] END classifier__estimator=XGBClassifier(base_score=None, booster=None, callbacks=None,
              colsample_bylevel=None, colsample_bynode=None,
              colsample_bytree=None, early_stopping_rounds=None,
              enable_categorical=False, eval_metric=None, gamma=None,
              gpu_id=None, grow_policy=None, importance_type=None,
              interaction_constraints=None, learning_rate=None, max_bin=None,
              max_cat_to_onehot=None, max_delta_step=None, max_depth=None,
              max_leaves=None, min_child_weight=None, missing=nan,
              monotone_constraints=None, n_estimators=100, n_jobs=None,
              num_parallel_tree=None, predictor=None, random_state=None,
              reg_alpha=None, reg_lambda=None, ...), classifier__estimator__colsample_bytree=0.75, classifier__estimator__gamma=0.05, classifier__estimator__learning_rate=0.01, classifier__estimator__max_delta_step=1.0, classifier__estimator__max_depth=None, classifier__estimator__n_estimators=1000, classifier__estimator__n_jobs=-1, classifier__estimator__objective=binary:logistic, classifier__estimator__random_state=42, classifier__estimator__reg_alpha=0, classifier__estimator__reg_lambda=0.01, classifier__estimator__subsample=0.75, classifier__estimator__tree_method=hist;, score=0.605 total time=   2.1s
[CV 1/5; 7/7] START classifier__estimator=TabNetClassifierTuner(n_d=8, n_a=8, n_steps=3, gamma=1.3, cat_idxs=[], cat_dims=[], cat_emb_dim=1, n_independent=2, n_shared=2, epsilon=1e-15, momentum=0.02, lambda_sparse=0.001, seed=0, clip_value=1, verbose=1, optimizer_fn=<class 'torch.optim.adam.Adam'>, optimizer_params={'lr': 0.02}, scheduler_fn=None, scheduler_params={}, mask_type='sparsemax', input_dim=None, output_dim=None, device_name='cpu', n_shared_decoder=1, n_indep_decoder=1, use_embeddings=True, threshold_categorical_features=150, use_cat_emb_dim=True, fit_eval_metric=['balanced_accuracy', 'logloss', <class 'pytorch_tabnet_tuner.tab_model_tuner.F1ScoreMacro'>], fit_weights=0, fit_batch_size=1024, fit_virtual_batch_size=128), classifier__estimator__cat_emb_dim=20, classifier__estimator__clip_value=1, classifier__estimator__gamma=2.0, classifier__estimator__lambda_sparse=0.001, classifier__estimator__mask_type=sparsemax, classifier__estimator__momentum=0.4, classifier__estimator__n_a=64, classifier__estimator__n_independent=5, classifier__estimator__n_shared=5, classifier__estimator__n_steps=10, classifier__estimator__optimizer_fn=<class 'torch.optim.adam.Adam'>, classifier__estimator__optimizer_params={'lr': 0.02}, classifier__estimator__scheduler_fn=<class 'torch.optim.lr_scheduler.StepLR'>, classifier__estimator__scheduler_params={'step_size': 10, 'gamma': 0.95}, classifier__estimator__seed=42, classifier__estimator__verbose=1
/mnt/Dados/Mestrado_Computacao_Aplicada_UFMS/documentos_dissertacao/algoritmos/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/pytorch_tabnet/abstract_model.py:75: UserWarning: Device used : cpu
  warnings.warn(f"Device used : {self.device}")
/mnt/Dados/Mestrado_Computacao_Aplicada_UFMS/documentos_dissertacao/algoritmos/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/pytorch_tabnet/abstract_model.py:105: UserWarning: Pretraining: n_d changed from 8 to 64
  warnings.warn(wrn_msg)
/mnt/Dados/Mestrado_Computacao_Aplicada_UFMS/documentos_dissertacao/algoritmos/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/pytorch_tabnet/abstract_model.py:105: UserWarning: Pretraining: cat_dims changed from [] to [4, 2, 2, 2, 46, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]
  warnings.warn(wrn_msg)
/mnt/Dados/Mestrado_Computacao_Aplicada_UFMS/documentos_dissertacao/algoritmos/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/pytorch_tabnet/abstract_model.py:105: UserWarning: Pretraining: cat_emb_dim changed from 20 to [2, 1, 1, 1, 20, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
  warnings.warn(wrn_msg)
/mnt/Dados/Mestrado_Computacao_Aplicada_UFMS/documentos_dissertacao/algoritmos/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/pytorch_tabnet/abstract_model.py:105: UserWarning: Pretraining: cat_idxs changed from [] to [0, 1, 2, 3, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]
  warnings.warn(wrn_msg)
epoch 0  | loss: 4.0997  | train_balanced_accuracy: 0.52754 | train_logloss: 2.37703 | train_f1_macro: 0.5178  | valid_balanced_accuracy: 0.53369 | valid_logloss: 2.46377 | valid_f1_macro: 0.52384 |  0:00:11s
epoch 1  | loss: 1.83868 | train_balanced_accuracy: 0.50106 | train_logloss: 2.25714 | train_f1_macro: 0.33954 | valid_balanced_accuracy: 0.50077 | valid_logloss: 2.22279 | valid_f1_macro: 0.33649 |  0:00:23s
epoch 2  | loss: 1.81932 | train_balanced_accuracy: 0.51478 | train_logloss: 0.97355 | train_f1_macro: 0.49379 | valid_balanced_accuracy: 0.51647 | valid_logloss: 0.99163 | valid_f1_macro: 0.49653 |  0:00:35s
epoch 3  | loss: 4.59528 | train_balanced_accuracy: 0.51076 | train_logloss: 1.44143 | train_f1_macro: 0.50266 | valid_balanced_accuracy: 0.51403 | valid_logloss: 1.39248 | valid_f1_macro: 0.50651 |  0:00:47s
epoch 4  | loss: 1.82802 | train_balanced_accuracy: 0.50347 | train_logloss: 1.46128 | train_f1_macro: 0.35546 | valid_balanced_accuracy: 0.50579 | valid_logloss: 1.48603 | valid_f1_macro: 0.35704 |  0:00:59s
epoch 5  | loss: 1.40493 | train_balanced_accuracy: 0.4923  | train_logloss: 0.81444 | train_f1_macro: 0.42675 | valid_balanced_accuracy: 0.49107 | valid_logloss: 0.82741 | valid_f1_macro: 0.41925 |  0:01:11s
epoch 6  | loss: 2.1563  | train_balanced_accuracy: 0.5     | train_logloss: 3.97811 | train_f1_macro: 0.33335 | valid_balanced_accuracy: 0.5     | valid_logloss: 3.85826 | valid_f1_macro: 0.33325 |  0:01:23s
epoch 7  | loss: 4.00419 | train_balanced_accuracy: 0.5     | train_logloss: 4.8244  | train_f1_macro: 0.33335 | valid_balanced_accuracy: 0.5     | valid_logloss: 4.87599 | valid_f1_macro: 0.33325 |  0:01:36s
epoch 8  | loss: 1.9881  | train_balanced_accuracy: 0.5     | train_logloss: 0.77474 | train_f1_macro: 0.33335 | valid_balanced_accuracy: 0.5     | valid_logloss: 0.77336 | valid_f1_macro: 0.33325 |  0:01:48s
epoch 9  | loss: 0.73552 | train_balanced_accuracy: 0.50173 | train_logloss: 0.69354 | train_f1_macro: 0.34217 | valid_balanced_accuracy: 0.5     | valid_logloss: 0.69345 | valid_f1_macro: 0.34082 |  0:02:01s
epoch 10 | loss: 0.7001  | train_balanced_accuracy: 0.52072 | train_logloss: 0.69196 | train_f1_macro: 0.4424  | valid_balanced_accuracy: 0.51431 | valid_logloss: 0.6946  | valid_f1_macro: 0.42266 |  0:02:13s
epoch 11 | loss: 0.69104 | train_balanced_accuracy: 0.54548 | train_logloss: 0.69138 | train_f1_macro: 0.52349 | valid_balanced_accuracy: 0.54831 | valid_logloss: 0.69189 | valid_f1_macro: 0.5253  |  0:02:25s
epoch 12 | loss: 0.69214 | train_balanced_accuracy: 0.53479 | train_logloss: 0.69263 | train_f1_macro: 0.50099 | valid_balanced_accuracy: 0.52979 | valid_logloss: 0.69721 | valid_f1_macro: 0.4969  |  0:02:47s
epoch 13 | loss: 0.69019 | train_balanced_accuracy: 0.49903 | train_logloss: 0.69424 | train_f1_macro: 0.37475 | valid_balanced_accuracy: 0.49771 | valid_logloss: 0.69372 | valid_f1_macro: 0.37887 |  0:03:01s
epoch 14 | loss: 0.69367 | train_balanced_accuracy: 0.50251 | train_logloss: 0.71574 | train_f1_macro: 0.34274 | valid_balanced_accuracy: 0.50424 | valid_logloss: 0.71505 | valid_f1_macro: 0.34525 |  0:03:13s
epoch 15 | loss: 0.69232 | train_balanced_accuracy: 0.50452 | train_logloss: 0.69305 | train_f1_macro: 0.39304 | valid_balanced_accuracy: 0.5089  | valid_logloss: 0.69278 | valid_f1_macro: 0.40876 |  0:03:24s
epoch 16 | loss: 0.69734 | train_balanced_accuracy: 0.4999  | train_logloss: 0.69499 | train_f1_macro: 0.33553 | valid_balanced_accuracy: 0.49768 | valid_logloss: 0.69562 | valid_f1_macro: 0.3329  |  0:03:37s
epoch 17 | loss: 0.69416 | train_balanced_accuracy: 0.5212  | train_logloss: 0.69258 | train_f1_macro: 0.46497 | valid_balanced_accuracy: 0.51627 | valid_logloss: 0.69205 | valid_f1_macro: 0.46044 |  0:03:50s
epoch 18 | loss: 0.69099 | train_balanced_accuracy: 0.53527 | train_logloss: 0.69023 | train_f1_macro: 0.49822 | valid_balanced_accuracy: 0.53479 | valid_logloss: 0.6906  | valid_f1_macro: 0.49451 |  0:04:03s
epoch 19 | loss: 0.68828 | train_balanced_accuracy: 0.52684 | train_logloss: 0.6901  | train_f1_macro: 0.5221  | valid_balanced_accuracy: 0.5442  | valid_logloss: 0.69249 | valid_f1_macro: 0.53956 |  0:04:15s
epoch 20 | loss: 0.68812 | train_balanced_accuracy: 0.50261 | train_logloss: 0.71505 | train_f1_macro: 0.36218 | valid_balanced_accuracy: 0.49999 | valid_logloss: 0.71305 | valid_f1_macro: 0.35998 |  0:04:28s
epoch 21 | loss: 0.68607 | train_balanced_accuracy: 0.55384 | train_logloss: 0.82781 | train_f1_macro: 0.55089 | valid_balanced_accuracy: 0.55807 | valid_logloss: 0.784   | valid_f1_macro: 0.55563 |  0:04:40s
epoch 22 | loss: 0.69506 | train_balanced_accuracy: 0.51171 | train_logloss: 0.6907  | train_f1_macro: 0.51119 | valid_balanced_accuracy: 0.48979 | valid_logloss: 0.69216 | valid_f1_macro: 0.48947 |  0:04:51s
epoch 23 | loss: 0.69184 | train_balanced_accuracy: 0.54114 | train_logloss: 0.68981 | train_f1_macro: 0.52239 | valid_balanced_accuracy: 0.54408 | valid_logloss: 0.68698 | valid_f1_macro: 0.52373 |  0:05:05s
epoch 24 | loss: 0.68844 | train_balanced_accuracy: 0.53671 | train_logloss: 0.70193 | train_f1_macro: 0.50612 | valid_balanced_accuracy: 0.53403 | valid_logloss: 0.70009 | valid_f1_macro: 0.4983  |  0:05:19s
epoch 25 | loss: 0.68971 | train_balanced_accuracy: 0.53272 | train_logloss: 0.68965 | train_f1_macro: 0.52438 | valid_balanced_accuracy: 0.53764 | valid_logloss: 0.68867 | valid_f1_macro: 0.53253 |  0:05:37s
epoch 26 | loss: 0.69074 | train_balanced_accuracy: 0.54221 | train_logloss: 0.69061 | train_f1_macro: 0.51561 | valid_balanced_accuracy: 0.55062 | valid_logloss: 0.68997 | valid_f1_macro: 0.52195 |  0:05:52s
epoch 27 | loss: 0.68812 | train_balanced_accuracy: 0.51542 | train_logloss: 0.7033  | train_f1_macro: 0.41993 | valid_balanced_accuracy: 0.51198 | valid_logloss: 0.70733 | valid_f1_macro: 0.40461 |  0:06:06s
epoch 28 | loss: 0.68806 | train_balanced_accuracy: 0.50364 | train_logloss: 0.69734 | train_f1_macro: 0.47024 | valid_balanced_accuracy: 0.50241 | valid_logloss: 0.70739 | valid_f1_macro: 0.46611 |  0:06:19s
epoch 29 | loss: 0.68811 | train_balanced_accuracy: 0.51504 | train_logloss: 0.71461 | train_f1_macro: 0.3987  | valid_balanced_accuracy: 0.50927 | valid_logloss: 0.71908 | valid_f1_macro: 0.3794  |  0:06:30s
epoch 30 | loss: 0.68554 | train_balanced_accuracy: 0.52091 | train_logloss: 0.69698 | train_f1_macro: 0.42516 | valid_balanced_accuracy: 0.51507 | valid_logloss: 0.70131 | valid_f1_macro: 0.41119 |  0:06:44s
epoch 31 | loss: 0.67317 | train_balanced_accuracy: 0.54481 | train_logloss: 0.68974 | train_f1_macro: 0.51704 | valid_balanced_accuracy: 0.55216 | valid_logloss: 0.68455 | valid_f1_macro: 0.52548 |  0:06:57s
epoch 32 | loss: 0.6729  | train_balanced_accuracy: 0.53736 | train_logloss: 0.69557 | train_f1_macro: 0.5372  | valid_balanced_accuracy: 0.55612 | valid_logloss: 0.69009 | valid_f1_macro: 0.55608 |  0:07:10s
epoch 33 | loss: 0.67359 | train_balanced_accuracy: 0.53021 | train_logloss: 0.69143 | train_f1_macro: 0.52066 | valid_balanced_accuracy: 0.55809 | valid_logloss: 0.68689 | valid_f1_macro: 0.5497  |  0:07:23s
epoch 34 | loss: 0.66754 | train_balanced_accuracy: 0.54277 | train_logloss: 0.69791 | train_f1_macro: 0.54236 | valid_balanced_accuracy: 0.5642  | valid_logloss: 0.69506 | valid_f1_macro: 0.56365 |  0:07:36s
epoch 35 | loss: 0.67157 | train_balanced_accuracy: 0.52272 | train_logloss: 0.71007 | train_f1_macro: 0.50887 | valid_balanced_accuracy: 0.54024 | valid_logloss: 0.71599 | valid_f1_macro: 0.52648 |  0:07:50s
epoch 36 | loss: 0.67206 | train_balanced_accuracy: 0.53769 | train_logloss: 0.69153 | train_f1_macro: 0.47761 | valid_balanced_accuracy: 0.53014 | valid_logloss: 0.69242 | valid_f1_macro: 0.46771 |  0:08:03s
epoch 37 | loss: 0.67059 | train_balanced_accuracy: 0.53803 | train_logloss: 0.6893  | train_f1_macro: 0.53358 | valid_balanced_accuracy: 0.56502 | valid_logloss: 0.68406 | valid_f1_macro: 0.561   |  0:08:16s
epoch 38 | loss: 0.6706  | train_balanced_accuracy: 0.53814 | train_logloss: 0.69559 | train_f1_macro: 0.53738 | valid_balanced_accuracy: 0.55995 | valid_logloss: 0.69045 | valid_f1_macro: 0.55872 |  0:08:31s
epoch 39 | loss: 0.67013 | train_balanced_accuracy: 0.55048 | train_logloss: 0.69431 | train_f1_macro: 0.54837 | valid_balanced_accuracy: 0.57498 | valid_logloss: 0.69676 | valid_f1_macro: 0.57269 |  0:08:43s
epoch 40 | loss: 0.67087 | train_balanced_accuracy: 0.55753 | train_logloss: 0.68792 | train_f1_macro: 0.54271 | valid_balanced_accuracy: 0.5653  | valid_logloss: 0.68403 | valid_f1_macro: 0.5506  |  0:08:55s
epoch 41 | loss: 0.68605 | train_balanced_accuracy: 0.54528 | train_logloss: 0.68776 | train_f1_macro: 0.54389 | valid_balanced_accuracy: 0.56843 | valid_logloss: 0.68305 | valid_f1_macro: 0.5668  |  0:09:07s
epoch 42 | loss: 0.68578 | train_balanced_accuracy: 0.54211 | train_logloss: 0.68826 | train_f1_macro: 0.52629 | valid_balanced_accuracy: 0.55064 | valid_logloss: 0.68814 | valid_f1_macro: 0.53422 |  0:09:19s
epoch 43 | loss: 0.68842 | train_balanced_accuracy: 0.54143 | train_logloss: 0.73055 | train_f1_macro: 0.52011 | valid_balanced_accuracy: 0.54484 | valid_logloss: 0.72603 | valid_f1_macro: 0.52191 |  0:09:30s
epoch 44 | loss: 0.68762 | train_balanced_accuracy: 0.55425 | train_logloss: 0.68672 | train_f1_macro: 0.54432 | valid_balanced_accuracy: 0.55489 | valid_logloss: 0.69059 | valid_f1_macro: 0.54337 |  0:09:42s
epoch 45 | loss: 0.68874 | train_balanced_accuracy: 0.53215 | train_logloss: 0.87713 | train_f1_macro: 0.52758 | valid_balanced_accuracy: 0.56579 | valid_logloss: 0.8659  | valid_f1_macro: 0.5628  |  0:09:57s
epoch 46 | loss: 0.68734 | train_balanced_accuracy: 0.55674 | train_logloss: 0.68515 | train_f1_macro: 0.5557  | valid_balanced_accuracy: 0.56306 | valid_logloss: 0.68298 | valid_f1_macro: 0.56284 |  0:10:10s
epoch 47 | loss: 0.68264 | train_balanced_accuracy: 0.50502 | train_logloss: 0.74123 | train_f1_macro: 0.35798 | valid_balanced_accuracy: 0.50462 | valid_logloss: 0.75436 | valid_f1_macro: 0.35751 |  0:10:22s
epoch 48 | loss: 0.68291 | train_balanced_accuracy: 0.54423 | train_logloss: 0.69232 | train_f1_macro: 0.52668 | valid_balanced_accuracy: 0.54948 | valid_logloss: 0.68974 | valid_f1_macro: 0.52921 |  0:10:35s
epoch 49 | loss: 0.69107 | train_balanced_accuracy: 0.50896 | train_logloss: 0.72785 | train_f1_macro: 0.41389 | valid_balanced_accuracy: 0.51161 | valid_logloss: 0.72409 | valid_f1_macro: 0.41966 |  0:10:47s
epoch 50 | loss: 0.68848 | train_balanced_accuracy: 0.55069 | train_logloss: 0.69235 | train_f1_macro: 0.53063 | valid_balanced_accuracy: 0.56181 | valid_logloss: 0.68854 | valid_f1_macro: 0.54054 |  0:11:00s
epoch 51 | loss: 0.68668 | train_balanced_accuracy: 0.51445 | train_logloss: 0.72952 | train_f1_macro: 0.42668 | valid_balanced_accuracy: 0.52318 | valid_logloss: 0.7298  | valid_f1_macro: 0.43546 |  0:11:14s
epoch 52 | loss: 0.68637 | train_balanced_accuracy: 0.53479 | train_logloss: 0.69353 | train_f1_macro: 0.48298 | valid_balanced_accuracy: 0.53208 | valid_logloss: 0.69269 | valid_f1_macro: 0.47558 |  0:11:32s
epoch 53 | loss: 0.68462 | train_balanced_accuracy: 0.54886 | train_logloss: 0.69247 | train_f1_macro: 0.5121  | valid_balanced_accuracy: 0.54559 | valid_logloss: 0.69883 | valid_f1_macro: 0.50624 |  0:11:45s
epoch 54 | loss: 0.68569 | train_balanced_accuracy: 0.52312 | train_logloss: 0.69995 | train_f1_macro: 0.47875 | valid_balanced_accuracy: 0.51743 | valid_logloss: 0.69768 | valid_f1_macro: 0.46928 |  0:11:59s
epoch 55 | loss: 0.68537 | train_balanced_accuracy: 0.55213 | train_logloss: 0.68782 | train_f1_macro: 0.54541 | valid_balanced_accuracy: 0.55298 | valid_logloss: 0.68934 | valid_f1_macro: 0.54611 |  0:12:12s
epoch 56 | loss: 0.68525 | train_balanced_accuracy: 0.53151 | train_logloss: 0.69401 | train_f1_macro: 0.4715  | valid_balanced_accuracy: 0.52821 | valid_logloss: 0.69767 | valid_f1_macro: 0.46568 |  0:12:26s
epoch 57 | loss: 0.68421 | train_balanced_accuracy: 0.52968 | train_logloss: 0.69405 | train_f1_macro: 0.48114 | valid_balanced_accuracy: 0.53671 | valid_logloss: 0.6993  | valid_f1_macro: 0.48592 |  0:12:41s
epoch 58 | loss: 0.68142 | train_balanced_accuracy: 0.56871 | train_logloss: 0.6913  | train_f1_macro: 0.56638 | valid_balanced_accuracy: 0.57304 | valid_logloss: 0.69692 | valid_f1_macro: 0.56881 |  0:12:54s
epoch 59 | loss: 0.68202 | train_balanced_accuracy: 0.57159 | train_logloss: 0.6969  | train_f1_macro: 0.57092 | valid_balanced_accuracy: 0.58543 | valid_logloss: 0.70382 | valid_f1_macro: 0.58527 |  0:13:09s
epoch 60 | loss: 0.68549 | train_balanced_accuracy: 0.55454 | train_logloss: 0.70469 | train_f1_macro: 0.54996 | valid_balanced_accuracy: 0.55221 | valid_logloss: 0.70854 | valid_f1_macro: 0.54643 |  0:13:23s
epoch 61 | loss: 0.68495 | train_balanced_accuracy: 0.54472 | train_logloss: 0.69409 | train_f1_macro: 0.51648 | valid_balanced_accuracy: 0.54599 | valid_logloss: 0.69941 | valid_f1_macro: 0.51684 |  0:13:36s
epoch 62 | loss: 0.6811  | train_balanced_accuracy: 0.53681 | train_logloss: 0.70683 | train_f1_macro: 0.50145 | valid_balanced_accuracy: 0.53557 | valid_logloss: 0.71384 | valid_f1_macro: 0.49861 |  0:13:49s
epoch 63 | loss: 0.68074 | train_balanced_accuracy: 0.54663 | train_logloss: 0.69018 | train_f1_macro: 0.53716 | valid_balanced_accuracy: 0.54256 | valid_logloss: 0.69344 | valid_f1_macro: 0.53186 |  0:14:02s
epoch 64 | loss: 0.68029 | train_balanced_accuracy: 0.55049 | train_logloss: 0.70389 | train_f1_macro: 0.54393 | valid_balanced_accuracy: 0.54873 | valid_logloss: 0.71206 | valid_f1_macro: 0.54065 |  0:14:17s
epoch 65 | loss: 0.68069 | train_balanced_accuracy: 0.54625 | train_logloss: 0.69942 | train_f1_macro: 0.53411 | valid_balanced_accuracy: 0.54524 | valid_logloss: 0.71107 | valid_f1_macro: 0.53    |  0:14:31s
epoch 66 | loss: 0.68122 | train_balanced_accuracy: 0.5293  | train_logloss: 0.71789 | train_f1_macro: 0.45506 | valid_balanced_accuracy: 0.52897 | valid_logloss: 0.73832 | valid_f1_macro: 0.45504 |  0:14:43s
epoch 67 | loss: 0.68088 | train_balanced_accuracy: 0.52867 | train_logloss: 0.70047 | train_f1_macro: 0.51223 | valid_balanced_accuracy: 0.52958 | valid_logloss: 0.72231 | valid_f1_macro: 0.51171 |  0:14:56s
epoch 68 | loss: 0.68029 | train_balanced_accuracy: 0.56069 | train_logloss: 0.68463 | train_f1_macro: 0.55823 | valid_balanced_accuracy: 0.56423 | valid_logloss: 0.68222 | valid_f1_macro: 0.56306 |  0:15:10s
epoch 69 | loss: 0.68043 | train_balanced_accuracy: 0.54759 | train_logloss: 0.68929 | train_f1_macro: 0.54503 | valid_balanced_accuracy: 0.553   | valid_logloss: 0.70084 | valid_f1_macro: 0.55041 |  0:15:23s
epoch 70 | loss: 0.67934 | train_balanced_accuracy: 0.49904 | train_logloss: 0.73039 | train_f1_macro: 0.38059 | valid_balanced_accuracy: 0.49535 | valid_logloss: 0.72842 | valid_f1_macro: 0.36996 |  0:15:38s
epoch 71 | loss: 0.67993 | train_balanced_accuracy: 0.51428 | train_logloss: 0.70132 | train_f1_macro: 0.42001 | valid_balanced_accuracy: 0.51269 | valid_logloss: 0.69767 | valid_f1_macro: 0.42015 |  0:15:50s
epoch 72 | loss: 0.67928 | train_balanced_accuracy: 0.50444 | train_logloss: 0.7101  | train_f1_macro: 0.36013 | valid_balanced_accuracy: 0.50655 | valid_logloss: 0.71131 | valid_f1_macro: 0.36092 |  0:16:05s
epoch 73 | loss: 0.67952 | train_balanced_accuracy: 0.56572 | train_logloss: 0.68049 | train_f1_macro: 0.55985 | valid_balanced_accuracy: 0.56918 | valid_logloss: 0.68296 | valid_f1_macro: 0.56205 |  0:16:17s
epoch 74 | loss: 0.67845 | train_balanced_accuracy: 0.56553 | train_logloss: 0.68462 | train_f1_macro: 0.55935 | valid_balanced_accuracy: 0.57959 | valid_logloss: 0.67792 | valid_f1_macro: 0.57242 |  0:16:29s
epoch 75 | loss: 0.67934 | train_balanced_accuracy: 0.5659  | train_logloss: 0.68363 | train_f1_macro: 0.56584 | valid_balanced_accuracy: 0.56768 | valid_logloss: 0.68991 | valid_f1_macro: 0.56764 |  0:16:41s
epoch 76 | loss: 0.67791 | train_balanced_accuracy: 0.55127 | train_logloss: 0.68712 | train_f1_macro: 0.53158 | valid_balanced_accuracy: 0.55988 | valid_logloss: 0.69835 | valid_f1_macro: 0.5373  |  0:16:55s
epoch 77 | loss: 0.68045 | train_balanced_accuracy: 0.55791 | train_logloss: 0.68973 | train_f1_macro: 0.55734 | valid_balanced_accuracy: 0.56496 | valid_logloss: 0.6945  | valid_f1_macro: 0.56313 |  0:17:07s
epoch 78 | loss: 0.68059 | train_balanced_accuracy: 0.56571 | train_logloss: 0.6905  | train_f1_macro: 0.56495 | valid_balanced_accuracy: 0.57463 | valid_logloss: 0.68154 | valid_f1_macro: 0.5745  |  0:17:21s
epoch 79 | loss: 0.6785  | train_balanced_accuracy: 0.54057 | train_logloss: 0.69917 | train_f1_macro: 0.51358 | valid_balanced_accuracy: 0.53905 | valid_logloss: 0.72951 | valid_f1_macro: 0.50945 |  0:17:34s

Early stopping occurred at epoch 79 with best_epoch = 59 and best_valid_f1_macro = 0.58527
/mnt/Dados/Mestrado_Computacao_Aplicada_UFMS/documentos_dissertacao/algoritmos/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/pytorch_tabnet/callbacks.py:172: UserWarning: Best weights from best epoch are automatically used!
  warnings.warn(wrn_msg)
[CV 1/5; 7/7] END classifier__estimator=TabNetClassifierTuner(n_d=8, n_a=8, n_steps=3, gamma=1.3, cat_idxs=[], cat_dims=[], cat_emb_dim=1, n_independent=2, n_shared=2, epsilon=1e-15, momentum=0.02, lambda_sparse=0.001, seed=0, clip_value=1, verbose=1, optimizer_fn=<class 'torch.optim.adam.Adam'>, optimizer_params={'lr': 0.02}, scheduler_fn=None, scheduler_params={}, mask_type='sparsemax', input_dim=None, output_dim=None, device_name='cpu', n_shared_decoder=1, n_indep_decoder=1, use_embeddings=True, threshold_categorical_features=150, use_cat_emb_dim=True, fit_eval_metric=['balanced_accuracy', 'logloss', <class 'pytorch_tabnet_tuner.tab_model_tuner.F1ScoreMacro'>], fit_weights=0, fit_batch_size=1024, fit_virtual_batch_size=128), classifier__estimator__cat_emb_dim=20, classifier__estimator__clip_value=1, classifier__estimator__gamma=2.0, classifier__estimator__lambda_sparse=0.001, classifier__estimator__mask_type=sparsemax, classifier__estimator__momentum=0.4, classifier__estimator__n_a=64, classifier__estimator__n_independent=5, classifier__estimator__n_shared=5, classifier__estimator__n_steps=10, classifier__estimator__optimizer_fn=<class 'torch.optim.adam.Adam'>, classifier__estimator__optimizer_params={'lr': 0.02}, classifier__estimator__scheduler_fn=<class 'torch.optim.lr_scheduler.StepLR'>, classifier__estimator__scheduler_params={'step_size': 10, 'gamma': 0.95}, classifier__estimator__seed=42, classifier__estimator__verbose=1;, score=0.504 total time=17.7min
[CV 2/5; 7/7] START classifier__estimator=TabNetClassifierTuner(n_d=8, n_a=8, n_steps=3, gamma=1.3, cat_idxs=[], cat_dims=[], cat_emb_dim=1, n_independent=2, n_shared=2, epsilon=1e-15, momentum=0.02, lambda_sparse=0.001, seed=0, clip_value=1, verbose=1, optimizer_fn=<class 'torch.optim.adam.Adam'>, optimizer_params={'lr': 0.02}, scheduler_fn=None, scheduler_params={}, mask_type='sparsemax', input_dim=None, output_dim=None, device_name='cpu', n_shared_decoder=1, n_indep_decoder=1, use_embeddings=True, threshold_categorical_features=150, use_cat_emb_dim=True, fit_eval_metric=['balanced_accuracy', 'logloss', <class 'pytorch_tabnet_tuner.tab_model_tuner.F1ScoreMacro'>], fit_weights=0, fit_batch_size=1024, fit_virtual_batch_size=128), classifier__estimator__cat_emb_dim=20, classifier__estimator__clip_value=1, classifier__estimator__gamma=2.0, classifier__estimator__lambda_sparse=0.001, classifier__estimator__mask_type=sparsemax, classifier__estimator__momentum=0.4, classifier__estimator__n_a=64, classifier__estimator__n_independent=5, classifier__estimator__n_shared=5, classifier__estimator__n_steps=10, classifier__estimator__optimizer_fn=<class 'torch.optim.adam.Adam'>, classifier__estimator__optimizer_params={'lr': 0.02}, classifier__estimator__scheduler_fn=<class 'torch.optim.lr_scheduler.StepLR'>, classifier__estimator__scheduler_params={'step_size': 10, 'gamma': 0.95}, classifier__estimator__seed=42, classifier__estimator__verbose=1
/mnt/Dados/Mestrado_Computacao_Aplicada_UFMS/documentos_dissertacao/algoritmos/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/pytorch_tabnet/abstract_model.py:75: UserWarning: Device used : cpu
  warnings.warn(f"Device used : {self.device}")
/mnt/Dados/Mestrado_Computacao_Aplicada_UFMS/documentos_dissertacao/algoritmos/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/pytorch_tabnet/abstract_model.py:105: UserWarning: Pretraining: n_d changed from 8 to 64
  warnings.warn(wrn_msg)
/mnt/Dados/Mestrado_Computacao_Aplicada_UFMS/documentos_dissertacao/algoritmos/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/pytorch_tabnet/abstract_model.py:105: UserWarning: Pretraining: cat_dims changed from [] to [4, 2, 2, 2, 46, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]
  warnings.warn(wrn_msg)
/mnt/Dados/Mestrado_Computacao_Aplicada_UFMS/documentos_dissertacao/algoritmos/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/pytorch_tabnet/abstract_model.py:105: UserWarning: Pretraining: cat_emb_dim changed from 20 to [2, 1, 1, 1, 20, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
  warnings.warn(wrn_msg)
/mnt/Dados/Mestrado_Computacao_Aplicada_UFMS/documentos_dissertacao/algoritmos/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/pytorch_tabnet/abstract_model.py:105: UserWarning: Pretraining: cat_idxs changed from [] to [0, 1, 2, 3, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]
  warnings.warn(wrn_msg)
epoch 0  | loss: 3.77391 | train_balanced_accuracy: 0.53523 | train_logloss: 2.74602 | train_f1_macro: 0.5282  | valid_balanced_accuracy: 0.52994 | valid_logloss: 2.6383  | valid_f1_macro: 0.52176 |  0:00:12s
epoch 1  | loss: 3.08315 | train_balanced_accuracy: 0.49552 | train_logloss: 1.85386 | train_f1_macro: 0.49384 | valid_balanced_accuracy: 0.49979 | valid_logloss: 1.87179 | valid_f1_macro: 0.49847 |  0:00:26s
epoch 2  | loss: 1.90695 | train_balanced_accuracy: 0.51233 | train_logloss: 0.97234 | train_f1_macro: 0.45422 | valid_balanced_accuracy: 0.50547 | valid_logloss: 0.97213 | valid_f1_macro: 0.44654 |  0:00:38s
epoch 3  | loss: 1.4066  | train_balanced_accuracy: 0.50369 | train_logloss: 1.25331 | train_f1_macro: 0.47299 | valid_balanced_accuracy: 0.5026  | valid_logloss: 1.26092 | valid_f1_macro: 0.47326 |  0:00:51s
epoch 4  | loss: 6.72942 | train_balanced_accuracy: 0.5     | train_logloss: 9.63441 | train_f1_macro: 0.33335 | valid_balanced_accuracy: 0.5     | valid_logloss: 9.65351 | valid_f1_macro: 0.33325 |  0:01:03s
epoch 5  | loss: 4.75808 | train_balanced_accuracy: 0.5     | train_logloss: 4.00636 | train_f1_macro: 0.33331 | valid_balanced_accuracy: 0.5     | valid_logloss: 4.10083 | valid_f1_macro: 0.33342 |  0:01:17s
epoch 6  | loss: 2.61588 | train_balanced_accuracy: 0.49541 | train_logloss: 1.27891 | train_f1_macro: 0.48757 | valid_balanced_accuracy: 0.50565 | valid_logloss: 1.29111 | valid_f1_macro: 0.4948  |  0:01:31s
epoch 7  | loss: 0.87911 | train_balanced_accuracy: 0.48503 | train_logloss: 0.7275  | train_f1_macro: 0.45372 | valid_balanced_accuracy: 0.49663 | valid_logloss: 0.72328 | valid_f1_macro: 0.46905 |  0:01:45s
epoch 8  | loss: 0.80197 | train_balanced_accuracy: 0.50801 | train_logloss: 0.70701 | train_f1_macro: 0.36955 | valid_balanced_accuracy: 0.51541 | valid_logloss: 0.70484 | valid_f1_macro: 0.37741 |  0:01:58s
epoch 9  | loss: 0.69781 | train_balanced_accuracy: 0.52622 | train_logloss: 0.72951 | train_f1_macro: 0.43391 | valid_balanced_accuracy: 0.51623 | valid_logloss: 0.73213 | valid_f1_macro: 0.42089 |  0:02:11s
epoch 10 | loss: 0.67535 | train_balanced_accuracy: 0.51785 | train_logloss: 0.70794 | train_f1_macro: 0.44648 | valid_balanced_accuracy: 0.5173  | valid_logloss: 0.70148 | valid_f1_macro: 0.44917 |  0:02:24s
epoch 11 | loss: 0.67153 | train_balanced_accuracy: 0.51782 | train_logloss: 0.69243 | train_f1_macro: 0.45173 | valid_balanced_accuracy: 0.52165 | valid_logloss: 0.69319 | valid_f1_macro: 0.45445 |  0:02:39s
epoch 12 | loss: 0.67098 | train_balanced_accuracy: 0.5552  | train_logloss: 0.69034 | train_f1_macro: 0.55501 | valid_balanced_accuracy: 0.55842 | valid_logloss: 0.68879 | valid_f1_macro: 0.55805 |  0:02:52s
epoch 13 | loss: 0.66832 | train_balanced_accuracy: 0.525   | train_logloss: 0.69304 | train_f1_macro: 0.50918 | valid_balanced_accuracy: 0.51724 | valid_logloss: 0.69391 | valid_f1_macro: 0.49859 |  0:03:06s
epoch 14 | loss: 0.66905 | train_balanced_accuracy: 0.53861 | train_logloss: 0.69332 | train_f1_macro: 0.53823 | valid_balanced_accuracy: 0.55188 | valid_logloss: 0.69392 | valid_f1_macro: 0.55177 |  0:03:19s
epoch 15 | loss: 0.67645 | train_balanced_accuracy: 0.54373 | train_logloss: 0.68878 | train_f1_macro: 0.5432  | valid_balanced_accuracy: 0.5426  | valid_logloss: 0.69013 | valid_f1_macro: 0.54215 |  0:03:34s
epoch 16 | loss: 0.68228 | train_balanced_accuracy: 0.52909 | train_logloss: 0.69063 | train_f1_macro: 0.50509 | valid_balanced_accuracy: 0.52402 | valid_logloss: 0.69245 | valid_f1_macro: 0.49784 |  0:03:56s
epoch 17 | loss: 0.67128 | train_balanced_accuracy: 0.52166 | train_logloss: 0.6944  | train_f1_macro: 0.50474 | valid_balanced_accuracy: 0.52596 | valid_logloss: 0.69359 | valid_f1_macro: 0.50727 |  0:04:12s
epoch 18 | loss: 0.6612  | train_balanced_accuracy: 0.54615 | train_logloss: 0.68892 | train_f1_macro: 0.5362  | valid_balanced_accuracy: 0.54371 | valid_logloss: 0.68873 | valid_f1_macro: 0.53242 |  0:04:25s
epoch 19 | loss: 0.66995 | train_balanced_accuracy: 0.53228 | train_logloss: 0.7089  | train_f1_macro: 0.49004 | valid_balanced_accuracy: 0.53402 | valid_logloss: 0.70778 | valid_f1_macro: 0.49172 |  0:04:38s
epoch 20 | loss: 0.66392 | train_balanced_accuracy: 0.54009 | train_logloss: 0.69403 | train_f1_macro: 0.51074 | valid_balanced_accuracy: 0.53673 | valid_logloss: 0.69881 | valid_f1_macro: 0.50433 |  0:04:50s
epoch 21 | loss: 0.65986 | train_balanced_accuracy: 0.54527 | train_logloss: 0.6895  | train_f1_macro: 0.54521 | valid_balanced_accuracy: 0.53027 | valid_logloss: 0.69221 | valid_f1_macro: 0.53025 |  0:05:05s
epoch 22 | loss: 0.65895 | train_balanced_accuracy: 0.54979 | train_logloss: 0.69083 | train_f1_macro: 0.53916 | valid_balanced_accuracy: 0.55539 | valid_logloss: 0.68714 | valid_f1_macro: 0.54766 |  0:05:22s
epoch 23 | loss: 0.66326 | train_balanced_accuracy: 0.55229 | train_logloss: 0.69554 | train_f1_macro: 0.53669 | valid_balanced_accuracy: 0.54075 | valid_logloss: 0.69304 | valid_f1_macro: 0.5259  |  0:05:36s
epoch 24 | loss: 0.64779 | train_balanced_accuracy: 0.54816 | train_logloss: 0.70027 | train_f1_macro: 0.54816 | valid_balanced_accuracy: 0.53258 | valid_logloss: 0.7044  | valid_f1_macro: 0.53218 |  0:05:54s
epoch 25 | loss: 0.65947 | train_balanced_accuracy: 0.54777 | train_logloss: 0.68884 | train_f1_macro: 0.54374 | valid_balanced_accuracy: 0.54805 | valid_logloss: 0.688   | valid_f1_macro: 0.54494 |  0:06:10s
epoch 26 | loss: 0.65004 | train_balanced_accuracy: 0.55462 | train_logloss: 0.6858  | train_f1_macro: 0.55459 | valid_balanced_accuracy: 0.55264 | valid_logloss: 0.68491 | valid_f1_macro: 0.55264 |  0:06:36s
epoch 27 | loss: 0.65487 | train_balanced_accuracy: 0.55318 | train_logloss: 0.68675 | train_f1_macro: 0.55117 | valid_balanced_accuracy: 0.56804 | valid_logloss: 0.68302 | valid_f1_macro: 0.5653  |  0:07:08s
epoch 28 | loss: 0.65697 | train_balanced_accuracy: 0.55644 | train_logloss: 0.68655 | train_f1_macro: 0.54316 | valid_balanced_accuracy: 0.55463 | valid_logloss: 0.68822 | valid_f1_macro: 0.54349 |  0:07:25s
epoch 29 | loss: 0.64462 | train_balanced_accuracy: 0.56484 | train_logloss: 0.6815  | train_f1_macro: 0.56351 | valid_balanced_accuracy: 0.57349 | valid_logloss: 0.68284 | valid_f1_macro: 0.5722  |  0:07:47s
epoch 30 | loss: 0.64985 | train_balanced_accuracy: 0.55568 | train_logloss: 0.68658 | train_f1_macro: 0.55547 | valid_balanced_accuracy: 0.55573 | valid_logloss: 0.6866  | valid_f1_macro: 0.55572 |  0:08:07s
epoch 31 | loss: 0.64865 | train_balanced_accuracy: 0.566   | train_logloss: 0.68387 | train_f1_macro: 0.56555 | valid_balanced_accuracy: 0.56884 | valid_logloss: 0.6831  | valid_f1_macro: 0.56876 |  0:08:28s
epoch 32 | loss: 0.64336 | train_balanced_accuracy: 0.56079 | train_logloss: 0.69425 | train_f1_macro: 0.56048 | valid_balanced_accuracy: 0.5538  | valid_logloss: 0.69307 | valid_f1_macro: 0.55375 |  0:08:42s
epoch 33 | loss: 0.64773 | train_balanced_accuracy: 0.56802 | train_logloss: 0.6965  | train_f1_macro: 0.5677  | valid_balanced_accuracy: 0.55959 | valid_logloss: 0.69615 | valid_f1_macro: 0.55931 |  0:08:54s
epoch 34 | loss: 0.64489 | train_balanced_accuracy: 0.56416 | train_logloss: 0.70056 | train_f1_macro: 0.55746 | valid_balanced_accuracy: 0.56657 | valid_logloss: 0.70071 | valid_f1_macro: 0.55952 |  0:09:07s
epoch 35 | loss: 0.64301 | train_balanced_accuracy: 0.57129 | train_logloss: 0.69359 | train_f1_macro: 0.55554 | valid_balanced_accuracy: 0.56236 | valid_logloss: 0.69647 | valid_f1_macro: 0.54524 |  0:09:20s
epoch 36 | loss: 0.63998 | train_balanced_accuracy: 0.56619 | train_logloss: 0.69025 | train_f1_macro: 0.56517 | valid_balanced_accuracy: 0.56462 | valid_logloss: 0.69319 | valid_f1_macro: 0.5634  |  0:09:34s
epoch 37 | loss: 0.64874 | train_balanced_accuracy: 0.56649 | train_logloss: 0.69258 | train_f1_macro: 0.56635 | valid_balanced_accuracy: 0.56729 | valid_logloss: 0.69213 | valid_f1_macro: 0.56702 |  0:09:56s
epoch 38 | loss: 0.64414 | train_balanced_accuracy: 0.56724 | train_logloss: 0.70394 | train_f1_macro: 0.56205 | valid_balanced_accuracy: 0.57196 | valid_logloss: 0.70384 | valid_f1_macro: 0.56734 |  0:10:18s
epoch 39 | loss: 0.64086 | train_balanced_accuracy: 0.57245 | train_logloss: 0.68819 | train_f1_macro: 0.55977 | valid_balanced_accuracy: 0.56929 | valid_logloss: 0.69269 | valid_f1_macro: 0.55807 |  0:10:32s
epoch 40 | loss: 0.63883 | train_balanced_accuracy: 0.57014 | train_logloss: 0.68871 | train_f1_macro: 0.56617 | valid_balanced_accuracy: 0.56926 | valid_logloss: 0.6882  | valid_f1_macro: 0.56649 |  0:11:00s
epoch 41 | loss: 0.64722 | train_balanced_accuracy: 0.55799 | train_logloss: 0.69186 | train_f1_macro: 0.55747 | valid_balanced_accuracy: 0.55342 | valid_logloss: 0.69075 | valid_f1_macro: 0.55324 |  0:11:17s
epoch 42 | loss: 0.65351 | train_balanced_accuracy: 0.55916 | train_logloss: 0.68705 | train_f1_macro: 0.55848 | valid_balanced_accuracy: 0.54645 | valid_logloss: 0.68665 | valid_f1_macro: 0.54493 |  0:11:29s
epoch 43 | loss: 0.65043 | train_balanced_accuracy: 0.56936 | train_logloss: 0.68948 | train_f1_macro: 0.5521  | valid_balanced_accuracy: 0.57624 | valid_logloss: 0.69012 | valid_f1_macro: 0.56047 |  0:11:53s
epoch 44 | loss: 0.64733 | train_balanced_accuracy: 0.57448 | train_logloss: 0.68339 | train_f1_macro: 0.56871 | valid_balanced_accuracy: 0.57273 | valid_logloss: 0.68642 | valid_f1_macro: 0.56846 |  0:12:06s
epoch 45 | loss: 0.64327 | train_balanced_accuracy: 0.56878 | train_logloss: 0.69248 | train_f1_macro: 0.55223 | valid_balanced_accuracy: 0.56968 | valid_logloss: 0.6926  | valid_f1_macro: 0.5548  |  0:12:24s
epoch 46 | loss: 0.64118 | train_balanced_accuracy: 0.57063 | train_logloss: 0.67889 | train_f1_macro: 0.57003 | valid_balanced_accuracy: 0.56615 | valid_logloss: 0.68214 | valid_f1_macro: 0.56595 |  0:12:37s
epoch 47 | loss: 0.63981 | train_balanced_accuracy: 0.58615 | train_logloss: 0.66369 | train_f1_macro: 0.58585 | valid_balanced_accuracy: 0.58967 | valid_logloss: 0.66668 | valid_f1_macro: 0.5896  |  0:12:49s
epoch 48 | loss: 0.64857 | train_balanced_accuracy: 0.57052 | train_logloss: 0.68872 | train_f1_macro: 0.55586 | valid_balanced_accuracy: 0.57893 | valid_logloss: 0.68606 | valid_f1_macro: 0.5669  |  0:13:02s
epoch 49 | loss: 0.64994 | train_balanced_accuracy: 0.55712 | train_logloss: 0.68397 | train_f1_macro: 0.55507 | valid_balanced_accuracy: 0.54533 | valid_logloss: 0.69544 | valid_f1_macro: 0.5442  |  0:13:14s
epoch 50 | loss: 0.64958 | train_balanced_accuracy: 0.59752 | train_logloss: 0.65108 | train_f1_macro: 0.5868  | valid_balanced_accuracy: 0.58587 | valid_logloss: 0.66815 | valid_f1_macro: 0.57513 |  0:13:28s
epoch 51 | loss: 0.65108 | train_balanced_accuracy: 0.53705 | train_logloss: 1.24131 | train_f1_macro: 0.49505 | valid_balanced_accuracy: 0.5485  | valid_logloss: 1.22414 | valid_f1_macro: 0.51312 |  0:13:42s
epoch 52 | loss: 0.65097 | train_balanced_accuracy: 0.57544 | train_logloss: 0.67573 | train_f1_macro: 0.56601 | valid_balanced_accuracy: 0.57314 | valid_logloss: 0.6815  | valid_f1_macro: 0.5645  |  0:13:55s
epoch 53 | loss: 0.65332 | train_balanced_accuracy: 0.60495 | train_logloss: 0.67778 | train_f1_macro: 0.60476 | valid_balanced_accuracy: 0.60625 | valid_logloss: 0.68002 | valid_f1_macro: 0.60621 |  0:14:09s
epoch 54 | loss: 0.64924 | train_balanced_accuracy: 0.53917 | train_logloss: 0.7129  | train_f1_macro: 0.51038 | valid_balanced_accuracy: 0.55543 | valid_logloss: 0.72055 | valid_f1_macro: 0.53054 |  0:14:32s
epoch 55 | loss: 0.65001 | train_balanced_accuracy: 0.52393 | train_logloss: 0.71991 | train_f1_macro: 0.48642 | valid_balanced_accuracy: 0.52883 | valid_logloss: 0.73111 | valid_f1_macro: 0.49271 |  0:14:46s
epoch 56 | loss: 0.6495  | train_balanced_accuracy: 0.61045 | train_logloss: 0.64933 | train_f1_macro: 0.60845 | valid_balanced_accuracy: 0.60203 | valid_logloss: 0.65659 | valid_f1_macro: 0.6005  |  0:15:01s
epoch 57 | loss: 0.64781 | train_balanced_accuracy: 0.57274 | train_logloss: 0.68007 | train_f1_macro: 0.5696  | valid_balanced_accuracy: 0.57812 | valid_logloss: 0.6772  | valid_f1_macro: 0.57607 |  0:15:14s
epoch 58 | loss: 0.65249 | train_balanced_accuracy: 0.59067 | train_logloss: 0.65157 | train_f1_macro: 0.57435 | valid_balanced_accuracy: 0.57586 | valid_logloss: 0.65826 | valid_f1_macro: 0.55692 |  0:15:26s
epoch 59 | loss: 0.64639 | train_balanced_accuracy: 0.57446 | train_logloss: 0.69094 | train_f1_macro: 0.55075 | valid_balanced_accuracy: 0.5616  | valid_logloss: 0.68998 | valid_f1_macro: 0.53842 |  0:15:39s
epoch 60 | loss: 0.64896 | train_balanced_accuracy: 0.60996 | train_logloss: 0.65356 | train_f1_macro: 0.60478 | valid_balanced_accuracy: 0.60012 | valid_logloss: 0.6649  | valid_f1_macro: 0.59543 |  0:15:51s
epoch 61 | loss: 0.64993 | train_balanced_accuracy: 0.60447 | train_logloss: 0.64624 | train_f1_macro: 0.60302 | valid_balanced_accuracy: 0.58814 | valid_logloss: 0.65315 | valid_f1_macro: 0.58676 |  0:16:02s
epoch 62 | loss: 0.64776 | train_balanced_accuracy: 0.59617 | train_logloss: 0.65708 | train_f1_macro: 0.5843  | valid_balanced_accuracy: 0.58625 | valid_logloss: 0.66075 | valid_f1_macro: 0.576   |  0:16:15s
epoch 63 | loss: 0.64611 | train_balanced_accuracy: 0.61488 | train_logloss: 0.65207 | train_f1_macro: 0.61411 | valid_balanced_accuracy: 0.60741 | valid_logloss: 0.67676 | valid_f1_macro: 0.60716 |  0:16:27s
epoch 64 | loss: 0.64269 | train_balanced_accuracy: 0.60186 | train_logloss: 0.64908 | train_f1_macro: 0.60013 | valid_balanced_accuracy: 0.59933 | valid_logloss: 0.66956 | valid_f1_macro: 0.59781 |  0:16:40s
epoch 65 | loss: 0.65274 | train_balanced_accuracy: 0.57738 | train_logloss: 0.67452 | train_f1_macro: 0.57688 | valid_balanced_accuracy: 0.57463 | valid_logloss: 0.68742 | valid_f1_macro: 0.57458 |  0:16:53s
epoch 66 | loss: 0.65    | train_balanced_accuracy: 0.59406 | train_logloss: 0.67788 | train_f1_macro: 0.59405 | valid_balanced_accuracy: 0.59351 | valid_logloss: 0.69251 | valid_f1_macro: 0.59325 |  0:17:05s
epoch 67 | loss: 0.64997 | train_balanced_accuracy: 0.56425 | train_logloss: 0.76822 | train_f1_macro: 0.55101 | valid_balanced_accuracy: 0.56968 | valid_logloss: 0.75302 | valid_f1_macro: 0.55715 |  0:17:18s
epoch 68 | loss: 0.64726 | train_balanced_accuracy: 0.62192 | train_logloss: 0.63986 | train_f1_macro: 0.61838 | valid_balanced_accuracy: 0.614   | valid_logloss: 0.64937 | valid_f1_macro: 0.61022 |  0:17:31s
epoch 69 | loss: 0.64672 | train_balanced_accuracy: 0.61151 | train_logloss: 0.64435 | train_f1_macro: 0.61026 | valid_balanced_accuracy: 0.61167 | valid_logloss: 0.64848 | valid_f1_macro: 0.6107  |  0:17:44s
epoch 70 | loss: 0.64907 | train_balanced_accuracy: 0.58616 | train_logloss: 0.66273 | train_f1_macro: 0.58461 | valid_balanced_accuracy: 0.56804 | valid_logloss: 0.67226 | valid_f1_macro: 0.56551 |  0:17:57s
epoch 71 | loss: 0.6545  | train_balanced_accuracy: 0.58343 | train_logloss: 0.66574 | train_f1_macro: 0.54577 | valid_balanced_accuracy: 0.56857 | valid_logloss: 0.67029 | valid_f1_macro: 0.52696 |  0:18:10s
epoch 72 | loss: 0.64791 | train_balanced_accuracy: 0.55556 | train_logloss: 0.75474 | train_f1_macro: 0.50831 | valid_balanced_accuracy: 0.54967 | valid_logloss: 0.75735 | valid_f1_macro: 0.50487 |  0:18:23s
epoch 73 | loss: 0.64811 | train_balanced_accuracy: 0.60312 | train_logloss: 0.64895 | train_f1_macro: 0.6031  | valid_balanced_accuracy: 0.60662 | valid_logloss: 0.64935 | valid_f1_macro: 0.60632 |  0:18:37s
epoch 74 | loss: 0.64892 | train_balanced_accuracy: 0.59453 | train_logloss: 0.65798 | train_f1_macro: 0.59151 | valid_balanced_accuracy: 0.59471 | valid_logloss: 0.65296 | valid_f1_macro: 0.59205 |  0:18:50s
epoch 75 | loss: 0.64801 | train_balanced_accuracy: 0.60591 | train_logloss: 0.65062 | train_f1_macro: 0.6023  | valid_balanced_accuracy: 0.6055  | valid_logloss: 0.64977 | valid_f1_macro: 0.60339 |  0:19:03s
epoch 76 | loss: 0.64862 | train_balanced_accuracy: 0.60437 | train_logloss: 0.64641 | train_f1_macro: 0.60364 | valid_balanced_accuracy: 0.60395 | valid_logloss: 0.65036 | valid_f1_macro: 0.60348 |  0:19:23s
epoch 77 | loss: 0.64504 | train_balanced_accuracy: 0.61065 | train_logloss: 0.65452 | train_f1_macro: 0.61055 | valid_balanced_accuracy: 0.61819 | valid_logloss: 0.6536  | valid_f1_macro: 0.61773 |  0:19:44s
epoch 78 | loss: 0.64659 | train_balanced_accuracy: 0.58295 | train_logloss: 0.66362 | train_f1_macro: 0.56355 | valid_balanced_accuracy: 0.56584 | valid_logloss: 0.67019 | valid_f1_macro: 0.54506 |  0:20:05s
epoch 79 | loss: 0.64384 | train_balanced_accuracy: 0.58594 | train_logloss: 0.64604 | train_f1_macro: 0.56096 | valid_balanced_accuracy: 0.57009 | valid_logloss: 0.65182 | valid_f1_macro: 0.54173 |  0:20:26s
epoch 80 | loss: 0.64341 | train_balanced_accuracy: 0.58391 | train_logloss: 0.65485 | train_f1_macro: 0.55879 | valid_balanced_accuracy: 0.57664 | valid_logloss: 0.66046 | valid_f1_macro: 0.55079 |  0:20:38s
epoch 81 | loss: 0.64688 | train_balanced_accuracy: 0.58219 | train_logloss: 0.67004 | train_f1_macro: 0.57694 | valid_balanced_accuracy: 0.58006 | valid_logloss: 0.6731  | valid_f1_macro: 0.57542 |  0:20:55s
epoch 82 | loss: 0.64732 | train_balanced_accuracy: 0.60977 | train_logloss: 0.6526  | train_f1_macro: 0.60942 | valid_balanced_accuracy: 0.60355 | valid_logloss: 0.66508 | valid_f1_macro: 0.60343 |  0:21:22s
epoch 83 | loss: 0.6481  | train_balanced_accuracy: 0.60544 | train_logloss: 0.67399 | train_f1_macro: 0.60522 | valid_balanced_accuracy: 0.60895 | valid_logloss: 0.67248 | valid_f1_macro: 0.60886 |  0:21:35s
epoch 84 | loss: 0.64486 | train_balanced_accuracy: 0.57553 | train_logloss: 0.67712 | train_f1_macro: 0.56327 | valid_balanced_accuracy: 0.57931 | valid_logloss: 0.67308 | valid_f1_macro: 0.56931 |  0:21:54s
epoch 85 | loss: 0.64676 | train_balanced_accuracy: 0.56261 | train_logloss: 0.6688  | train_f1_macro: 0.54406 | valid_balanced_accuracy: 0.54501 | valid_logloss: 0.67342 | valid_f1_macro: 0.52578 |  0:22:08s
epoch 86 | loss: 0.64593 | train_balanced_accuracy: 0.57342 | train_logloss: 0.67189 | train_f1_macro: 0.57337 | valid_balanced_accuracy: 0.58001 | valid_logloss: 0.67179 | valid_f1_macro: 0.5797  |  0:22:22s
epoch 87 | loss: 0.64294 | train_balanced_accuracy: 0.56946 | train_logloss: 0.67238 | train_f1_macro: 0.56225 | valid_balanced_accuracy: 0.5685  | valid_logloss: 0.66951 | valid_f1_macro: 0.56203 |  0:22:36s
epoch 88 | loss: 0.64176 | train_balanced_accuracy: 0.56279 | train_logloss: 0.67699 | train_f1_macro: 0.51861 | valid_balanced_accuracy: 0.55507 | valid_logloss: 0.67796 | valid_f1_macro: 0.5113  |  0:22:50s
epoch 89 | loss: 0.64703 | train_balanced_accuracy: 0.59867 | train_logloss: 0.64935 | train_f1_macro: 0.57802 | valid_balanced_accuracy: 0.58589 | valid_logloss: 0.65678 | valid_f1_macro: 0.56577 |  0:23:05s
epoch 90 | loss: 0.6421  | train_balanced_accuracy: 0.60697 | train_logloss: 0.63947 | train_f1_macro: 0.6022  | valid_balanced_accuracy: 0.60397 | valid_logloss: 0.64657 | valid_f1_macro: 0.59972 |  0:23:18s
epoch 91 | loss: 0.6405  | train_balanced_accuracy: 0.58779 | train_logloss: 0.67293 | train_f1_macro: 0.58716 | valid_balanced_accuracy: 0.5997  | valid_logloss: 0.67132 | valid_f1_macro: 0.59963 |  0:23:38s
epoch 92 | loss: 0.64193 | train_balanced_accuracy: 0.61643 | train_logloss: 0.63872 | train_f1_macro: 0.61637 | valid_balanced_accuracy: 0.61859 | valid_logloss: 0.64417 | valid_f1_macro: 0.61858 |  0:23:54s
epoch 93 | loss: 0.64766 | train_balanced_accuracy: 0.5985  | train_logloss: 0.64019 | train_f1_macro: 0.5976  | valid_balanced_accuracy: 0.59658 | valid_logloss: 0.64472 | valid_f1_macro: 0.59516 |  0:24:09s
epoch 94 | loss: 0.64535 | train_balanced_accuracy: 0.61073 | train_logloss: 0.65067 | train_f1_macro: 0.6051  | valid_balanced_accuracy: 0.6086  | valid_logloss: 0.65597 | valid_f1_macro: 0.60465 |  0:24:26s
epoch 95 | loss: 0.64369 | train_balanced_accuracy: 0.61114 | train_logloss: 0.64708 | train_f1_macro: 0.60814 | valid_balanced_accuracy: 0.60158 | valid_logloss: 0.66918 | valid_f1_macro: 0.59812 |  0:24:41s
epoch 96 | loss: 0.64202 | train_balanced_accuracy: 0.60929 | train_logloss: 0.63865 | train_f1_macro: 0.60706 | valid_balanced_accuracy: 0.60781 | valid_logloss: 0.64772 | valid_f1_macro: 0.60625 |  0:24:53s
epoch 97 | loss: 0.64153 | train_balanced_accuracy: 0.6094  | train_logloss: 0.63927 | train_f1_macro: 0.60875 | valid_balanced_accuracy: 0.59967 | valid_logloss: 0.64545 | valid_f1_macro: 0.59814 |  0:25:07s
epoch 98 | loss: 0.64364 | train_balanced_accuracy: 0.61643 | train_logloss: 0.63995 | train_f1_macro: 0.61643 | valid_balanced_accuracy: 0.60354 | valid_logloss: 0.6488  | valid_f1_macro: 0.60338 |  0:25:22s
epoch 99 | loss: 0.64103 | train_balanced_accuracy: 0.61382 | train_logloss: 0.63746 | train_f1_macro: 0.61262 | valid_balanced_accuracy: 0.60588 | valid_logloss: 0.64567 | valid_f1_macro: 0.60526 |  0:25:34s
epoch 100| loss: 0.64341 | train_balanced_accuracy: 0.59628 | train_logloss: 0.66319 | train_f1_macro: 0.59583 | valid_balanced_accuracy: 0.59273 | valid_logloss: 0.67507 | valid_f1_macro: 0.59158 |  0:25:47s
epoch 101| loss: 0.6474  | train_balanced_accuracy: 0.59947 | train_logloss: 0.64653 | train_f1_macro: 0.59709 | valid_balanced_accuracy: 0.60428 | valid_logloss: 0.64689 | valid_f1_macro: 0.60076 |  0:26:02s
epoch 102| loss: 0.6439  | train_balanced_accuracy: 0.58779 | train_logloss: 0.66282 | train_f1_macro: 0.58733 | valid_balanced_accuracy: 0.60047 | valid_logloss: 0.66486 | valid_f1_macro: 0.60035 |  0:26:15s
epoch 103| loss: 0.64471 | train_balanced_accuracy: 0.60736 | train_logloss: 0.65311 | train_f1_macro: 0.60453 | valid_balanced_accuracy: 0.61283 | valid_logloss: 0.6481  | valid_f1_macro: 0.61115 |  0:26:27s
epoch 104| loss: 0.64074 | train_balanced_accuracy: 0.61576 | train_logloss: 0.64002 | train_f1_macro: 0.61575 | valid_balanced_accuracy: 0.6128  | valid_logloss: 0.64302 | valid_f1_macro: 0.61263 |  0:26:40s
epoch 105| loss: 0.6412  | train_balanced_accuracy: 0.6119  | train_logloss: 0.64891 | train_f1_macro: 0.61161 | valid_balanced_accuracy: 0.61281 | valid_logloss: 0.65083 | valid_f1_macro: 0.61274 |  0:26:53s
epoch 106| loss: 0.64106 | train_balanced_accuracy: 0.59655 | train_logloss: 0.65288 | train_f1_macro: 0.58717 | valid_balanced_accuracy: 0.58779 | valid_logloss: 0.65724 | valid_f1_macro: 0.57907 |  0:27:06s
epoch 107| loss: 0.64212 | train_balanced_accuracy: 0.58353 | train_logloss: 0.66383 | train_f1_macro: 0.56467 | valid_balanced_accuracy: 0.58859 | valid_logloss: 0.65685 | valid_f1_macro: 0.56927 |  0:27:18s
epoch 108| loss: 0.64117 | train_balanced_accuracy: 0.58711 | train_logloss: 0.64947 | train_f1_macro: 0.58566 | valid_balanced_accuracy: 0.58159 | valid_logloss: 0.6502  | valid_f1_macro: 0.5794  |  0:27:30s
epoch 109| loss: 0.64065 | train_balanced_accuracy: 0.56838 | train_logloss: 0.67481 | train_f1_macro: 0.50954 | valid_balanced_accuracy: 0.56242 | valid_logloss: 0.67663 | valid_f1_macro: 0.49987 |  0:27:43s
epoch 110| loss: 0.64125 | train_balanced_accuracy: 0.59974 | train_logloss: 0.65488 | train_f1_macro: 0.59484 | valid_balanced_accuracy: 0.60668 | valid_logloss: 0.6513  | valid_f1_macro: 0.6014  |  0:27:55s
epoch 111| loss: 0.64093 | train_balanced_accuracy: 0.58144 | train_logloss: 0.65994 | train_f1_macro: 0.57976 | valid_balanced_accuracy: 0.58424 | valid_logloss: 0.66469 | valid_f1_macro: 0.58195 |  0:28:07s
epoch 112| loss: 0.64628 | train_balanced_accuracy: 0.58237 | train_logloss: 0.67739 | train_f1_macro: 0.56126 | valid_balanced_accuracy: 0.58705 | valid_logloss: 0.67344 | valid_f1_macro: 0.56661 |  0:28:21s

Early stopping occurred at epoch 112 with best_epoch = 92 and best_valid_f1_macro = 0.61858
/mnt/Dados/Mestrado_Computacao_Aplicada_UFMS/documentos_dissertacao/algoritmos/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/pytorch_tabnet/callbacks.py:172: UserWarning: Best weights from best epoch are automatically used!
  warnings.warn(wrn_msg)
[CV 2/5; 7/7] END classifier__estimator=TabNetClassifierTuner(n_d=8, n_a=8, n_steps=3, gamma=1.3, cat_idxs=[], cat_dims=[], cat_emb_dim=1, n_independent=2, n_shared=2, epsilon=1e-15, momentum=0.02, lambda_sparse=0.001, seed=0, clip_value=1, verbose=1, optimizer_fn=<class 'torch.optim.adam.Adam'>, optimizer_params={'lr': 0.02}, scheduler_fn=None, scheduler_params={}, mask_type='sparsemax', input_dim=None, output_dim=None, device_name='cpu', n_shared_decoder=1, n_indep_decoder=1, use_embeddings=True, threshold_categorical_features=150, use_cat_emb_dim=True, fit_eval_metric=['balanced_accuracy', 'logloss', <class 'pytorch_tabnet_tuner.tab_model_tuner.F1ScoreMacro'>], fit_weights=0, fit_batch_size=1024, fit_virtual_batch_size=128), classifier__estimator__cat_emb_dim=20, classifier__estimator__clip_value=1, classifier__estimator__gamma=2.0, classifier__estimator__lambda_sparse=0.001, classifier__estimator__mask_type=sparsemax, classifier__estimator__momentum=0.4, classifier__estimator__n_a=64, classifier__estimator__n_independent=5, classifier__estimator__n_shared=5, classifier__estimator__n_steps=10, classifier__estimator__optimizer_fn=<class 'torch.optim.adam.Adam'>, classifier__estimator__optimizer_params={'lr': 0.02}, classifier__estimator__scheduler_fn=<class 'torch.optim.lr_scheduler.StepLR'>, classifier__estimator__scheduler_params={'step_size': 10, 'gamma': 0.95}, classifier__estimator__seed=42, classifier__estimator__verbose=1;, score=0.547 total time=28.5min
[CV 3/5; 7/7] START classifier__estimator=TabNetClassifierTuner(n_d=8, n_a=8, n_steps=3, gamma=1.3, cat_idxs=[], cat_dims=[], cat_emb_dim=1, n_independent=2, n_shared=2, epsilon=1e-15, momentum=0.02, lambda_sparse=0.001, seed=0, clip_value=1, verbose=1, optimizer_fn=<class 'torch.optim.adam.Adam'>, optimizer_params={'lr': 0.02}, scheduler_fn=None, scheduler_params={}, mask_type='sparsemax', input_dim=None, output_dim=None, device_name='cpu', n_shared_decoder=1, n_indep_decoder=1, use_embeddings=True, threshold_categorical_features=150, use_cat_emb_dim=True, fit_eval_metric=['balanced_accuracy', 'logloss', <class 'pytorch_tabnet_tuner.tab_model_tuner.F1ScoreMacro'>], fit_weights=0, fit_batch_size=1024, fit_virtual_batch_size=128), classifier__estimator__cat_emb_dim=20, classifier__estimator__clip_value=1, classifier__estimator__gamma=2.0, classifier__estimator__lambda_sparse=0.001, classifier__estimator__mask_type=sparsemax, classifier__estimator__momentum=0.4, classifier__estimator__n_a=64, classifier__estimator__n_independent=5, classifier__estimator__n_shared=5, classifier__estimator__n_steps=10, classifier__estimator__optimizer_fn=<class 'torch.optim.adam.Adam'>, classifier__estimator__optimizer_params={'lr': 0.02}, classifier__estimator__scheduler_fn=<class 'torch.optim.lr_scheduler.StepLR'>, classifier__estimator__scheduler_params={'step_size': 10, 'gamma': 0.95}, classifier__estimator__seed=42, classifier__estimator__verbose=1
/mnt/Dados/Mestrado_Computacao_Aplicada_UFMS/documentos_dissertacao/algoritmos/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/pytorch_tabnet/abstract_model.py:75: UserWarning: Device used : cpu
  warnings.warn(f"Device used : {self.device}")
/mnt/Dados/Mestrado_Computacao_Aplicada_UFMS/documentos_dissertacao/algoritmos/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/pytorch_tabnet/abstract_model.py:105: UserWarning: Pretraining: n_d changed from 8 to 64
  warnings.warn(wrn_msg)
/mnt/Dados/Mestrado_Computacao_Aplicada_UFMS/documentos_dissertacao/algoritmos/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/pytorch_tabnet/abstract_model.py:105: UserWarning: Pretraining: cat_dims changed from [] to [4, 2, 2, 2, 46, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]
  warnings.warn(wrn_msg)
/mnt/Dados/Mestrado_Computacao_Aplicada_UFMS/documentos_dissertacao/algoritmos/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/pytorch_tabnet/abstract_model.py:105: UserWarning: Pretraining: cat_emb_dim changed from 20 to [2, 1, 1, 1, 20, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
  warnings.warn(wrn_msg)
/mnt/Dados/Mestrado_Computacao_Aplicada_UFMS/documentos_dissertacao/algoritmos/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/pytorch_tabnet/abstract_model.py:105: UserWarning: Pretraining: cat_idxs changed from [] to [0, 1, 2, 3, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]
  warnings.warn(wrn_msg)
epoch 0  | loss: 4.25084 | train_balanced_accuracy: 0.50479 | train_logloss: 4.02134 | train_f1_macro: 0.48877 | valid_balanced_accuracy: 0.51285 | valid_logloss: 3.97661 | valid_f1_macro: 0.49681 |  0:00:12s
epoch 1  | loss: 3.53515 | train_balanced_accuracy: 0.5     | train_logloss: 6.63835 | train_f1_macro: 0.33331 | valid_balanced_accuracy: 0.5     | valid_logloss: 6.62921 | valid_f1_macro: 0.33342 |  0:00:24s
epoch 2  | loss: 6.9115  | train_balanced_accuracy: 0.49981 | train_logloss: 5.06403 | train_f1_macro: 0.33361 | valid_balanced_accuracy: 0.5     | valid_logloss: 5.0532  | valid_f1_macro: 0.33393 |  0:00:37s
epoch 3  | loss: 3.15842 | train_balanced_accuracy: 0.5     | train_logloss: 6.13409 | train_f1_macro: 0.33335 | valid_balanced_accuracy: 0.5     | valid_logloss: 6.09814 | valid_f1_macro: 0.33325 |  0:00:49s
epoch 4  | loss: 3.19154 | train_balanced_accuracy: 0.49711 | train_logloss: 1.62517 | train_f1_macro: 0.33594 | valid_balanced_accuracy: 0.49768 | valid_logloss: 1.61316 | valid_f1_macro: 0.33693 |  0:01:02s
epoch 5  | loss: 1.1073  | train_balanced_accuracy: 0.49942 | train_logloss: 1.33977 | train_f1_macro: 0.34048 | valid_balanced_accuracy: 0.49768 | valid_logloss: 1.32631 | valid_f1_macro: 0.34281 |  0:01:14s
epoch 6  | loss: 1.04676 | train_balanced_accuracy: 0.50461 | train_logloss: 1.04945 | train_f1_macro: 0.46259 | valid_balanced_accuracy: 0.50355 | valid_logloss: 1.07847 | valid_f1_macro: 0.45914 |  0:01:26s
epoch 7  | loss: 2.47803 | train_balanced_accuracy: 0.5     | train_logloss: 1.11409 | train_f1_macro: 0.33335 | valid_balanced_accuracy: 0.5     | valid_logloss: 1.11037 | valid_f1_macro: 0.33325 |  0:01:39s
epoch 8  | loss: 0.9179  | train_balanced_accuracy: 0.5     | train_logloss: 0.72251 | train_f1_macro: 0.33335 | valid_balanced_accuracy: 0.5     | valid_logloss: 0.72476 | valid_f1_macro: 0.33325 |  0:01:51s
epoch 9  | loss: 0.73149 | train_balanced_accuracy: 0.5031  | train_logloss: 0.73767 | train_f1_macro: 0.42959 | valid_balanced_accuracy: 0.51614 | valid_logloss: 0.74376 | valid_f1_macro: 0.4442  |  0:02:03s
epoch 10 | loss: 0.70272 | train_balanced_accuracy: 0.48745 | train_logloss: 0.76938 | train_f1_macro: 0.425   | valid_balanced_accuracy: 0.48078 | valid_logloss: 0.77108 | valid_f1_macro: 0.41317 |  0:02:16s
epoch 11 | loss: 0.69502 | train_balanced_accuracy: 0.5448  | train_logloss: 0.68941 | train_f1_macro: 0.53967 | valid_balanced_accuracy: 0.53834 | valid_logloss: 0.68927 | valid_f1_macro: 0.53432 |  0:02:29s
epoch 12 | loss: 0.68352 | train_balanced_accuracy: 0.50202 | train_logloss: 0.69809 | train_f1_macro: 0.37034 | valid_balanced_accuracy: 0.50465 | valid_logloss: 0.69513 | valid_f1_macro: 0.37741 |  0:02:41s
epoch 13 | loss: 0.67786 | train_balanced_accuracy: 0.53061 | train_logloss: 0.69846 | train_f1_macro: 0.53059 | valid_balanced_accuracy: 0.53376 | valid_logloss: 0.69625 | valid_f1_macro: 0.53332 |  0:02:54s
epoch 14 | loss: 0.67698 | train_balanced_accuracy: 0.53109 | train_logloss: 0.70331 | train_f1_macro: 0.52736 | valid_balanced_accuracy: 0.54767 | valid_logloss: 0.6946  | valid_f1_macro: 0.54289 |  0:03:06s
epoch 15 | loss: 0.66963 | train_balanced_accuracy: 0.5503  | train_logloss: 0.6961  | train_f1_macro: 0.54221 | valid_balanced_accuracy: 0.55452 | valid_logloss: 0.69919 | valid_f1_macro: 0.54811 |  0:03:19s
epoch 16 | loss: 0.67853 | train_balanced_accuracy: 0.52257 | train_logloss: 0.70642 | train_f1_macro: 0.4244  | valid_balanced_accuracy: 0.52966 | valid_logloss: 0.70003 | valid_f1_macro: 0.4336  |  0:03:31s
epoch 17 | loss: 0.66926 | train_balanced_accuracy: 0.48486 | train_logloss: 0.69874 | train_f1_macro: 0.36675 | valid_balanced_accuracy: 0.48884 | valid_logloss: 0.69504 | valid_f1_macro: 0.36658 |  0:03:43s
epoch 18 | loss: 0.65974 | train_balanced_accuracy: 0.5339  | train_logloss: 0.69133 | train_f1_macro: 0.53266 | valid_balanced_accuracy: 0.51637 | valid_logloss: 0.69601 | valid_f1_macro: 0.51515 |  0:03:56s
epoch 19 | loss: 0.6512  | train_balanced_accuracy: 0.55858 | train_logloss: 0.69036 | train_f1_macro: 0.55854 | valid_balanced_accuracy: 0.53992 | valid_logloss: 0.69404 | valid_f1_macro: 0.53991 |  0:04:08s
epoch 20 | loss: 0.6606  | train_balanced_accuracy: 0.56234 | train_logloss: 0.68551 | train_f1_macro: 0.5623  | valid_balanced_accuracy: 0.57076 | valid_logloss: 0.68405 | valid_f1_macro: 0.57065 |  0:04:21s
epoch 21 | loss: 0.6715  | train_balanced_accuracy: 0.56262 | train_logloss: 0.68395 | train_f1_macro: 0.56018 | valid_balanced_accuracy: 0.55961 | valid_logloss: 0.6842  | valid_f1_macro: 0.55718 |  0:04:34s
epoch 22 | loss: 0.66937 | train_balanced_accuracy: 0.55329 | train_logloss: 0.69216 | train_f1_macro: 0.54639 | valid_balanced_accuracy: 0.55876 | valid_logloss: 0.69368 | valid_f1_macro: 0.55168 |  0:04:47s
epoch 23 | loss: 0.67552 | train_balanced_accuracy: 0.57014 | train_logloss: 0.68125 | train_f1_macro: 0.56838 | valid_balanced_accuracy: 0.56192 | valid_logloss: 0.67939 | valid_f1_macro: 0.56074 |  0:04:59s
epoch 24 | loss: 0.6835  | train_balanced_accuracy: 0.53515 | train_logloss: 0.6941  | train_f1_macro: 0.535   | valid_balanced_accuracy: 0.52719 | valid_logloss: 0.7039  | valid_f1_macro: 0.52716 |  0:05:11s
epoch 25 | loss: 0.67458 | train_balanced_accuracy: 0.54679 | train_logloss: 0.70421 | train_f1_macro: 0.52699 | valid_balanced_accuracy: 0.54732 | valid_logloss: 0.69356 | valid_f1_macro: 0.52648 |  0:05:24s
epoch 26 | loss: 0.67979 | train_balanced_accuracy: 0.52065 | train_logloss: 0.69515 | train_f1_macro: 0.44635 | valid_balanced_accuracy: 0.52116 | valid_logloss: 0.69657 | valid_f1_macro: 0.44943 |  0:05:37s
epoch 27 | loss: 0.68048 | train_balanced_accuracy: 0.53338 | train_logloss: 0.73699 | train_f1_macro: 0.49062 | valid_balanced_accuracy: 0.5273  | valid_logloss: 0.74791 | valid_f1_macro: 0.4849  |  0:05:57s
epoch 28 | loss: 0.67166 | train_balanced_accuracy: 0.51149 | train_logloss: 0.70594 | train_f1_macro: 0.42671 | valid_balanced_accuracy: 0.51345 | valid_logloss: 0.70886 | valid_f1_macro: 0.42966 |  0:06:12s
epoch 29 | loss: 0.69476 | train_balanced_accuracy: 0.55454 | train_logloss: 0.71194 | train_f1_macro: 0.5507  | valid_balanced_accuracy: 0.57574 | valid_logloss: 0.70822 | valid_f1_macro: 0.57164 |  0:06:26s
epoch 30 | loss: 0.69032 | train_balanced_accuracy: 0.52811 | train_logloss: 0.69196 | train_f1_macro: 0.52602 | valid_balanced_accuracy: 0.53873 | valid_logloss: 0.68859 | valid_f1_macro: 0.53688 |  0:06:41s
epoch 31 | loss: 0.68891 | train_balanced_accuracy: 0.5155  | train_logloss: 0.69322 | train_f1_macro: 0.49422 | valid_balanced_accuracy: 0.53213 | valid_logloss: 0.69072 | valid_f1_macro: 0.51384 |  0:06:56s
epoch 32 | loss: 0.6866  | train_balanced_accuracy: 0.55378 | train_logloss: 0.68363 | train_f1_macro: 0.53145 | valid_balanced_accuracy: 0.54677 | valid_logloss: 0.68431 | valid_f1_macro: 0.52316 |  0:07:11s
epoch 33 | loss: 0.68266 | train_balanced_accuracy: 0.56042 | train_logloss: 0.68346 | train_f1_macro: 0.55612 | valid_balanced_accuracy: 0.55376 | valid_logloss: 0.68706 | valid_f1_macro: 0.54934 |  0:07:23s
epoch 34 | loss: 0.68347 | train_balanced_accuracy: 0.51621 | train_logloss: 0.72106 | train_f1_macro: 0.40318 | valid_balanced_accuracy: 0.51155 | valid_logloss: 0.7288  | valid_f1_macro: 0.39582 |  0:07:36s
epoch 35 | loss: 0.69696 | train_balanced_accuracy: 0.55191 | train_logloss: 0.69311 | train_f1_macro: 0.54679 | valid_balanced_accuracy: 0.55731 | valid_logloss: 0.69686 | valid_f1_macro: 0.55154 |  0:07:49s
epoch 36 | loss: 0.68188 | train_balanced_accuracy: 0.55946 | train_logloss: 0.68304 | train_f1_macro: 0.53923 | valid_balanced_accuracy: 0.56529 | valid_logloss: 0.68394 | valid_f1_macro: 0.54426 |  0:08:02s
epoch 37 | loss: 0.68526 | train_balanced_accuracy: 0.53565 | train_logloss: 0.69354 | train_f1_macro: 0.51983 | valid_balanced_accuracy: 0.53753 | valid_logloss: 0.69552 | valid_f1_macro: 0.52091 |  0:08:15s
epoch 38 | loss: 0.68394 | train_balanced_accuracy: 0.52363 | train_logloss: 0.70295 | train_f1_macro: 0.44136 | valid_balanced_accuracy: 0.52078 | valid_logloss: 0.69918 | valid_f1_macro: 0.43727 |  0:08:28s
epoch 39 | loss: 0.68456 | train_balanced_accuracy: 0.53602 | train_logloss: 0.69325 | train_f1_macro: 0.53078 | valid_balanced_accuracy: 0.53293 | valid_logloss: 0.69599 | valid_f1_macro: 0.52655 |  0:08:40s
epoch 40 | loss: 0.68249 | train_balanced_accuracy: 0.54576 | train_logloss: 0.68381 | train_f1_macro: 0.54284 | valid_balanced_accuracy: 0.55183 | valid_logloss: 0.68303 | valid_f1_macro: 0.54803 |  0:09:03s
epoch 41 | loss: 0.6845  | train_balanced_accuracy: 0.54942 | train_logloss: 0.68835 | train_f1_macro: 0.54616 | valid_balanced_accuracy: 0.52446 | valid_logloss: 0.69161 | valid_f1_macro: 0.52123 |  0:09:18s
epoch 42 | loss: 0.6837  | train_balanced_accuracy: 0.53929 | train_logloss: 0.69602 | train_f1_macro: 0.53899 | valid_balanced_accuracy: 0.54222 | valid_logloss: 0.69752 | valid_f1_macro: 0.54186 |  0:09:30s
epoch 43 | loss: 0.6864  | train_balanced_accuracy: 0.52473 | train_logloss: 0.6934  | train_f1_macro: 0.5244  | valid_balanced_accuracy: 0.52257 | valid_logloss: 0.69181 | valid_f1_macro: 0.52207 |  0:09:44s
epoch 44 | loss: 0.68424 | train_balanced_accuracy: 0.5634  | train_logloss: 0.68466 | train_f1_macro: 0.56307 | valid_balanced_accuracy: 0.56497 | valid_logloss: 0.68635 | valid_f1_macro: 0.56462 |  0:09:57s
epoch 45 | loss: 0.68509 | train_balanced_accuracy: 0.54395 | train_logloss: 0.70417 | train_f1_macro: 0.49251 | valid_balanced_accuracy: 0.54172 | valid_logloss: 0.70958 | valid_f1_macro: 0.4877  |  0:10:10s
epoch 46 | loss: 0.68108 | train_balanced_accuracy: 0.56428 | train_logloss: 0.6779  | train_f1_macro: 0.55682 | valid_balanced_accuracy: 0.57265 | valid_logloss: 0.67717 | valid_f1_macro: 0.56579 |  0:10:23s
epoch 47 | loss: 0.66948 | train_balanced_accuracy: 0.55238 | train_logloss: 0.68126 | train_f1_macro: 0.5173  | valid_balanced_accuracy: 0.55737 | valid_logloss: 0.68391 | valid_f1_macro: 0.5257  |  0:10:35s
epoch 48 | loss: 0.66018 | train_balanced_accuracy: 0.54486 | train_logloss: 0.70766 | train_f1_macro: 0.50164 | valid_balanced_accuracy: 0.54273 | valid_logloss: 0.71213 | valid_f1_macro: 0.50049 |  0:10:48s
epoch 49 | loss: 0.64869 | train_balanced_accuracy: 0.58662 | train_logloss: 0.67013 | train_f1_macro: 0.5786  | valid_balanced_accuracy: 0.58123 | valid_logloss: 0.6912  | valid_f1_macro: 0.5729  |  0:11:00s
epoch 50 | loss: 0.64104 | train_balanced_accuracy: 0.59935 | train_logloss: 0.6709  | train_f1_macro: 0.59418 | valid_balanced_accuracy: 0.59164 | valid_logloss: 0.6867  | valid_f1_macro: 0.58656 |  0:11:12s
epoch 51 | loss: 0.64471 | train_balanced_accuracy: 0.56937 | train_logloss: 0.67482 | train_f1_macro: 0.56674 | valid_balanced_accuracy: 0.57736 | valid_logloss: 0.6753  | valid_f1_macro: 0.57445 |  0:11:25s
epoch 52 | loss: 0.64907 | train_balanced_accuracy: 0.57727 | train_logloss: 0.68232 | train_f1_macro: 0.57288 | valid_balanced_accuracy: 0.57813 | valid_logloss: 0.6899  | valid_f1_macro: 0.57448 |  0:11:38s
epoch 53 | loss: 0.64451 | train_balanced_accuracy: 0.59176 | train_logloss: 0.67143 | train_f1_macro: 0.58627 | valid_balanced_accuracy: 0.59926 | valid_logloss: 0.67235 | valid_f1_macro: 0.59311 |  0:11:50s
epoch 54 | loss: 0.64344 | train_balanced_accuracy: 0.59618 | train_logloss: 0.66278 | train_f1_macro: 0.59609 | valid_balanced_accuracy: 0.597   | valid_logloss: 0.67205 | valid_f1_macro: 0.59692 |  0:12:01s
epoch 55 | loss: 0.63475 | train_balanced_accuracy: 0.59753 | train_logloss: 0.65954 | train_f1_macro: 0.5968  | valid_balanced_accuracy: 0.59855 | valid_logloss: 0.66496 | valid_f1_macro: 0.59778 |  0:12:13s
epoch 56 | loss: 0.63717 | train_balanced_accuracy: 0.62308 | train_logloss: 0.64512 | train_f1_macro: 0.62288 | valid_balanced_accuracy: 0.62169 | valid_logloss: 0.66007 | valid_f1_macro: 0.62131 |  0:12:25s
epoch 57 | loss: 0.63687 | train_balanced_accuracy: 0.61324 | train_logloss: 0.66554 | train_f1_macro: 0.60935 | valid_balanced_accuracy: 0.61092 | valid_logloss: 0.70529 | valid_f1_macro: 0.60615 |  0:12:36s
epoch 58 | loss: 0.63651 | train_balanced_accuracy: 0.62173 | train_logloss: 0.69658 | train_f1_macro: 0.62038 | valid_balanced_accuracy: 0.60781 | valid_logloss: 0.71939 | valid_f1_macro: 0.6064  |  0:12:48s
epoch 59 | loss: 0.63743 | train_balanced_accuracy: 0.58952 | train_logloss: 0.66961 | train_f1_macro: 0.58413 | valid_balanced_accuracy: 0.58701 | valid_logloss: 0.68103 | valid_f1_macro: 0.58105 |  0:12:59s
epoch 60 | loss: 0.63776 | train_balanced_accuracy: 0.60352 | train_logloss: 0.90641 | train_f1_macro: 0.60208 | valid_balanced_accuracy: 0.61124 | valid_logloss: 0.77208 | valid_f1_macro: 0.6102  |  0:13:11s
epoch 61 | loss: 0.63825 | train_balanced_accuracy: 0.60358 | train_logloss: 1.0825  | train_f1_macro: 0.58299 | valid_balanced_accuracy: 0.6075  | valid_logloss: 1.12353 | valid_f1_macro: 0.584   |  0:13:23s
epoch 62 | loss: 0.63954 | train_balanced_accuracy: 0.59261 | train_logloss: 0.7069  | train_f1_macro: 0.59145 | valid_balanced_accuracy: 0.59779 | valid_logloss: 0.72149 | valid_f1_macro: 0.59648 |  0:13:34s
epoch 63 | loss: 0.63825 | train_balanced_accuracy: 0.60591 | train_logloss: 0.65775 | train_f1_macro: 0.59665 | valid_balanced_accuracy: 0.60978 | valid_logloss: 0.66336 | valid_f1_macro: 0.59925 |  0:13:45s
epoch 64 | loss: 0.63767 | train_balanced_accuracy: 0.5787  | train_logloss: 0.802   | train_f1_macro: 0.52353 | valid_balanced_accuracy: 0.57939 | valid_logloss: 0.80656 | valid_f1_macro: 0.5222  |  0:13:57s
epoch 65 | loss: 0.63988 | train_balanced_accuracy: 0.59157 | train_logloss: 0.67848 | train_f1_macro: 0.57579 | valid_balanced_accuracy: 0.58804 | valid_logloss: 0.68235 | valid_f1_macro: 0.57052 |  0:14:09s
epoch 66 | loss: 0.63864 | train_balanced_accuracy: 0.54823 | train_logloss: 0.73456 | train_f1_macro: 0.49153 | valid_balanced_accuracy: 0.5493  | valid_logloss: 0.74265 | valid_f1_macro: 0.49198 |  0:14:20s
epoch 67 | loss: 0.63594 | train_balanced_accuracy: 0.61132 | train_logloss: 0.68022 | train_f1_macro: 0.61109 | valid_balanced_accuracy: 0.60703 | valid_logloss: 0.6912  | valid_f1_macro: 0.60681 |  0:14:32s
epoch 68 | loss: 0.63601 | train_balanced_accuracy: 0.59636 | train_logloss: 0.66588 | train_f1_macro: 0.58194 | valid_balanced_accuracy: 0.58896 | valid_logloss: 0.68135 | valid_f1_macro: 0.57642 |  0:14:43s
epoch 69 | loss: 0.63752 | train_balanced_accuracy: 0.57563 | train_logloss: 0.74564 | train_f1_macro: 0.56039 | valid_balanced_accuracy: 0.56544 | valid_logloss: 0.76589 | valid_f1_macro: 0.55034 |  0:14:55s
epoch 70 | loss: 0.64009 | train_balanced_accuracy: 0.50299 | train_logloss: 2.43471 | train_f1_macro: 0.34143 | valid_balanced_accuracy: 0.50039 | valid_logloss: 2.45373 | valid_f1_macro: 0.33632 |  0:15:06s
epoch 71 | loss: 0.6377  | train_balanced_accuracy: 0.56829 | train_logloss: 1.94637 | train_f1_macro: 0.5428  | valid_balanced_accuracy: 0.56777 | valid_logloss: 2.12672 | valid_f1_macro: 0.54491 |  0:15:18s
epoch 72 | loss: 0.63441 | train_balanced_accuracy: 0.59693 | train_logloss: 0.65472 | train_f1_macro: 0.57862 | valid_balanced_accuracy: 0.60131 | valid_logloss: 0.66583 | valid_f1_macro: 0.58309 |  0:15:30s
epoch 73 | loss: 0.63525 | train_balanced_accuracy: 0.58188 | train_logloss: 0.97027 | train_f1_macro: 0.54669 | valid_balanced_accuracy: 0.57704 | valid_logloss: 1.04346 | valid_f1_macro: 0.54389 |  0:15:41s
epoch 74 | loss: 0.6462  | train_balanced_accuracy: 0.58892 | train_logloss: 0.77066 | train_f1_macro: 0.55747 | valid_balanced_accuracy: 0.5701  | valid_logloss: 0.78808 | valid_f1_macro: 0.53784 |  0:15:53s
epoch 75 | loss: 0.66203 | train_balanced_accuracy: 0.57069 | train_logloss: 1.29025 | train_f1_macro: 0.50667 | valid_balanced_accuracy: 0.56512 | valid_logloss: 1.29316 | valid_f1_macro: 0.49965 |  0:16:04s
epoch 76 | loss: 0.63783 | train_balanced_accuracy: 0.59163 | train_logloss: 1.24691 | train_f1_macro: 0.56368 | valid_balanced_accuracy: 0.59323 | valid_logloss: 1.26581 | valid_f1_macro: 0.56568 |  0:16:16s

Early stopping occurred at epoch 76 with best_epoch = 56 and best_valid_f1_macro = 0.62131
/mnt/Dados/Mestrado_Computacao_Aplicada_UFMS/documentos_dissertacao/algoritmos/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/pytorch_tabnet/callbacks.py:172: UserWarning: Best weights from best epoch are automatically used!
  warnings.warn(wrn_msg)
[CV 3/5; 7/7] END classifier__estimator=TabNetClassifierTuner(n_d=8, n_a=8, n_steps=3, gamma=1.3, cat_idxs=[], cat_dims=[], cat_emb_dim=1, n_independent=2, n_shared=2, epsilon=1e-15, momentum=0.02, lambda_sparse=0.001, seed=0, clip_value=1, verbose=1, optimizer_fn=<class 'torch.optim.adam.Adam'>, optimizer_params={'lr': 0.02}, scheduler_fn=None, scheduler_params={}, mask_type='sparsemax', input_dim=None, output_dim=None, device_name='cpu', n_shared_decoder=1, n_indep_decoder=1, use_embeddings=True, threshold_categorical_features=150, use_cat_emb_dim=True, fit_eval_metric=['balanced_accuracy', 'logloss', <class 'pytorch_tabnet_tuner.tab_model_tuner.F1ScoreMacro'>], fit_weights=0, fit_batch_size=1024, fit_virtual_batch_size=128), classifier__estimator__cat_emb_dim=20, classifier__estimator__clip_value=1, classifier__estimator__gamma=2.0, classifier__estimator__lambda_sparse=0.001, classifier__estimator__mask_type=sparsemax, classifier__estimator__momentum=0.4, classifier__estimator__n_a=64, classifier__estimator__n_independent=5, classifier__estimator__n_shared=5, classifier__estimator__n_steps=10, classifier__estimator__optimizer_fn=<class 'torch.optim.adam.Adam'>, classifier__estimator__optimizer_params={'lr': 0.02}, classifier__estimator__scheduler_fn=<class 'torch.optim.lr_scheduler.StepLR'>, classifier__estimator__scheduler_params={'step_size': 10, 'gamma': 0.95}, classifier__estimator__seed=42, classifier__estimator__verbose=1;, score=0.551 total time=16.4min
[CV 4/5; 7/7] START classifier__estimator=TabNetClassifierTuner(n_d=8, n_a=8, n_steps=3, gamma=1.3, cat_idxs=[], cat_dims=[], cat_emb_dim=1, n_independent=2, n_shared=2, epsilon=1e-15, momentum=0.02, lambda_sparse=0.001, seed=0, clip_value=1, verbose=1, optimizer_fn=<class 'torch.optim.adam.Adam'>, optimizer_params={'lr': 0.02}, scheduler_fn=None, scheduler_params={}, mask_type='sparsemax', input_dim=None, output_dim=None, device_name='cpu', n_shared_decoder=1, n_indep_decoder=1, use_embeddings=True, threshold_categorical_features=150, use_cat_emb_dim=True, fit_eval_metric=['balanced_accuracy', 'logloss', <class 'pytorch_tabnet_tuner.tab_model_tuner.F1ScoreMacro'>], fit_weights=0, fit_batch_size=1024, fit_virtual_batch_size=128), classifier__estimator__cat_emb_dim=20, classifier__estimator__clip_value=1, classifier__estimator__gamma=2.0, classifier__estimator__lambda_sparse=0.001, classifier__estimator__mask_type=sparsemax, classifier__estimator__momentum=0.4, classifier__estimator__n_a=64, classifier__estimator__n_independent=5, classifier__estimator__n_shared=5, classifier__estimator__n_steps=10, classifier__estimator__optimizer_fn=<class 'torch.optim.adam.Adam'>, classifier__estimator__optimizer_params={'lr': 0.02}, classifier__estimator__scheduler_fn=<class 'torch.optim.lr_scheduler.StepLR'>, classifier__estimator__scheduler_params={'step_size': 10, 'gamma': 0.95}, classifier__estimator__seed=42, classifier__estimator__verbose=1
/mnt/Dados/Mestrado_Computacao_Aplicada_UFMS/documentos_dissertacao/algoritmos/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/pytorch_tabnet/abstract_model.py:75: UserWarning: Device used : cpu
  warnings.warn(f"Device used : {self.device}")
/mnt/Dados/Mestrado_Computacao_Aplicada_UFMS/documentos_dissertacao/algoritmos/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/pytorch_tabnet/abstract_model.py:105: UserWarning: Pretraining: n_d changed from 8 to 64
  warnings.warn(wrn_msg)
/mnt/Dados/Mestrado_Computacao_Aplicada_UFMS/documentos_dissertacao/algoritmos/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/pytorch_tabnet/abstract_model.py:105: UserWarning: Pretraining: cat_dims changed from [] to [4, 2, 2, 2, 46, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]
  warnings.warn(wrn_msg)
/mnt/Dados/Mestrado_Computacao_Aplicada_UFMS/documentos_dissertacao/algoritmos/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/pytorch_tabnet/abstract_model.py:105: UserWarning: Pretraining: cat_emb_dim changed from 20 to [2, 1, 1, 1, 20, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
  warnings.warn(wrn_msg)
/mnt/Dados/Mestrado_Computacao_Aplicada_UFMS/documentos_dissertacao/algoritmos/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/pytorch_tabnet/abstract_model.py:105: UserWarning: Pretraining: cat_idxs changed from [] to [0, 1, 2, 3, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]
  warnings.warn(wrn_msg)
epoch 0  | loss: 4.11531 | train_balanced_accuracy: 0.50314 | train_logloss: 1.64643 | train_f1_macro: 0.50222 | valid_balanced_accuracy: 0.50211 | valid_logloss: 1.64135 | valid_f1_macro: 0.50141 |  0:00:12s
epoch 1  | loss: 3.48785 | train_balanced_accuracy: 0.49586 | train_logloss: 2.1323  | train_f1_macro: 0.36145 | valid_balanced_accuracy: 0.50191 | valid_logloss: 2.16111 | valid_f1_macro: 0.37076 |  0:00:24s
epoch 2  | loss: 1.6899  | train_balanced_accuracy: 0.48039 | train_logloss: 2.12496 | train_f1_macro: 0.46222 | valid_balanced_accuracy: 0.48894 | valid_logloss: 2.12635 | valid_f1_macro: 0.47088 |  0:00:35s
epoch 3  | loss: 2.25387 | train_balanced_accuracy: 0.50252 | train_logloss: 3.30864 | train_f1_macro: 0.41856 | valid_balanced_accuracy: 0.50304 | valid_logloss: 3.36007 | valid_f1_macro: 0.41645 |  0:00:47s
epoch 4  | loss: 2.04917 | train_balanced_accuracy: 0.48992 | train_logloss: 1.83227 | train_f1_macro: 0.4899  | valid_balanced_accuracy: 0.47011 | valid_logloss: 1.84325 | valid_f1_macro: 0.4701  |  0:00:59s
epoch 5  | loss: 1.39323 | train_balanced_accuracy: 0.52387 | train_logloss: 0.81455 | train_f1_macro: 0.52326 | valid_balanced_accuracy: 0.52332 | valid_logloss: 0.80968 | valid_f1_macro: 0.5231  |  0:01:10s
epoch 6  | loss: 1.76317 | train_balanced_accuracy: 0.50068 | train_logloss: 1.36284 | train_f1_macro: 0.3432  | valid_balanced_accuracy: 0.49922 | valid_logloss: 1.39392 | valid_f1_macro: 0.34289 |  0:01:22s
epoch 7  | loss: 3.64538 | train_balanced_accuracy: 0.5     | train_logloss: 5.25578 | train_f1_macro: 0.33335 | valid_balanced_accuracy: 0.5     | valid_logloss: 5.19842 | valid_f1_macro: 0.33325 |  0:01:33s
epoch 8  | loss: 1.99472 | train_balanced_accuracy: 0.52194 | train_logloss: 0.71834 | train_f1_macro: 0.52105 | valid_balanced_accuracy: 0.51985 | valid_logloss: 0.72368 | valid_f1_macro: 0.51955 |  0:01:45s
epoch 9  | loss: 0.82499 | train_balanced_accuracy: 0.5     | train_logloss: 0.78934 | train_f1_macro: 0.33331 | valid_balanced_accuracy: 0.5     | valid_logloss: 0.78464 | valid_f1_macro: 0.33342 |  0:01:57s
epoch 10 | loss: 0.7141  | train_balanced_accuracy: 0.54864 | train_logloss: 0.69577 | train_f1_macro: 0.5439  | valid_balanced_accuracy: 0.55307 | valid_logloss: 0.69473 | valid_f1_macro: 0.54752 |  0:02:09s
epoch 11 | loss: 0.7033  | train_balanced_accuracy: 0.54518 | train_logloss: 0.70006 | train_f1_macro: 0.54513 | valid_balanced_accuracy: 0.53915 | valid_logloss: 0.69708 | valid_f1_macro: 0.53903 |  0:02:20s
epoch 12 | loss: 0.69178 | train_balanced_accuracy: 0.5367  | train_logloss: 0.70526 | train_f1_macro: 0.53517 | valid_balanced_accuracy: 0.53758 | valid_logloss: 0.70316 | valid_f1_macro: 0.53644 |  0:02:32s
epoch 13 | loss: 0.69338 | train_balanced_accuracy: 0.50462 | train_logloss: 0.78804 | train_f1_macro: 0.38213 | valid_balanced_accuracy: 0.50426 | valid_logloss: 0.78709 | valid_f1_macro: 0.38414 |  0:02:44s
epoch 14 | loss: 0.69548 | train_balanced_accuracy: 0.55088 | train_logloss: 0.69725 | train_f1_macro: 0.54879 | valid_balanced_accuracy: 0.54684 | valid_logloss: 0.69962 | valid_f1_macro: 0.54542 |  0:02:56s
epoch 15 | loss: 0.69009 | train_balanced_accuracy: 0.5222  | train_logloss: 0.7072  | train_f1_macro: 0.48844 | valid_balanced_accuracy: 0.51803 | valid_logloss: 0.71173 | valid_f1_macro: 0.48177 |  0:03:08s
epoch 16 | loss: 0.68333 | train_balanced_accuracy: 0.5393  | train_logloss: 0.69252 | train_f1_macro: 0.53885 | valid_balanced_accuracy: 0.54029 | valid_logloss: 0.68662 | valid_f1_macro: 0.54001 |  0:03:20s
epoch 17 | loss: 0.67667 | train_balanced_accuracy: 0.49924 | train_logloss: 0.69992 | train_f1_macro: 0.40535 | valid_balanced_accuracy: 0.49803 | valid_logloss: 0.69714 | valid_f1_macro: 0.40912 |  0:03:32s
epoch 18 | loss: 0.67888 | train_balanced_accuracy: 0.49191 | train_logloss: 0.71485 | train_f1_macro: 0.37944 | valid_balanced_accuracy: 0.4938  | valid_logloss: 0.72575 | valid_f1_macro: 0.38349 |  0:03:44s
epoch 19 | loss: 0.68854 | train_balanced_accuracy: 0.53591 | train_logloss: 0.70447 | train_f1_macro: 0.53059 | valid_balanced_accuracy: 0.52646 | valid_logloss: 0.71304 | valid_f1_macro: 0.52029 |  0:03:56s
epoch 20 | loss: 0.68459 | train_balanced_accuracy: 0.54732 | train_logloss: 0.69133 | train_f1_macro: 0.5396  | valid_balanced_accuracy: 0.54758 | valid_logloss: 0.68916 | valid_f1_macro: 0.54018 |  0:04:07s
epoch 21 | loss: 0.68473 | train_balanced_accuracy: 0.54867 | train_logloss: 0.70745 | train_f1_macro: 0.54107 | valid_balanced_accuracy: 0.54642 | valid_logloss: 0.70739 | valid_f1_macro: 0.53977 |  0:04:19s
epoch 22 | loss: 0.68336 | train_balanced_accuracy: 0.52905 | train_logloss: 0.69365 | train_f1_macro: 0.49996 | valid_balanced_accuracy: 0.51456 | valid_logloss: 0.69287 | valid_f1_macro: 0.48191 |  0:04:31s
epoch 23 | loss: 0.6852  | train_balanced_accuracy: 0.56467 | train_logloss: 0.69624 | train_f1_macro: 0.56037 | valid_balanced_accuracy: 0.55145 | valid_logloss: 0.70006 | valid_f1_macro: 0.54817 |  0:04:42s
epoch 24 | loss: 0.68337 | train_balanced_accuracy: 0.52803 | train_logloss: 0.74086 | train_f1_macro: 0.5203  | valid_balanced_accuracy: 0.52599 | valid_logloss: 0.73905 | valid_f1_macro: 0.51943 |  0:04:54s
epoch 25 | loss: 0.68338 | train_balanced_accuracy: 0.55108 | train_logloss: 0.68618 | train_f1_macro: 0.53492 | valid_balanced_accuracy: 0.54641 | valid_logloss: 0.69054 | valid_f1_macro: 0.53334 |  0:05:06s
epoch 26 | loss: 0.68094 | train_balanced_accuracy: 0.56197 | train_logloss: 0.71029 | train_f1_macro: 0.5572  | valid_balanced_accuracy: 0.54875 | valid_logloss: 0.72273 | valid_f1_macro: 0.5453  |  0:05:18s
epoch 27 | loss: 0.6831  | train_balanced_accuracy: 0.55579 | train_logloss: 0.68738 | train_f1_macro: 0.55561 | valid_balanced_accuracy: 0.54263 | valid_logloss: 0.69136 | valid_f1_macro: 0.542   |  0:05:30s
epoch 28 | loss: 0.68105 | train_balanced_accuracy: 0.54613 | train_logloss: 0.71588 | train_f1_macro: 0.52408 | valid_balanced_accuracy: 0.52728 | valid_logloss: 0.72155 | valid_f1_macro: 0.5022  |  0:05:41s
epoch 29 | loss: 0.6795  | train_balanced_accuracy: 0.55098 | train_logloss: 0.68295 | train_f1_macro: 0.54468 | valid_balanced_accuracy: 0.55106 | valid_logloss: 0.6849  | valid_f1_macro: 0.54569 |  0:05:53s
epoch 30 | loss: 0.67945 | train_balanced_accuracy: 0.55232 | train_logloss: 0.69302 | train_f1_macro: 0.55228 | valid_balanced_accuracy: 0.53414 | valid_logloss: 0.69895 | valid_f1_macro: 0.53384 |  0:06:04s
epoch 31 | loss: 0.6796  | train_balanced_accuracy: 0.56872 | train_logloss: 0.67978 | train_f1_macro: 0.56856 | valid_balanced_accuracy: 0.56537 | valid_logloss: 0.68408 | valid_f1_macro: 0.56536 |  0:06:16s
epoch 32 | loss: 0.6753  | train_balanced_accuracy: 0.55895 | train_logloss: 0.6852  | train_f1_macro: 0.53096 | valid_balanced_accuracy: 0.54464 | valid_logloss: 0.69287 | valid_f1_macro: 0.51299 |  0:06:27s
epoch 33 | loss: 0.6726  | train_balanced_accuracy: 0.55413 | train_logloss: 0.68038 | train_f1_macro: 0.53501 | valid_balanced_accuracy: 0.55851 | valid_logloss: 0.6834  | valid_f1_macro: 0.53841 |  0:06:39s
epoch 34 | loss: 0.67134 | train_balanced_accuracy: 0.51673 | train_logloss: 0.6865  | train_f1_macro: 0.51658 | valid_balanced_accuracy: 0.52064 | valid_logloss: 0.69167 | valid_f1_macro: 0.52051 |  0:06:51s
epoch 35 | loss: 0.67015 | train_balanced_accuracy: 0.57198 | train_logloss: 0.68741 | train_f1_macro: 0.56371 | valid_balanced_accuracy: 0.56928 | valid_logloss: 0.69856 | valid_f1_macro: 0.55894 |  0:07:02s
epoch 36 | loss: 0.66756 | train_balanced_accuracy: 0.57489 | train_logloss: 0.73529 | train_f1_macro: 0.57485 | valid_balanced_accuracy: 0.57348 | valid_logloss: 0.76811 | valid_f1_macro: 0.57315 |  0:07:14s
epoch 37 | loss: 0.66754 | train_balanced_accuracy: 0.55962 | train_logloss: 0.68439 | train_f1_macro: 0.53008 | valid_balanced_accuracy: 0.55236 | valid_logloss: 0.6903  | valid_f1_macro: 0.51961 |  0:07:26s
epoch 38 | loss: 0.65824 | train_balanced_accuracy: 0.56909 | train_logloss: 0.70041 | train_f1_macro: 0.56359 | valid_balanced_accuracy: 0.55848 | valid_logloss: 0.71853 | valid_f1_macro: 0.54955 |  0:07:37s
epoch 39 | loss: 0.64477 | train_balanced_accuracy: 0.57093 | train_logloss: 0.68406 | train_f1_macro: 0.57093 | valid_balanced_accuracy: 0.55882 | valid_logloss: 0.70353 | valid_f1_macro: 0.55864 |  0:07:49s
epoch 40 | loss: 0.64253 | train_balanced_accuracy: 0.57979 | train_logloss: 0.67707 | train_f1_macro: 0.57164 | valid_balanced_accuracy: 0.56157 | valid_logloss: 0.68969 | valid_f1_macro: 0.55082 |  0:08:01s
epoch 41 | loss: 0.64283 | train_balanced_accuracy: 0.56505 | train_logloss: 0.68145 | train_f1_macro: 0.56462 | valid_balanced_accuracy: 0.55997 | valid_logloss: 0.68657 | valid_f1_macro: 0.55997 |  0:08:13s
epoch 42 | loss: 0.64333 | train_balanced_accuracy: 0.56649 | train_logloss: 0.68427 | train_f1_macro: 0.56638 | valid_balanced_accuracy: 0.54841 | valid_logloss: 0.70036 | valid_f1_macro: 0.54778 |  0:08:25s
epoch 43 | loss: 0.6419  | train_balanced_accuracy: 0.57768 | train_logloss: 0.68608 | train_f1_macro: 0.57559 | valid_balanced_accuracy: 0.56001 | valid_logloss: 0.69626 | valid_f1_macro: 0.55597 |  0:08:36s
epoch 44 | loss: 0.636   | train_balanced_accuracy: 0.57459 | train_logloss: 0.67972 | train_f1_macro: 0.57076 | valid_balanced_accuracy: 0.56002 | valid_logloss: 0.69105 | valid_f1_macro: 0.55367 |  0:08:48s
epoch 45 | loss: 0.63819 | train_balanced_accuracy: 0.57209 | train_logloss: 0.67801 | train_f1_macro: 0.57176 | valid_balanced_accuracy: 0.56074 | valid_logloss: 0.69119 | valid_f1_macro: 0.56071 |  0:08:59s
epoch 46 | loss: 0.64451 | train_balanced_accuracy: 0.58703 | train_logloss: 0.6703  | train_f1_macro: 0.58592 | valid_balanced_accuracy: 0.57427 | valid_logloss: 0.67889 | valid_f1_macro: 0.57206 |  0:09:10s
epoch 47 | loss: 0.64141 | train_balanced_accuracy: 0.58713 | train_logloss: 0.67407 | train_f1_macro: 0.58684 | valid_balanced_accuracy: 0.57348 | valid_logloss: 0.68417 | valid_f1_macro: 0.57257 |  0:09:22s
epoch 48 | loss: 0.63779 | train_balanced_accuracy: 0.58625 | train_logloss: 0.68386 | train_f1_macro: 0.57938 | valid_balanced_accuracy: 0.5689  | valid_logloss: 0.70288 | valid_f1_macro: 0.55922 |  0:09:34s
epoch 49 | loss: 0.63702 | train_balanced_accuracy: 0.58192 | train_logloss: 0.68703 | train_f1_macro: 0.58091 | valid_balanced_accuracy: 0.5681  | valid_logloss: 0.69976 | valid_f1_macro: 0.56591 |  0:09:45s
epoch 50 | loss: 0.64527 | train_balanced_accuracy: 0.57786 | train_logloss: 0.7043  | train_f1_macro: 0.55869 | valid_balanced_accuracy: 0.57741 | valid_logloss: 0.72561 | valid_f1_macro: 0.55626 |  0:09:57s
epoch 51 | loss: 0.65228 | train_balanced_accuracy: 0.57863 | train_logloss: 0.67142 | train_f1_macro: 0.56919 | valid_balanced_accuracy: 0.56119 | valid_logloss: 0.68095 | valid_f1_macro: 0.54718 |  0:10:09s
epoch 52 | loss: 0.64574 | train_balanced_accuracy: 0.58356 | train_logloss: 0.67455 | train_f1_macro: 0.58096 | valid_balanced_accuracy: 0.58045 | valid_logloss: 0.6938  | valid_f1_macro: 0.57584 |  0:10:21s
epoch 53 | loss: 0.65152 | train_balanced_accuracy: 0.5745  | train_logloss: 0.68385 | train_f1_macro: 0.57447 | valid_balanced_accuracy: 0.55766 | valid_logloss: 0.68922 | valid_f1_macro: 0.55745 |  0:10:32s
epoch 54 | loss: 0.66022 | train_balanced_accuracy: 0.59843 | train_logloss: 0.67437 | train_f1_macro: 0.59336 | valid_balanced_accuracy: 0.59079 | valid_logloss: 0.69208 | valid_f1_macro: 0.58837 |  0:10:44s
epoch 55 | loss: 0.6546  | train_balanced_accuracy: 0.57963 | train_logloss: 0.65476 | train_f1_macro: 0.56962 | valid_balanced_accuracy: 0.5657  | valid_logloss: 0.67249 | valid_f1_macro: 0.55755 |  0:10:56s
epoch 56 | loss: 0.64319 | train_balanced_accuracy: 0.56813 | train_logloss: 0.96594 | train_f1_macro: 0.5678  | valid_balanced_accuracy: 0.56308 | valid_logloss: 0.94924 | valid_f1_macro: 0.56178 |  0:11:07s
epoch 57 | loss: 0.63616 | train_balanced_accuracy: 0.5411  | train_logloss: 0.792   | train_f1_macro: 0.4879  | valid_balanced_accuracy: 0.53696 | valid_logloss: 0.79743 | valid_f1_macro: 0.47685 |  0:11:19s
epoch 58 | loss: 0.64228 | train_balanced_accuracy: 0.53338 | train_logloss: 1.34818 | train_f1_macro: 0.45141 | valid_balanced_accuracy: 0.52657 | valid_logloss: 1.36704 | valid_f1_macro: 0.43749 |  0:11:30s
epoch 59 | loss: 0.63454 | train_balanced_accuracy: 0.57632 | train_logloss: 0.84711 | train_f1_macro: 0.56885 | valid_balanced_accuracy: 0.5608  | valid_logloss: 0.88248 | valid_f1_macro: 0.55079 |  0:11:42s
epoch 60 | loss: 0.63297 | train_balanced_accuracy: 0.55162 | train_logloss: 0.74305 | train_f1_macro: 0.51445 | valid_balanced_accuracy: 0.53733 | valid_logloss: 0.77587 | valid_f1_macro: 0.49078 |  0:11:54s
epoch 61 | loss: 0.63253 | train_balanced_accuracy: 0.52422 | train_logloss: 0.76802 | train_f1_macro: 0.44454 | valid_balanced_accuracy: 0.52772 | valid_logloss: 0.78179 | valid_f1_macro: 0.44308 |  0:12:06s
epoch 62 | loss: 0.62977 | train_balanced_accuracy: 0.60525 | train_logloss: 0.67842 | train_f1_macro: 0.59703 | valid_balanced_accuracy: 0.59166 | valid_logloss: 0.69273 | valid_f1_macro: 0.58048 |  0:12:17s
epoch 63 | loss: 0.6379  | train_balanced_accuracy: 0.60277 | train_logloss: 0.65638 | train_f1_macro: 0.60021 | valid_balanced_accuracy: 0.56843 | valid_logloss: 0.68324 | valid_f1_macro: 0.567   |  0:12:29s
epoch 64 | loss: 0.64046 | train_balanced_accuracy: 0.59098 | train_logloss: 0.68745 | train_f1_macro: 0.58823 | valid_balanced_accuracy: 0.58315 | valid_logloss: 0.71861 | valid_f1_macro: 0.57797 |  0:12:40s
epoch 65 | loss: 0.64042 | train_balanced_accuracy: 0.61683 | train_logloss: 0.64613 | train_f1_macro: 0.61482 | valid_balanced_accuracy: 0.59895 | valid_logloss: 0.66106 | valid_f1_macro: 0.59593 |  0:12:53s
epoch 66 | loss: 0.64317 | train_balanced_accuracy: 0.57052 | train_logloss: 0.69408 | train_f1_macro: 0.538   | valid_balanced_accuracy: 0.55738 | valid_logloss: 0.70141 | valid_f1_macro: 0.51905 |  0:13:04s
epoch 67 | loss: 0.64393 | train_balanced_accuracy: 0.60177 | train_logloss: 0.66515 | train_f1_macro: 0.57013 | valid_balanced_accuracy: 0.5917  | valid_logloss: 0.6843  | valid_f1_macro: 0.55431 |  0:13:16s
epoch 68 | loss: 0.63566 | train_balanced_accuracy: 0.55543 | train_logloss: 0.78652 | train_f1_macro: 0.51882 | valid_balanced_accuracy: 0.55794 | valid_logloss: 0.78794 | valid_f1_macro: 0.52319 |  0:13:29s
epoch 69 | loss: 0.63084 | train_balanced_accuracy: 0.61161 | train_logloss: 0.65634 | train_f1_macro: 0.59567 | valid_balanced_accuracy: 0.58319 | valid_logloss: 0.67676 | valid_f1_macro: 0.56131 |  0:13:41s
epoch 70 | loss: 0.64189 | train_balanced_accuracy: 0.59782 | train_logloss: 0.70689 | train_f1_macro: 0.57565 | valid_balanced_accuracy: 0.58165 | valid_logloss: 0.71896 | valid_f1_macro: 0.55823 |  0:13:52s
epoch 71 | loss: 0.65014 | train_balanced_accuracy: 0.59038 | train_logloss: 0.66797 | train_f1_macro: 0.54469 | valid_balanced_accuracy: 0.58208 | valid_logloss: 0.66953 | valid_f1_macro: 0.53202 |  0:14:04s
epoch 72 | loss: 0.64681 | train_balanced_accuracy: 0.61153 | train_logloss: 0.73456 | train_f1_macro: 0.60994 | valid_balanced_accuracy: 0.59046 | valid_logloss: 0.76348 | valid_f1_macro: 0.58829 |  0:14:16s
epoch 73 | loss: 0.63975 | train_balanced_accuracy: 0.59745 | train_logloss: 0.68088 | train_f1_macro: 0.59734 | valid_balanced_accuracy: 0.58621 | valid_logloss: 0.69904 | valid_f1_macro: 0.58558 |  0:14:27s
epoch 74 | loss: 0.63746 | train_balanced_accuracy: 0.602   | train_logloss: 0.67667 | train_f1_macro: 0.59696 | valid_balanced_accuracy: 0.6039  | valid_logloss: 0.6885  | valid_f1_macro: 0.60057 |  0:14:39s
epoch 75 | loss: 0.64204 | train_balanced_accuracy: 0.58475 | train_logloss: 0.67346 | train_f1_macro: 0.5612  | valid_balanced_accuracy: 0.58418 | valid_logloss: 0.68311 | valid_f1_macro: 0.56308 |  0:14:50s
epoch 76 | loss: 0.63593 | train_balanced_accuracy: 0.61203 | train_logloss: 0.64086 | train_f1_macro: 0.60539 | valid_balanced_accuracy: 0.6089  | valid_logloss: 0.65097 | valid_f1_macro: 0.60375 |  0:15:02s
epoch 77 | loss: 0.63596 | train_balanced_accuracy: 0.61906 | train_logloss: 0.65096 | train_f1_macro: 0.61838 | valid_balanced_accuracy: 0.6047  | valid_logloss: 0.67292 | valid_f1_macro: 0.60446 |  0:15:14s
epoch 78 | loss: 0.63132 | train_balanced_accuracy: 0.594   | train_logloss: 0.64547 | train_f1_macro: 0.58181 | valid_balanced_accuracy: 0.58613 | valid_logloss: 0.66252 | valid_f1_macro: 0.57579 |  0:15:26s
epoch 79 | loss: 0.63063 | train_balanced_accuracy: 0.59179 | train_logloss: 0.6623  | train_f1_macro: 0.57079 | valid_balanced_accuracy: 0.5811  | valid_logloss: 0.69026 | valid_f1_macro: 0.56241 |  0:15:37s
epoch 80 | loss: 0.62988 | train_balanced_accuracy: 0.55283 | train_logloss: 0.6561  | train_f1_macro: 0.5067  | valid_balanced_accuracy: 0.54751 | valid_logloss: 0.67606 | valid_f1_macro: 0.50487 |  0:15:49s
epoch 81 | loss: 0.6311  | train_balanced_accuracy: 0.63064 | train_logloss: 0.63001 | train_f1_macro: 0.62567 | valid_balanced_accuracy: 0.62241 | valid_logloss: 0.64278 | valid_f1_macro: 0.61935 |  0:16:00s
epoch 82 | loss: 0.63013 | train_balanced_accuracy: 0.63189 | train_logloss: 0.62471 | train_f1_macro: 0.62895 | valid_balanced_accuracy: 0.62512 | valid_logloss: 0.63682 | valid_f1_macro: 0.62351 |  0:16:12s
epoch 83 | loss: 0.62956 | train_balanced_accuracy: 0.63479 | train_logloss: 0.62658 | train_f1_macro: 0.63176 | valid_balanced_accuracy: 0.62165 | valid_logloss: 0.64219 | valid_f1_macro: 0.61984 |  0:16:24s
epoch 84 | loss: 0.63115 | train_balanced_accuracy: 0.62997 | train_logloss: 0.63055 | train_f1_macro: 0.62533 | valid_balanced_accuracy: 0.61547 | valid_logloss: 0.65895 | valid_f1_macro: 0.61224 |  0:16:35s
epoch 85 | loss: 0.63134 | train_balanced_accuracy: 0.62581 | train_logloss: 0.62879 | train_f1_macro: 0.6254  | valid_balanced_accuracy: 0.60162 | valid_logloss: 0.63597 | valid_f1_macro: 0.60157 |  0:16:47s
epoch 86 | loss: 0.63689 | train_balanced_accuracy: 0.63256 | train_logloss: 0.6392  | train_f1_macro: 0.63228 | valid_balanced_accuracy: 0.60202 | valid_logloss: 0.65525 | valid_f1_macro: 0.60099 |  0:16:59s
epoch 87 | loss: 0.64043 | train_balanced_accuracy: 0.62534 | train_logloss: 0.6448  | train_f1_macro: 0.62128 | valid_balanced_accuracy: 0.62319 | valid_logloss: 0.66744 | valid_f1_macro: 0.62101 |  0:17:10s
epoch 88 | loss: 0.63984 | train_balanced_accuracy: 0.62319 | train_logloss: 0.67403 | train_f1_macro: 0.61959 | valid_balanced_accuracy: 0.60243 | valid_logloss: 0.6812  | valid_f1_macro: 0.59721 |  0:17:22s
epoch 89 | loss: 0.64085 | train_balanced_accuracy: 0.62832 | train_logloss: 0.64029 | train_f1_macro: 0.62831 | valid_balanced_accuracy: 0.60086 | valid_logloss: 0.65698 | valid_f1_macro: 0.60062 |  0:17:33s
epoch 90 | loss: 0.63454 | train_balanced_accuracy: 0.57855 | train_logloss: 0.68507 | train_f1_macro: 0.57815 | valid_balanced_accuracy: 0.54379 | valid_logloss: 0.69983 | valid_f1_macro: 0.54232 |  0:17:45s
epoch 91 | loss: 0.63327 | train_balanced_accuracy: 0.63014 | train_logloss: 0.63576 | train_f1_macro: 0.62906 | valid_balanced_accuracy: 0.6032  | valid_logloss: 0.66673 | valid_f1_macro: 0.60029 |  0:17:57s
epoch 92 | loss: 0.63494 | train_balanced_accuracy: 0.62446 | train_logloss: 0.64104 | train_f1_macro: 0.6244  | valid_balanced_accuracy: 0.60317 | valid_logloss: 0.67239 | valid_f1_macro: 0.60312 |  0:18:09s
epoch 93 | loss: 0.63893 | train_balanced_accuracy: 0.62523 | train_logloss: 0.64151 | train_f1_macro: 0.62484 | valid_balanced_accuracy: 0.60586 | valid_logloss: 0.66998 | valid_f1_macro: 0.60584 |  0:18:20s
epoch 94 | loss: 0.6334  | train_balanced_accuracy: 0.63198 | train_logloss: 0.63136 | train_f1_macro: 0.63197 | valid_balanced_accuracy: 0.60433 | valid_logloss: 0.64282 | valid_f1_macro: 0.60411 |  0:18:32s
epoch 95 | loss: 0.6386  | train_balanced_accuracy: 0.62243 | train_logloss: 0.63849 | train_f1_macro: 0.62229 | valid_balanced_accuracy: 0.60625 | valid_logloss: 0.65844 | valid_f1_macro: 0.60624 |  0:18:44s
epoch 96 | loss: 0.63404 | train_balanced_accuracy: 0.62561 | train_logloss: 0.63775 | train_f1_macro: 0.62444 | valid_balanced_accuracy: 0.59972 | valid_logloss: 0.66279 | valid_f1_macro: 0.59722 |  0:18:55s
epoch 97 | loss: 0.63533 | train_balanced_accuracy: 0.62003 | train_logloss: 0.64287 | train_f1_macro: 0.61786 | valid_balanced_accuracy: 0.59967 | valid_logloss: 0.65508 | valid_f1_macro: 0.5984  |  0:19:07s
epoch 98 | loss: 0.63416 | train_balanced_accuracy: 0.63806 | train_logloss: 0.62854 | train_f1_macro: 0.63747 | valid_balanced_accuracy: 0.61974 | valid_logloss: 0.64622 | valid_f1_macro: 0.61946 |  0:19:18s
epoch 99 | loss: 0.63315 | train_balanced_accuracy: 0.62505 | train_logloss: 0.63138 | train_f1_macro: 0.62028 | valid_balanced_accuracy: 0.60583 | valid_logloss: 0.64883 | valid_f1_macro: 0.6026  |  0:19:30s
epoch 100| loss: 0.63523 | train_balanced_accuracy: 0.63508 | train_logloss: 0.626   | train_f1_macro: 0.62863 | valid_balanced_accuracy: 0.61353 | valid_logloss: 0.65021 | valid_f1_macro: 0.60851 |  0:19:42s
epoch 101| loss: 0.63569 | train_balanced_accuracy: 0.61395 | train_logloss: 0.64974 | train_f1_macro: 0.61336 | valid_balanced_accuracy: 0.58965 | valid_logloss: 0.67028 | valid_f1_macro: 0.58936 |  0:19:53s
epoch 102| loss: 0.63197 | train_balanced_accuracy: 0.63016 | train_logloss: 0.64624 | train_f1_macro: 0.62739 | valid_balanced_accuracy: 0.60198 | valid_logloss: 0.67796 | valid_f1_macro: 0.59983 |  0:20:05s

Early stopping occurred at epoch 102 with best_epoch = 82 and best_valid_f1_macro = 0.62351
/mnt/Dados/Mestrado_Computacao_Aplicada_UFMS/documentos_dissertacao/algoritmos/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/pytorch_tabnet/callbacks.py:172: UserWarning: Best weights from best epoch are automatically used!
  warnings.warn(wrn_msg)
[CV 4/5; 7/7] END classifier__estimator=TabNetClassifierTuner(n_d=8, n_a=8, n_steps=3, gamma=1.3, cat_idxs=[], cat_dims=[], cat_emb_dim=1, n_independent=2, n_shared=2, epsilon=1e-15, momentum=0.02, lambda_sparse=0.001, seed=0, clip_value=1, verbose=1, optimizer_fn=<class 'torch.optim.adam.Adam'>, optimizer_params={'lr': 0.02}, scheduler_fn=None, scheduler_params={}, mask_type='sparsemax', input_dim=None, output_dim=None, device_name='cpu', n_shared_decoder=1, n_indep_decoder=1, use_embeddings=True, threshold_categorical_features=150, use_cat_emb_dim=True, fit_eval_metric=['balanced_accuracy', 'logloss', <class 'pytorch_tabnet_tuner.tab_model_tuner.F1ScoreMacro'>], fit_weights=0, fit_batch_size=1024, fit_virtual_batch_size=128), classifier__estimator__cat_emb_dim=20, classifier__estimator__clip_value=1, classifier__estimator__gamma=2.0, classifier__estimator__lambda_sparse=0.001, classifier__estimator__mask_type=sparsemax, classifier__estimator__momentum=0.4, classifier__estimator__n_a=64, classifier__estimator__n_independent=5, classifier__estimator__n_shared=5, classifier__estimator__n_steps=10, classifier__estimator__optimizer_fn=<class 'torch.optim.adam.Adam'>, classifier__estimator__optimizer_params={'lr': 0.02}, classifier__estimator__scheduler_fn=<class 'torch.optim.lr_scheduler.StepLR'>, classifier__estimator__scheduler_params={'step_size': 10, 'gamma': 0.95}, classifier__estimator__seed=42, classifier__estimator__verbose=1;, score=0.517 total time=20.2min
[CV 5/5; 7/7] START classifier__estimator=TabNetClassifierTuner(n_d=8, n_a=8, n_steps=3, gamma=1.3, cat_idxs=[], cat_dims=[], cat_emb_dim=1, n_independent=2, n_shared=2, epsilon=1e-15, momentum=0.02, lambda_sparse=0.001, seed=0, clip_value=1, verbose=1, optimizer_fn=<class 'torch.optim.adam.Adam'>, optimizer_params={'lr': 0.02}, scheduler_fn=None, scheduler_params={}, mask_type='sparsemax', input_dim=None, output_dim=None, device_name='cpu', n_shared_decoder=1, n_indep_decoder=1, use_embeddings=True, threshold_categorical_features=150, use_cat_emb_dim=True, fit_eval_metric=['balanced_accuracy', 'logloss', <class 'pytorch_tabnet_tuner.tab_model_tuner.F1ScoreMacro'>], fit_weights=0, fit_batch_size=1024, fit_virtual_batch_size=128), classifier__estimator__cat_emb_dim=20, classifier__estimator__clip_value=1, classifier__estimator__gamma=2.0, classifier__estimator__lambda_sparse=0.001, classifier__estimator__mask_type=sparsemax, classifier__estimator__momentum=0.4, classifier__estimator__n_a=64, classifier__estimator__n_independent=5, classifier__estimator__n_shared=5, classifier__estimator__n_steps=10, classifier__estimator__optimizer_fn=<class 'torch.optim.adam.Adam'>, classifier__estimator__optimizer_params={'lr': 0.02}, classifier__estimator__scheduler_fn=<class 'torch.optim.lr_scheduler.StepLR'>, classifier__estimator__scheduler_params={'step_size': 10, 'gamma': 0.95}, classifier__estimator__seed=42, classifier__estimator__verbose=1
/mnt/Dados/Mestrado_Computacao_Aplicada_UFMS/documentos_dissertacao/algoritmos/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/pytorch_tabnet/abstract_model.py:75: UserWarning: Device used : cpu
  warnings.warn(f"Device used : {self.device}")
/mnt/Dados/Mestrado_Computacao_Aplicada_UFMS/documentos_dissertacao/algoritmos/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/pytorch_tabnet/abstract_model.py:105: UserWarning: Pretraining: n_d changed from 8 to 64
  warnings.warn(wrn_msg)
/mnt/Dados/Mestrado_Computacao_Aplicada_UFMS/documentos_dissertacao/algoritmos/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/pytorch_tabnet/abstract_model.py:105: UserWarning: Pretraining: cat_dims changed from [] to [4, 2, 2, 2, 46, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]
  warnings.warn(wrn_msg)
/mnt/Dados/Mestrado_Computacao_Aplicada_UFMS/documentos_dissertacao/algoritmos/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/pytorch_tabnet/abstract_model.py:105: UserWarning: Pretraining: cat_emb_dim changed from 20 to [2, 1, 1, 1, 20, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
  warnings.warn(wrn_msg)
/mnt/Dados/Mestrado_Computacao_Aplicada_UFMS/documentos_dissertacao/algoritmos/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/pytorch_tabnet/abstract_model.py:105: UserWarning: Pretraining: cat_idxs changed from [] to [0, 1, 2, 3, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]
  warnings.warn(wrn_msg)
epoch 0  | loss: 4.20934 | train_balanced_accuracy: 0.4937  | train_logloss: 2.54881 | train_f1_macro: 0.48231 | valid_balanced_accuracy: 0.50823 | valid_logloss: 2.62338 | valid_f1_macro: 0.49655 |  0:00:12s
epoch 1  | loss: 1.66028 | train_balanced_accuracy: 0.49519 | train_logloss: 1.94507 | train_f1_macro: 0.38614 | valid_balanced_accuracy: 0.49573 | valid_logloss: 1.98112 | valid_f1_macro: 0.38609 |  0:00:24s
epoch 2  | loss: 2.52608 | train_balanced_accuracy: 0.50058 | train_logloss: 1.86046 | train_f1_macro: 0.33494 | valid_balanced_accuracy: 0.5     | valid_logloss: 1.89199 | valid_f1_macro: 0.3341  |  0:00:35s
epoch 3  | loss: 1.51891 | train_balanced_accuracy: 0.50632 | train_logloss: 1.80358 | train_f1_macro: 0.50602 | valid_balanced_accuracy: 0.5241  | valid_logloss: 1.70726 | valid_f1_macro: 0.52402 |  0:00:47s
epoch 4  | loss: 1.26169 | train_balanced_accuracy: 0.52184 | train_logloss: 1.96521 | train_f1_macro: 0.52013 | valid_balanced_accuracy: 0.53184 | valid_logloss: 1.94135 | valid_f1_macro: 0.52952 |  0:00:59s
epoch 5  | loss: 3.69105 | train_balanced_accuracy: 0.5     | train_logloss: 5.98172 | train_f1_macro: 0.33335 | valid_balanced_accuracy: 0.5     | valid_logloss: 5.98066 | valid_f1_macro: 0.33325 |  0:01:10s
epoch 6  | loss: 1.68211 | train_balanced_accuracy: 0.48282 | train_logloss: 0.93627 | train_f1_macro: 0.41907 | valid_balanced_accuracy: 0.46536 | valid_logloss: 0.96419 | valid_f1_macro: 0.39994 |  0:01:22s
epoch 7  | loss: 0.93822 | train_balanced_accuracy: 0.50284 | train_logloss: 2.35532 | train_f1_macro: 0.50097 | valid_balanced_accuracy: 0.48711 | valid_logloss: 2.44505 | valid_f1_macro: 0.48457 |  0:01:34s
epoch 8  | loss: 0.78271 | train_balanced_accuracy: 0.5105  | train_logloss: 0.73036 | train_f1_macro: 0.4397  | valid_balanced_accuracy: 0.4989  | valid_logloss: 0.73409 | valid_f1_macro: 0.42212 |  0:01:46s
epoch 9  | loss: 0.73056 | train_balanced_accuracy: 0.50811 | train_logloss: 0.83908 | train_f1_macro: 0.37745 | valid_balanced_accuracy: 0.50615 | valid_logloss: 0.84815 | valid_f1_macro: 0.37473 |  0:01:58s
epoch 10 | loss: 0.76061 | train_balanced_accuracy: 0.52747 | train_logloss: 0.7218  | train_f1_macro: 0.46441 | valid_balanced_accuracy: 0.52937 | valid_logloss: 0.71831 | valid_f1_macro: 0.47028 |  0:02:09s
epoch 11 | loss: 0.69611 | train_balanced_accuracy: 0.52677 | train_logloss: 0.70056 | train_f1_macro: 0.52292 | valid_balanced_accuracy: 0.52253 | valid_logloss: 0.70306 | valid_f1_macro: 0.51867 |  0:02:21s
epoch 12 | loss: 0.69094 | train_balanced_accuracy: 0.525   | train_logloss: 0.70011 | train_f1_macro: 0.48514 | valid_balanced_accuracy: 0.51611 | valid_logloss: 0.70083 | valid_f1_macro: 0.47334 |  0:02:33s
epoch 13 | loss: 0.68338 | train_balanced_accuracy: 0.544   | train_logloss: 0.69242 | train_f1_macro: 0.51887 | valid_balanced_accuracy: 0.53037 | valid_logloss: 0.69437 | valid_f1_macro: 0.50051 |  0:02:45s
epoch 14 | loss: 0.67403 | train_balanced_accuracy: 0.4968  | train_logloss: 0.74251 | train_f1_macro: 0.43562 | valid_balanced_accuracy: 0.48966 | valid_logloss: 0.7533  | valid_f1_macro: 0.42964 |  0:02:56s
epoch 15 | loss: 0.68529 | train_balanced_accuracy: 0.50068 | train_logloss: 0.70929 | train_f1_macro: 0.33485 | valid_balanced_accuracy: 0.5     | valid_logloss: 0.70928 | valid_f1_macro: 0.33325 |  0:03:09s
epoch 16 | loss: 0.6778  | train_balanced_accuracy: 0.51973 | train_logloss: 0.69004 | train_f1_macro: 0.51675 | valid_balanced_accuracy: 0.52524 | valid_logloss: 0.69122 | valid_f1_macro: 0.52358 |  0:03:20s
epoch 17 | loss: 0.67621 | train_balanced_accuracy: 0.52514 | train_logloss: 0.69221 | train_f1_macro: 0.51709 | valid_balanced_accuracy: 0.52907 | valid_logloss: 0.69193 | valid_f1_macro: 0.52229 |  0:03:32s
epoch 18 | loss: 0.67405 | train_balanced_accuracy: 0.50994 | train_logloss: 0.7067  | train_f1_macro: 0.37405 | valid_balanced_accuracy: 0.50732 | valid_logloss: 0.70453 | valid_f1_macro: 0.36433 |  0:03:44s
epoch 19 | loss: 0.67543 | train_balanced_accuracy: 0.52241 | train_logloss: 0.69421 | train_f1_macro: 0.51602 | valid_balanced_accuracy: 0.51181 | valid_logloss: 0.6962  | valid_f1_macro: 0.50327 |  0:03:55s
epoch 20 | loss: 0.6709  | train_balanced_accuracy: 0.52817 | train_logloss: 0.69582 | train_f1_macro: 0.45933 | valid_balanced_accuracy: 0.51229 | valid_logloss: 0.69862 | valid_f1_macro: 0.43162 |  0:04:07s
epoch 21 | loss: 0.6793  | train_balanced_accuracy: 0.53092 | train_logloss: 0.69493 | train_f1_macro: 0.52135 | valid_balanced_accuracy: 0.54449 | valid_logloss: 0.69196 | valid_f1_macro: 0.53599 |  0:04:19s
epoch 22 | loss: 0.67342 | train_balanced_accuracy: 0.50396 | train_logloss: 0.70446 | train_f1_macro: 0.36728 | valid_balanced_accuracy: 0.50269 | valid_logloss: 0.70474 | valid_f1_macro: 0.36606 |  0:04:30s
epoch 23 | loss: 0.66341 | train_balanced_accuracy: 0.52364 | train_logloss: 0.69185 | train_f1_macro: 0.46353 | valid_balanced_accuracy: 0.52501 | valid_logloss: 0.69384 | valid_f1_macro: 0.46255 |  0:04:42s
epoch 24 | loss: 0.6608  | train_balanced_accuracy: 0.50048 | train_logloss: 0.73637 | train_f1_macro: 0.33443 | valid_balanced_accuracy: 0.50039 | valid_logloss: 0.73605 | valid_f1_macro: 0.3341  |  0:04:54s
epoch 25 | loss: 0.66022 | train_balanced_accuracy: 0.50058 | train_logloss: 0.72708 | train_f1_macro: 0.33515 | valid_balanced_accuracy: 0.50038 | valid_logloss: 0.73063 | valid_f1_macro: 0.33547 |  0:05:06s
epoch 26 | loss: 0.65157 | train_balanced_accuracy: 0.52818 | train_logloss: 0.69362 | train_f1_macro: 0.4931  | valid_balanced_accuracy: 0.52921 | valid_logloss: 0.69322 | valid_f1_macro: 0.49671 |  0:05:18s
epoch 27 | loss: 0.65276 | train_balanced_accuracy: 0.50386 | train_logloss: 0.69841 | train_f1_macro: 0.37222 | valid_balanced_accuracy: 0.50307 | valid_logloss: 0.69925 | valid_f1_macro: 0.37361 |  0:05:29s
epoch 28 | loss: 0.65228 | train_balanced_accuracy: 0.50521 | train_logloss: 0.71475 | train_f1_macro: 0.35419 | valid_balanced_accuracy: 0.50655 | valid_logloss: 0.72045 | valid_f1_macro: 0.35785 |  0:05:41s
epoch 29 | loss: 0.64766 | train_balanced_accuracy: 0.52657 | train_logloss: 0.69052 | train_f1_macro: 0.52601 | valid_balanced_accuracy: 0.53258 | valid_logloss: 0.69653 | valid_f1_macro: 0.53215 |  0:05:52s
epoch 30 | loss: 0.64845 | train_balanced_accuracy: 0.5505  | train_logloss: 0.74001 | train_f1_macro: 0.53709 | valid_balanced_accuracy: 0.54795 | valid_logloss: 0.7423  | valid_f1_macro: 0.53683 |  0:06:04s
epoch 31 | loss: 0.64665 | train_balanced_accuracy: 0.53503 | train_logloss: 0.69533 | train_f1_macro: 0.49683 | valid_balanced_accuracy: 0.5273  | valid_logloss: 0.70474 | valid_f1_macro: 0.4839  |  0:06:16s
epoch 32 | loss: 0.65014 | train_balanced_accuracy: 0.51881 | train_logloss: 0.69994 | train_f1_macro: 0.40987 | valid_balanced_accuracy: 0.51463 | valid_logloss: 0.70543 | valid_f1_macro: 0.40014 |  0:06:27s
epoch 33 | loss: 0.64472 | train_balanced_accuracy: 0.51525 | train_logloss: 0.69902 | train_f1_macro: 0.41934 | valid_balanced_accuracy: 0.51192 | valid_logloss: 0.70032 | valid_f1_macro: 0.40952 |  0:06:39s
epoch 34 | loss: 0.64386 | train_balanced_accuracy: 0.53677 | train_logloss: 0.69339 | train_f1_macro: 0.50202 | valid_balanced_accuracy: 0.54118 | valid_logloss: 0.69687 | valid_f1_macro: 0.50577 |  0:06:50s
epoch 35 | loss: 0.64464 | train_balanced_accuracy: 0.53822 | train_logloss: 0.69463 | train_f1_macro: 0.51063 | valid_balanced_accuracy: 0.53885 | valid_logloss: 0.7033  | valid_f1_macro: 0.5105  |  0:07:02s
epoch 36 | loss: 0.64387 | train_balanced_accuracy: 0.55146 | train_logloss: 0.68646 | train_f1_macro: 0.54393 | valid_balanced_accuracy: 0.54681 | valid_logloss: 0.69472 | valid_f1_macro: 0.54112 |  0:07:14s
epoch 37 | loss: 0.64532 | train_balanced_accuracy: 0.55378 | train_logloss: 0.69249 | train_f1_macro: 0.54894 | valid_balanced_accuracy: 0.55762 | valid_logloss: 0.69317 | valid_f1_macro: 0.55344 |  0:07:25s
epoch 38 | loss: 0.64733 | train_balanced_accuracy: 0.55841 | train_logloss: 0.68635 | train_f1_macro: 0.55299 | valid_balanced_accuracy: 0.55183 | valid_logloss: 0.68904 | valid_f1_macro: 0.54735 |  0:07:37s
epoch 39 | loss: 0.64996 | train_balanced_accuracy: 0.54471 | train_logloss: 0.68515 | train_f1_macro: 0.54083 | valid_balanced_accuracy: 0.53217 | valid_logloss: 0.68916 | valid_f1_macro: 0.52917 |  0:07:48s
epoch 40 | loss: 0.6483  | train_balanced_accuracy: 0.56418 | train_logloss: 0.68604 | train_f1_macro: 0.56402 | valid_balanced_accuracy: 0.56114 | valid_logloss: 0.6909  | valid_f1_macro: 0.56074 |  0:08:00s
epoch 41 | loss: 0.65225 | train_balanced_accuracy: 0.56813 | train_logloss: 0.68644 | train_f1_macro: 0.56729 | valid_balanced_accuracy: 0.57156 | valid_logloss: 0.68742 | valid_f1_macro: 0.57002 |  0:08:11s
epoch 42 | loss: 0.64917 | train_balanced_accuracy: 0.55848 | train_logloss: 0.68909 | train_f1_macro: 0.5554  | valid_balanced_accuracy: 0.55577 | valid_logloss: 0.6977  | valid_f1_macro: 0.55075 |  0:08:23s
epoch 43 | loss: 0.64586 | train_balanced_accuracy: 0.55869 | train_logloss: 0.68777 | train_f1_macro: 0.55828 | valid_balanced_accuracy: 0.56228 | valid_logloss: 0.6907  | valid_f1_macro: 0.56211 |  0:08:35s
epoch 44 | loss: 0.65049 | train_balanced_accuracy: 0.55068 | train_logloss: 0.69606 | train_f1_macro: 0.54985 | valid_balanced_accuracy: 0.54107 | valid_logloss: 0.70129 | valid_f1_macro: 0.54097 |  0:08:46s
epoch 45 | loss: 0.65453 | train_balanced_accuracy: 0.5421  | train_logloss: 0.69576 | train_f1_macro: 0.54188 | valid_balanced_accuracy: 0.52911 | valid_logloss: 0.70669 | valid_f1_macro: 0.5291  |  0:08:58s
epoch 46 | loss: 0.65456 | train_balanced_accuracy: 0.53166 | train_logloss: 0.71431 | train_f1_macro: 0.49903 | valid_balanced_accuracy: 0.53848 | valid_logloss: 0.7207  | valid_f1_macro: 0.50275 |  0:09:09s
epoch 47 | loss: 0.64977 | train_balanced_accuracy: 0.57392 | train_logloss: 0.68385 | train_f1_macro: 0.57366 | valid_balanced_accuracy: 0.56922 | valid_logloss: 0.69221 | valid_f1_macro: 0.56914 |  0:09:21s
epoch 48 | loss: 0.64812 | train_balanced_accuracy: 0.5304  | train_logloss: 0.70144 | train_f1_macro: 0.47341 | valid_balanced_accuracy: 0.52577 | valid_logloss: 0.7049  | valid_f1_macro: 0.46748 |  0:09:32s
epoch 49 | loss: 0.64743 | train_balanced_accuracy: 0.50318 | train_logloss: 0.90867 | train_f1_macro: 0.34405 | valid_balanced_accuracy: 0.50385 | valid_logloss: 0.9191  | valid_f1_macro: 0.34703 |  0:09:44s
epoch 50 | loss: 0.64773 | train_balanced_accuracy: 0.52836 | train_logloss: 0.75147 | train_f1_macro: 0.41278 | valid_balanced_accuracy: 0.53623 | valid_logloss: 0.75891 | valid_f1_macro: 0.42538 |  0:09:55s
epoch 51 | loss: 0.65543 | train_balanced_accuracy: 0.56301 | train_logloss: 0.68261 | train_f1_macro: 0.54711 | valid_balanced_accuracy: 0.55966 | valid_logloss: 0.68466 | valid_f1_macro: 0.54076 |  0:10:07s
epoch 52 | loss: 0.6457  | train_balanced_accuracy: 0.57326 | train_logloss: 0.67745 | train_f1_macro: 0.565   | valid_balanced_accuracy: 0.58383 | valid_logloss: 0.67897 | valid_f1_macro: 0.57686 |  0:10:19s
epoch 53 | loss: 0.64282 | train_balanced_accuracy: 0.60419 | train_logloss: 0.66728 | train_f1_macro: 0.59741 | valid_balanced_accuracy: 0.60515 | valid_logloss: 0.66894 | valid_f1_macro: 0.59702 |  0:10:30s
epoch 54 | loss: 0.6429  | train_balanced_accuracy: 0.57277 | train_logloss: 0.67191 | train_f1_macro: 0.57275 | valid_balanced_accuracy: 0.5592  | valid_logloss: 0.67645 | valid_f1_macro: 0.55918 |  0:10:42s
epoch 55 | loss: 0.64183 | train_balanced_accuracy: 0.57999 | train_logloss: 0.66241 | train_f1_macro: 0.57916 | valid_balanced_accuracy: 0.57233 | valid_logloss: 0.66273 | valid_f1_macro: 0.57133 |  0:10:53s
epoch 56 | loss: 0.64049 | train_balanced_accuracy: 0.59484 | train_logloss: 0.65811 | train_f1_macro: 0.591   | valid_balanced_accuracy: 0.59356 | valid_logloss: 0.6606  | valid_f1_macro: 0.58942 |  0:11:05s
epoch 57 | loss: 0.64057 | train_balanced_accuracy: 0.57823 | train_logloss: 0.66609 | train_f1_macro: 0.53423 | valid_balanced_accuracy: 0.57397 | valid_logloss: 0.67032 | valid_f1_macro: 0.52827 |  0:11:16s
epoch 58 | loss: 0.64525 | train_balanced_accuracy: 0.58838 | train_logloss: 0.66642 | train_f1_macro: 0.5852  | valid_balanced_accuracy: 0.58623 | valid_logloss: 0.66899 | valid_f1_macro: 0.58159 |  0:11:28s
epoch 59 | loss: 0.64779 | train_balanced_accuracy: 0.5668  | train_logloss: 0.66043 | train_f1_macro: 0.56174 | valid_balanced_accuracy: 0.57188 | valid_logloss: 0.66368 | valid_f1_macro: 0.56639 |  0:11:40s
epoch 60 | loss: 0.64342 | train_balanced_accuracy: 0.56145 | train_logloss: 0.68591 | train_f1_macro: 0.50611 | valid_balanced_accuracy: 0.55162 | valid_logloss: 0.69216 | valid_f1_macro: 0.4888  |  0:11:51s
epoch 61 | loss: 0.64169 | train_balanced_accuracy: 0.57798 | train_logloss: 0.67828 | train_f1_macro: 0.57724 | valid_balanced_accuracy: 0.5615  | valid_logloss: 0.68964 | valid_f1_macro: 0.56093 |  0:12:03s
epoch 62 | loss: 0.64508 | train_balanced_accuracy: 0.5455  | train_logloss: 0.71322 | train_f1_macro: 0.50473 | valid_balanced_accuracy: 0.53287 | valid_logloss: 0.72332 | valid_f1_macro: 0.49512 |  0:12:14s
epoch 63 | loss: 0.64719 | train_balanced_accuracy: 0.60073 | train_logloss: 0.65347 | train_f1_macro: 0.59971 | valid_balanced_accuracy: 0.59046 | valid_logloss: 0.65638 | valid_f1_macro: 0.58877 |  0:12:26s
epoch 64 | loss: 0.64655 | train_balanced_accuracy: 0.60016 | train_logloss: 0.65709 | train_f1_macro: 0.59958 | valid_balanced_accuracy: 0.59082 | valid_logloss: 0.65935 | valid_f1_macro: 0.59071 |  0:12:38s
epoch 65 | loss: 0.65121 | train_balanced_accuracy: 0.57835 | train_logloss: 0.66365 | train_f1_macro: 0.57457 | valid_balanced_accuracy: 0.58045 | valid_logloss: 0.66595 | valid_f1_macro: 0.57657 |  0:12:50s
epoch 66 | loss: 0.647   | train_balanced_accuracy: 0.50606 | train_logloss: 0.83205 | train_f1_macro: 0.45428 | valid_balanced_accuracy: 0.50547 | valid_logloss: 0.83595 | valid_f1_macro: 0.45401 |  0:13:01s
epoch 67 | loss: 0.64327 | train_balanced_accuracy: 0.49796 | train_logloss: 0.83735 | train_f1_macro: 0.42371 | valid_balanced_accuracy: 0.50237 | valid_logloss: 0.8405  | valid_f1_macro: 0.42668 |  0:13:14s
epoch 68 | loss: 0.64452 | train_balanced_accuracy: 0.49285 | train_logloss: 1.12502 | train_f1_macro: 0.4122  | valid_balanced_accuracy: 0.49696 | valid_logloss: 1.12442 | valid_f1_macro: 0.4143  |  0:13:25s
epoch 69 | loss: 0.64184 | train_balanced_accuracy: 0.49893 | train_logloss: 0.92335 | train_f1_macro: 0.40926 | valid_balanced_accuracy: 0.50158 | valid_logloss: 0.91884 | valid_f1_macro: 0.41073 |  0:13:37s
epoch 70 | loss: 0.64341 | train_balanced_accuracy: 0.49324 | train_logloss: 0.83043 | train_f1_macro: 0.41362 | valid_balanced_accuracy: 0.49966 | valid_logloss: 0.82604 | valid_f1_macro: 0.41764 |  0:13:48s
epoch 71 | loss: 0.64444 | train_balanced_accuracy: 0.55992 | train_logloss: 0.67716 | train_f1_macro: 0.54032 | valid_balanced_accuracy: 0.56506 | valid_logloss: 0.67282 | valid_f1_macro: 0.54755 |  0:14:00s
epoch 72 | loss: 0.64186 | train_balanced_accuracy: 0.50048 | train_logloss: 1.09808 | train_f1_macro: 0.33861 | valid_balanced_accuracy: 0.49923 | valid_logloss: 1.09415 | valid_f1_macro: 0.33647 |  0:14:12s
epoch 73 | loss: 0.64047 | train_balanced_accuracy: 0.51118 | train_logloss: 0.90821 | train_f1_macro: 0.41671 | valid_balanced_accuracy: 0.51392 | valid_logloss: 0.9058  | valid_f1_macro: 0.42156 |  0:14:23s

Early stopping occurred at epoch 73 with best_epoch = 53 and best_valid_f1_macro = 0.59702
/mnt/Dados/Mestrado_Computacao_Aplicada_UFMS/documentos_dissertacao/algoritmos/precoce-ms-classification/.venv-precoce-ms/lib/python3.8/site-packages/pytorch_tabnet/callbacks.py:172: UserWarning: Best weights from best epoch are automatically used!
  warnings.warn(wrn_msg)
[CV 5/5; 7/7] END classifier__estimator=TabNetClassifierTuner(n_d=8, n_a=8, n_steps=3, gamma=1.3, cat_idxs=[], cat_dims=[], cat_emb_dim=1, n_independent=2, n_shared=2, epsilon=1e-15, momentum=0.02, lambda_sparse=0.001, seed=0, clip_value=1, verbose=1, optimizer_fn=<class 'torch.optim.adam.Adam'>, optimizer_params={'lr': 0.02}, scheduler_fn=None, scheduler_params={}, mask_type='sparsemax', input_dim=None, output_dim=None, device_name='cpu', n_shared_decoder=1, n_indep_decoder=1, use_embeddings=True, threshold_categorical_features=150, use_cat_emb_dim=True, fit_eval_metric=['balanced_accuracy', 'logloss', <class 'pytorch_tabnet_tuner.tab_model_tuner.F1ScoreMacro'>], fit_weights=0, fit_batch_size=1024, fit_virtual_batch_size=128), classifier__estimator__cat_emb_dim=20, classifier__estimator__clip_value=1, classifier__estimator__gamma=2.0, classifier__estimator__lambda_sparse=0.001, classifier__estimator__mask_type=sparsemax, classifier__estimator__momentum=0.4, classifier__estimator__n_a=64, classifier__estimator__n_independent=5, classifier__estimator__n_shared=5, classifier__estimator__n_steps=10, classifier__estimator__optimizer_fn=<class 'torch.optim.adam.Adam'>, classifier__estimator__optimizer_params={'lr': 0.02}, classifier__estimator__scheduler_fn=<class 'torch.optim.lr_scheduler.StepLR'>, classifier__estimator__scheduler_params={'step_size': 10, 'gamma': 0.95}, classifier__estimator__seed=42, classifier__estimator__verbose=1;, score=0.570 total time=14.5min
--------------------- RESULTS GS1 ---------------------

CSV gerado com sucesso em: ./runs/results/GS1-cv_results-13-04-2023_21:39:45.csv.
Function generate_new_csv Took 0:00:00.025480

Cross validation results:
   mean_fit_time  std_fit_time  mean_score_time  std_score_time  ... split4_test_score mean_test_score std_test_score rank_test_score
4      32.825124      0.635417         0.923140        0.033178  ...          0.611720        0.613254       0.001582               1
5       2.055602      0.101020         0.119720        0.003629  ...          0.604795        0.605185       0.002544               2
1       0.172412      0.024467         0.020067        0.001955  ...          0.575806        0.562576       0.009604               3
6    1163.302863    292.316696         3.911709        0.320437  ...          0.569780        0.537577       0.024094               4
3       5.714581      1.602703         0.054821        0.008888  ...          0.496808        0.514560       0.010478               5
2       0.129338      0.020140         0.020907        0.000660  ...          0.508343        0.507677       0.001436               6
0       0.378324      0.620343         0.021678        0.000558  ...          0.450035        0.457873       0.004503               7

[7 rows x 58 columns]
Object saved in file: ./runs/best_estimators/GS1-best_pipe-13-04-2023_21:39:45.joblib
Object saved in file: ./runs/best_estimators/best_estimator-RandomForestClassifier-13-04-2023_21:39:46.joblib
Best estimator: RandomForestClassifier(criterion='entropy', max_features=0.75,
                       n_estimators=1000, n_jobs=-1, random_state=42)
Object saved in file: ./runs/encoders_scalers/GS1-column_transformer-13-04-2023_21:39:47.joblib
Internal CV score obtained by the best set of parameters: 0.613254183145816
Best params: {'classifier__estimator': RandomForestClassifier(criterion='entropy', max_features=0.75,
                       n_estimators=1000, n_jobs=-1, random_state=42), 'classifier__estimator__class_weight': None, 'classifier__estimator__criterion': 'entropy', 'classifier__estimator__max_depth': None, 'classifier__estimator__max_features': 0.75, 'classifier__estimator__n_estimators': 1000, 'classifier__estimator__n_jobs': -1, 'classifier__estimator__random_state': 42}
Scorer function: make_scorer(f1_score, pos_label=None, average=macro)
The number of CV splits: 5
Seconds used for refitting the best model on the whole dataset: 39.311899185180664
Whether the scorers compute several metrics: False
The number of features when fit is performed: 21
Names of features seen during fit: ['Tipificacao' 'Peso' 'QuestionarioClassificacaoEstabel' 'ILP' 'IFP'
 'ILPF' 'QuestionarioPossuiOutrosIncentiv' 'QuestionarioFabricaRacao'
 'regua de manejo' 'identificacao individual' 'rastreamento SISBOV'
 'participa de aliancas mercadolog' 'QuestionarioPraticaRecuperacaoPa'
 'Confinamento' 'Suplementacao_a_campo' 'SemiConfinamento' 'tot3m_Chuva'
 'med3m_formITUinst' 'med3m_NDVI' 'med3m_preR_milho' 'med3m_preR_boi']

!!!>> When you observe high training accuracy, but low test accuracy, it is likely that you encountered overfitting problem.
Training set score: 0.7465388767036601
Test set score: 0.6090182230691429

CSV gerado com sucesso em: ./runs/results/GS1-grid_search_results-13-04-2023_21:39:54.csv.
Function generate_new_csv Took 0:00:00.002285

*****INICIO CONFUSION MATRIX DISPLAY******
Figure confusion_matrix_display-13-04-2023_21:39:57.png saved in ./plots/ directory.
*****FIM CONFUSION MATRIX DISPLAY******

Function confusion_matrix_display Took 0:00:00.715678


--- Test data performance ---
Test Acurácia: 0.6917457385170879
Test Acurácia Balanceada: 0.6876650628775274
Test Revocação: 0.6938486442735734
Test Micro Revocação: 0.6917457385170879
Test Macro Revocação: 0.6876650628775274
Test Precisão: 0.9140343862455018
Test Micro Precisão: 0.6917457385170879
Test Macro Precisão: 0.6136218231726829
Test F1: 0.7888652441479265
Test Micro F1: 0.6917457385170879
Test Macro F1: 0.6090182230691429
Test Coeficiente Kappa: 0.25576959392537724
Test Coeficiente de Correlação de Matthews: 0.2920468906868267
Test Log Loss: 0.5761502836430529
Test ROC AUC Score: 0.7594334027809004

CSV gerado com sucesso em: ./runs/results/GS1-performance_results-13-04-2023_21:39:57.csv.
Function generate_new_csv Took 0:00:00.001162

              precision    recall  f1-score   support

           0       0.31      0.68      0.43      2025
           1       0.91      0.69      0.79      9884

    accuracy                           0.69     11909
   macro avg       0.61      0.69      0.61     11909
weighted avg       0.81      0.69      0.73     11909


CSV gerado com sucesso em: ./runs/results/GS1-classification_report-13-04-2023_21:39:57.csv.
Function generate_new_csv Took 0:00:00.000852

Function run_grid_search Took 1:41:52.400839

